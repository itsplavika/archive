"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.clearRequestsCache = exports.getRequestCache = exports.isAbortAction = exports.isErrorAction = exports.isSuccessAction = exports.getRequestActionFromResponse = exports.isResponseAction = exports.isRequestAction = exports.getActionPayload = exports.createAbortAction = exports.createErrorAction = exports.createSuccessAction = exports.abort = exports.error = exports.success = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _constants = require("./constants");

var getActionWithSuffix = function getActionWithSuffix(suffix) {
  return function (actionType) {
    return actionType + suffix;
  };
};

var success = getActionWithSuffix(_constants.SUCCESS_SUFFIX);
exports.success = success;
var error = getActionWithSuffix(_constants.ERROR_SUFFIX);
exports.error = error;
var abort = getActionWithSuffix(_constants.ABORT_SUFFIX);
exports.abort = abort;

var isFSA = function isFSA(action) {
  return !!action.payload;
};

var createSuccessAction = function createSuccessAction(action, data, response) {
  return (0, _extends2.default)({
    type: success(action.type)
  }, isFSA(action) ? {
    payload: {
      data: data,
      response: response
    }
  } : {
    data: data,
    response: response
  }, {
    meta: (0, _extends2.default)({}, action.meta, {
      requestAction: action
    })
  });
};

exports.createSuccessAction = createSuccessAction;

var createErrorAction = function createErrorAction(action, errorData) {
  return (0, _extends2.default)({
    type: error(action.type)
  }, isFSA(action) ? {
    payload: errorData,
    error: true
  } : {
    error: errorData
  }, {
    meta: (0, _extends2.default)({}, action.meta, {
      requestAction: action
    })
  });
};

exports.createErrorAction = createErrorAction;

var createAbortAction = function createAbortAction(action) {
  return {
    type: abort(action.type),
    meta: (0, _extends2.default)({}, action.meta, {
      requestAction: action
    })
  };
};

exports.createAbortAction = createAbortAction;

var getActionPayload = function getActionPayload(action) {
  return action.payload === undefined ? action : action.payload;
};

exports.getActionPayload = getActionPayload;

var isRequestAction = function isRequestAction(action) {
  var actionPayload = getActionPayload(action);
  return !!actionPayload && !!actionPayload.request && !!(Array.isArray(actionPayload.request) || actionPayload.request.url || actionPayload.request.query) && !actionPayload.response && !(actionPayload instanceof Error);
};

exports.isRequestAction = isRequestAction;

var isResponseAction = function isResponseAction(action) {
  return !!(action.meta && action.meta.requestAction);
};

exports.isResponseAction = isResponseAction;

var getRequestActionFromResponse = function getRequestActionFromResponse(action) {
  return action.meta.requestAction;
};

exports.getRequestActionFromResponse = getRequestActionFromResponse;

var isSuccessAction = function isSuccessAction(action) {
  return isResponseAction(action) && action.type.endsWith(_constants.SUCCESS_SUFFIX);
};

exports.isSuccessAction = isSuccessAction;

var isErrorAction = function isErrorAction(action) {
  return isResponseAction(action) && action.type.endsWith(_constants.ERROR_SUFFIX);
};

exports.isErrorAction = isErrorAction;

var isAbortAction = function isAbortAction(action) {
  return isResponseAction(action) && action.type.endsWith(_constants.ABORT_SUFFIX);
};

exports.isAbortAction = isAbortAction;

var getRequestCache = function getRequestCache() {
  return {
    type: _constants.GET_REQUEST_CACHE
  };
};

exports.getRequestCache = getRequestCache;

var clearRequestsCache = function clearRequestsCache() {
  for (var _len = arguments.length, actionTypes = new Array(_len), _key = 0; _key < _len; _key++) {
    actionTypes[_key] = arguments[_key];
  }

  return {
    type: _constants.CLEAR_REQUESTS_CACHE,
    actionTypes: actionTypes
  };
};

exports.clearRequestsCache = clearRequestsCache;