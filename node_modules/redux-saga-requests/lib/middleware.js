"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.serverRequestsFilterMiddleware = exports.requestsCacheMiddleware = exports.requestsPromiseMiddleware = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _constants = require("./constants");

var _actions = require("./actions");

var shouldActionBePromisified = function shouldActionBePromisified(action, auto) {
  return auto && !(action.meta && action.meta.asPromise === false) || action.meta && action.meta.asPromise;
};

var requestsPromiseMiddleware = function requestsPromiseMiddleware(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$auto = _ref.auto,
      auto = _ref$auto === void 0 ? false : _ref$auto;

  var requestMap = new Map();
  return function () {
    return function (next) {
      return function (action) {
        if ((0, _actions.isRequestAction)(action) && shouldActionBePromisified(action, auto)) {
          return new Promise(function (resolve, reject) {
            requestMap.set(action, function (response, error) {
              return error ? reject(response) : resolve(response);
            });
            next(action);
          });
        }

        if ((0, _actions.isResponseAction)(action)) {
          var requestAction = (0, _actions.getRequestActionFromResponse)(action);

          if (shouldActionBePromisified(requestAction, auto)) {
            var requestActionPromise = requestMap.get(requestAction);
            requestActionPromise(action, action.type !== (0, _actions.success)(requestAction.type));
            requestMap.delete(requestAction);
          }
        }

        return next(action);
      };
    };
  };
};

exports.requestsPromiseMiddleware = requestsPromiseMiddleware;

var isCacheValid = function isCacheValid(cache) {
  return cache.expiring === null || Date.now() <= cache.expiring;
};

var getNewCacheTimeout = function getNewCacheTimeout(cache) {
  return cache === true ? null : cache * 1000 + Date.now();
};

var getCacheKey = function getCacheKey(action) {
  return action.type + (action.meta.cacheKey || '');
};

var requestsCacheMiddleware = function requestsCacheMiddleware() {
  var cacheMap = new Map();
  return function () {
    return function (next) {
      return function (action) {
        if (action.type === _constants.GET_REQUEST_CACHE) {
          return cacheMap;
        }

        if (action.type === _constants.CLEAR_REQUESTS_CACHE) {
          if (action.actionTypes.length === 0) {
            cacheMap.clear();
          } else {
            action.actionTypes.forEach(function (actionType) {
              return cacheMap.delete(actionType);
            });
          }

          return null;
        }

        if ((0, _actions.isRequestAction)(action) && action.meta && action.meta.cache) {
          var cacheKey = getCacheKey(action);
          var cacheValue = cacheMap.get(cacheKey);

          if (cacheValue && isCacheValid(cacheValue)) {
            return next((0, _extends2.default)({}, action, {
              meta: (0, _extends2.default)({}, action.meta, {
                cacheResponse: cacheValue.response
              })
            }));
          } else if (cacheValue && !isCacheValid(cacheValue)) {
            cacheMap.delete(cacheKey);
          }
        } else if ((0, _actions.isSuccessAction)(action) && action.meta && action.meta.cache && !action.meta.cacheResponse) {
          var requestAction = (0, _actions.getRequestActionFromResponse)(action);

          if (action.meta.cacheKey && action.meta.cacheSize) {
            var currentCacheKeys = Array.from(cacheMap.keys()).filter(function (k) {
              return k.startsWith(requestAction.type);
            });

            if (action.meta.cacheSize === currentCacheKeys.length) {
              cacheMap.delete(currentCacheKeys[0]);
            }
          }

          cacheMap.set(getCacheKey(requestAction), {
            response: (0, _actions.getActionPayload)(action).response,
            expiring: getNewCacheTimeout(action.meta.cache)
          });
        }

        return next(action);
      };
    };
  };
};

exports.requestsCacheMiddleware = requestsCacheMiddleware;

var serverRequestsFilterMiddleware = function serverRequestsFilterMiddleware(_ref2) {
  var serverRequestActions = _ref2.serverRequestActions;
  var actionsToBeIgnored = serverRequestActions.slice();
  return function () {
    return function (next) {
      return function (action) {
        if (!(0, _actions.isRequestAction)(action)) {
          return next(action);
        }

        var actionToBeIgnoredIndex = actionsToBeIgnored.findIndex(function (a) {
          return a.type === action.type;
        });

        if (actionToBeIgnoredIndex === -1) {
          return next(action);
        }

        actionsToBeIgnored.splice(actionToBeIgnoredIndex, 1);
        return null;
      };
    };
  };
};

exports.serverRequestsFilterMiddleware = serverRequestsFilterMiddleware;