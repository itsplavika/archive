import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

import { success, error, abort, isSuccessAction, isErrorAction, isResponseAction, getRequestActionFromResponse } from './actions'; // to support libraries like redux-act and redux-actions

var normalizeActionType = function normalizeActionType(actionType) {
  return typeof actionType === 'function' ? actionType.toString() : actionType;
};

var operationConfigHasRequestKey = function operationConfigHasRequestKey(config) {
  return typeof config !== 'boolean' && !!config.getRequestKey;
};

var getInitialRequestState = function getInitialRequestState(_ref) {
  var getDefaultData = _ref.getDefaultData,
      multiple = _ref.multiple,
      operations = _ref.operations;
  return {
    data: getDefaultData(multiple),
    pending: 0,
    error: null,
    operations: operations && Object.entries(operations).reduce(function (prev, _ref2) {
      var _extends2;

      var k = _ref2[0],
          v = _ref2[1];
      return _extends({}, prev, (_extends2 = {}, _extends2[k] = operationConfigHasRequestKey(v) ? {} : {
        error: null,
        pending: 0
      }, _extends2));
    }, {})
  };
};

var getInitialState = function getInitialState(state, reducer, config) {
  if (!reducer) {
    return getInitialRequestState(config);
  }

  return _extends({}, getInitialRequestState(config), reducer(undefined, {}));
};

var getDataUpdaterForSuccess = function getDataUpdaterForSuccess(reducerConfig, operationConfig) {
  if (operationConfig === true || typeof operationConfig !== 'boolean' && operationConfig.updateData === true) {
    return reducerConfig.updateData || reducerConfig.getData;
  } else if (typeof operationConfig === 'function') {
    return operationConfig;
  } else if (typeof operationConfig !== 'boolean' && typeof operationConfig.updateData !== 'boolean') {
    return operationConfig.updateData;
  }

  return null;
};

var defaultConfig = {
  multiple: false,
  getDefaultData: function getDefaultData(multiple) {
    return multiple ? [] : null;
  },
  getData: function getData(state, action) {
    return action.payload ? action.payload.data : action.data;
  },
  updateData: null,
  getError: function getError(state, action) {
    return action.payload ? action.payload : action.error;
  },
  onRequest: function onRequest(state) {
    return _extends({}, state, {
      pending: state.pending + 1,
      error: null
    });
  },
  onSuccess: function onSuccess(state, action, config) {
    return _extends({}, state, {
      data: config.getData(state, action, config),
      pending: state.pending - 1,
      error: null
    });
  },
  onError: function onError(state, action, config) {
    return _extends({}, state, {
      data: config.getDefaultData(config.multiple),
      pending: state.pending - 1,
      error: config.getError(state, action, config)
    });
  },
  onAbort: function onAbort(state) {
    return _extends({}, state, {
      pending: state.pending - 1
    });
  },
  resetOn: [],
  operations: null
};
export var createRequestsReducer = function createRequestsReducer(globalConfig) {
  if (globalConfig === void 0) {
    globalConfig = {};
  }

  return function (localConfig, reducer) {
    if (reducer === void 0) {
      reducer = null;
    }

    var config = _extends({}, defaultConfig, globalConfig, localConfig);

    var onRequest = config.onRequest,
        onSuccess = config.onSuccess,
        onError = config.onError,
        onAbort = config.onAbort,
        resetOn = config.resetOn,
        getError = config.getError,
        operations = config.operations,
        actionType = config.actionType;
    var normalizedActionType = normalizeActionType(actionType);
    var shouldResetForAction = resetOn;

    if (typeof resetOn !== 'function') {
      var normalizedResetActions = resetOn.map(normalizeActionType);

      shouldResetForAction = function shouldResetForAction(action) {
        return normalizedResetActions.includes(action.type);
      };
    }

    return function (state, action) {
      var nextState = state === undefined ? getInitialState(state, reducer, config) : state;

      if (shouldResetForAction(action)) {
        nextState = _extends({}, getInitialState(nextState, reducer, config), {
          pending: nextState.pending
        });
      }

      if (operations && action.type in operations) {
        var _extends3, _extends4;

        var operationConfig = operations[action.type];
        return _extends({}, nextState, {
          data: operationConfig.updateDataOptimistic ? operationConfig.updateDataOptimistic(nextState, action, config) : nextState.data,
          operations: _extends({}, nextState.operations, (_extends4 = {}, _extends4[action.type] = operationConfigHasRequestKey(operationConfig) ? _extends({}, nextState.operations[action.type], (_extends3 = {}, _extends3[operationConfig.getRequestKey(action)] = {
            error: null,
            pending: nextState.operations[action.type][operationConfig.getRequestKey(action)] ? nextState.operations[action.type][operationConfig.getRequestKey(action)].pending + 1 : 1
          }, _extends3)) : {
            error: null,
            pending: nextState.operations[action.type].pending + 1
          }, _extends4))
        });
      }

      if (operations && isResponseAction(action) && getRequestActionFromResponse(action).type in operations) {
        var _extends10;

        var requestAction = getRequestActionFromResponse(action);
        var _operationConfig = operations[requestAction.type];

        var _nextState$operations = nextState.operations,
            currentOperation = _nextState$operations[requestAction.type],
            otherOperations = _objectWithoutPropertiesLoose(_nextState$operations, [requestAction.type].map(_toPropertyKey));

        if (isSuccessAction(action)) {
          var _extends6;

          var dataUpdater = getDataUpdaterForSuccess(config, _operationConfig);

          var _getUpdatedCurrentOperation = function _getUpdatedCurrentOperation() {
            if (!operationConfigHasRequestKey(_operationConfig)) {
              return {
                error: null,
                pending: currentOperation.pending - 1
              };
            }

            var currentRequestKey = _operationConfig.getRequestKey(requestAction);

            var operationForRequestKey = currentOperation[currentRequestKey],
                remainingOperations = _objectWithoutPropertiesLoose(currentOperation, [currentRequestKey].map(_toPropertyKey));

            if (operationForRequestKey.pending !== 1) {
              var _extends5;

              return _extends({}, remainingOperations, (_extends5 = {}, _extends5[currentRequestKey] = {
                error: null,
                pending: operationForRequestKey.pending - 1
              }, _extends5));
            }

            return remainingOperations;
          };

          return _extends({}, nextState, {
            data: dataUpdater ? dataUpdater(nextState, action, config) : nextState.data,
            operations: _extends({}, otherOperations, (_extends6 = {}, _extends6[requestAction.type] = _getUpdatedCurrentOperation(), _extends6))
          });
        }

        if (isErrorAction(action)) {
          var _extends7, _extends8;

          return _extends({}, nextState, {
            data: _operationConfig.revertData ? _operationConfig.revertData(nextState, action, config) : nextState.data,
            operations: _extends({}, otherOperations, (_extends8 = {}, _extends8[requestAction.type] = operationConfigHasRequestKey(_operationConfig) ? _extends({}, currentOperation, (_extends7 = {}, _extends7[_operationConfig.getRequestKey(requestAction)] = {
              error: getError(nextState, action, config),
              pending: currentOperation[_operationConfig.getRequestKey(requestAction)].pending - 1
            }, _extends7)) : {
              error: getError(nextState, action, config),
              pending: currentOperation.pending - 1
            }, _extends8))
          });
        } // abort case


        var getUpdatedCurrentOperation = function getUpdatedCurrentOperation() {
          if (!operationConfigHasRequestKey(_operationConfig)) {
            return _extends({}, currentOperation, {
              pending: currentOperation.pending - 1
            });
          }

          var currentRequestKey = _operationConfig.getRequestKey(requestAction);

          var operationForRequestKey = currentOperation[currentRequestKey],
              remainingOperations = _objectWithoutPropertiesLoose(currentOperation, [currentRequestKey].map(_toPropertyKey));

          if (operationForRequestKey.pending !== 1) {
            var _extends9;

            return _extends({}, remainingOperations, (_extends9 = {}, _extends9[currentRequestKey] = _extends({}, operationForRequestKey, {
              pending: operationForRequestKey.pending - 1
            }), _extends9));
          }

          return remainingOperations;
        };

        return _extends({}, nextState, {
          data: _operationConfig.revertData ? _operationConfig.revertData(nextState, action, config) : nextState.data,
          operations: _extends({}, otherOperations, (_extends10 = {}, _extends10[requestAction.type] = getUpdatedCurrentOperation(), _extends10))
        });
      }

      switch (action.type) {
        case normalizedActionType:
          return onRequest(nextState, action, config);

        case success(normalizedActionType):
          return onSuccess(nextState, action, config);

        case error(normalizedActionType):
          return onError(nextState, action, config);

        case abort(normalizedActionType):
          return onAbort(nextState, action, config);

        default:
          return reducer ? reducer(nextState, action) : nextState;
      }
    };
  };
};
export var requestsReducer = createRequestsReducer();