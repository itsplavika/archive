import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(getRequestInstance),
    _marked2 =
/*#__PURE__*/
_regeneratorRuntime.mark(sendRequest),
    _marked3 =
/*#__PURE__*/
_regeneratorRuntime.mark(cancelSendRequestOnAction),
    _marked4 =
/*#__PURE__*/
_regeneratorRuntime.mark(watchRequests),
    _marked5 =
/*#__PURE__*/
_regeneratorRuntime.mark(countServerRequests);

import { call, fork, join, take, race, cancel, put, all, cancelled, getContext, setContext } from 'redux-saga/effects';
import { END } from 'redux-saga';
import { createSuccessAction, createErrorAction, createAbortAction, getActionPayload, getRequestActionFromResponse, isRequestAction, isResponseAction, isSuccessAction } from './actions';
import { REQUESTS_CONFIG, INCORRECT_PAYLOAD_ERROR, RUN_BY_INTERCEPTOR, INTERCEPTORS } from './constants';
/* eslint-disable */

var delay = require('redux-saga').delay || require('@redux-saga/delay-p').default;
/* eslint-enable */


export var voidCallback = function voidCallback() {};
export var defaultConfig = {
  driver: null,
  onRequest: null,
  onSuccess: null,
  onError: null,
  onAbort: null
};
export function createRequestInstance(config) {
  var _setContext;

  return setContext((_setContext = {}, _setContext[REQUESTS_CONFIG] = _extends({}, defaultConfig, config), _setContext));
}
export function getRequestsConfig() {
  return getContext(REQUESTS_CONFIG);
}
export function getRequestInstance(driverType) {
  var config, driver;
  return _regeneratorRuntime.wrap(function getRequestInstance$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (driverType === void 0) {
            driverType = null;
          }

          _context.next = 3;
          return getRequestsConfig();

        case 3:
          config = _context.sent;
          driver = driverType ? config.driver[driverType] : config.driver.default || config.driver;
          return _context.abrupt("return", driver.requestInstance);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

var getDriver = function getDriver(requestsConfig, action) {
  return action.meta && action.meta.driver ? requestsConfig.driver[action.meta.driver] : requestsConfig.driver.default || requestsConfig.driver;
};

export function sendRequest(action, _temp) {
  var _ref, _ref$dispatchRequestA, dispatchRequestAction, _ref$silent, silent, _ref$runOnRequest, runOnRequest, _ref$runOnSuccess, runOnSuccess, _ref$runOnError, runOnError, _ref$runOnAbort, runOnAbort, runByInterceptor, requestsConfig, driver, actionPayload, _setContext2, abortSource, response, responseError, _setContext3, _ref2, onErrorResponse, onErrorError, errorPayload, _setContext4, successPayload, _setContext5;

  return _regeneratorRuntime.wrap(function sendRequest$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _ref = _temp === void 0 ? {} : _temp, _ref$dispatchRequestA = _ref.dispatchRequestAction, dispatchRequestAction = _ref$dispatchRequestA === void 0 ? false : _ref$dispatchRequestA, _ref$silent = _ref.silent, silent = _ref$silent === void 0 ? false : _ref$silent, _ref$runOnRequest = _ref.runOnRequest, runOnRequest = _ref$runOnRequest === void 0 ? null : _ref$runOnRequest, _ref$runOnSuccess = _ref.runOnSuccess, runOnSuccess = _ref$runOnSuccess === void 0 ? null : _ref$runOnSuccess, _ref$runOnError = _ref.runOnError, runOnError = _ref$runOnError === void 0 ? null : _ref$runOnError, _ref$runOnAbort = _ref.runOnAbort, runOnAbort = _ref$runOnAbort === void 0 ? null : _ref$runOnAbort;

          if (isRequestAction(action)) {
            _context2.next = 3;
            break;
          }

          throw new Error(INCORRECT_PAYLOAD_ERROR);

        case 3:
          _context2.next = 5;
          return getContext(RUN_BY_INTERCEPTOR);

        case 5:
          runByInterceptor = _context2.sent;
          _context2.next = 8;
          return getRequestsConfig();

        case 8:
          requestsConfig = _context2.sent;

          if (!(dispatchRequestAction && !silent)) {
            _context2.next = 16;
            break;
          }

          action = _extends({}, action, {
            meta: _extends({}, action.meta, {
              runByWatcher: false
            })
          });
          _context2.next = 13;
          return put(action);

        case 13:
          action = _context2.sent;

          if (!(action === null)) {
            _context2.next = 16;
            break;
          }

          return _context2.abrupt("return", {
            serverSide: true
          });

        case 16:
          _context2.next = 18;
          return call(getDriver, requestsConfig, action);

        case 18:
          driver = _context2.sent;
          actionPayload = getActionPayload(action);

          if (!(requestsConfig.onRequest && (runOnRequest !== null ? runOnRequest : runByInterceptor !== INTERCEPTORS.ON_REQUEST))) {
            _context2.next = 26;
            break;
          }

          _context2.next = 23;
          return setContext((_setContext2 = {}, _setContext2[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_REQUEST, _setContext2));

        case 23:
          _context2.next = 25;
          return call(requestsConfig.onRequest, actionPayload.request, action);

        case 25:
          actionPayload.request = _context2.sent;

        case 26:
          abortSource = driver.getAbortSource();
          _context2.prev = 27;
          _context2.prev = 28;

          if (!(action.meta && action.meta.cacheResponse)) {
            _context2.next = 33;
            break;
          }

          response = action.meta.cacheResponse;
          _context2.next = 42;
          break;

        case 33:
          if (Array.isArray(actionPayload.request)) {
            _context2.next = 39;
            break;
          }

          _context2.next = 36;
          return call([driver, 'sendRequest'], actionPayload.request, abortSource, action);

        case 36:
          response = _context2.sent;
          _context2.next = 42;
          break;

        case 39:
          _context2.next = 41;
          return all(actionPayload.request.map(function (requestItem) {
            return call([driver, 'sendRequest'], requestItem, abortSource, action);
          }));

        case 41:
          response = _context2.sent;

        case 42:
          _context2.next = 47;
          break;

        case 44:
          _context2.prev = 44;
          _context2.t0 = _context2["catch"](28);
          responseError = _context2.t0;

        case 47:
          if (!responseError) {
            _context2.next = 65;
            break;
          }

          if (!(requestsConfig.onError && (runOnError !== null ? runOnError : runByInterceptor !== INTERCEPTORS.ON_ERROR))) {
            _context2.next = 57;
            break;
          }

          _context2.next = 51;
          return setContext((_setContext3 = {}, _setContext3[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_ERROR, _setContext3));

        case 51:
          _context2.next = 53;
          return call(requestsConfig.onError, responseError, action);

        case 53:
          _ref2 = _context2.sent;
          onErrorResponse = _ref2.response;
          onErrorError = _ref2.error;

          if (onErrorResponse) {
            response = onErrorResponse;
          } else {
            responseError = onErrorError;
          }

        case 57:
          if (response) {
            _context2.next = 65;
            break;
          }

          _context2.next = 60;
          return call(driver.getErrorPayload, responseError);

        case 60:
          errorPayload = _context2.sent;

          if (silent) {
            _context2.next = 64;
            break;
          }

          _context2.next = 64;
          return put(createErrorAction(action, errorPayload));

        case 64:
          return _context2.abrupt("return", {
            error: responseError
          });

        case 65:
          if (!(requestsConfig.onSuccess && (runOnSuccess !== null ? runOnSuccess : runByInterceptor !== INTERCEPTORS.ON_SUCCESS && runByInterceptor !== INTERCEPTORS.ON_ERROR))) {
            _context2.next = 71;
            break;
          }

          _context2.next = 68;
          return setContext((_setContext4 = {}, _setContext4[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_SUCCESS, _setContext4));

        case 68:
          _context2.next = 70;
          return call(requestsConfig.onSuccess, response, action);

        case 70:
          response = _context2.sent;

        case 71:
          _context2.next = 73;
          return call(driver.getSuccessPayload, response, actionPayload.request);

        case 73:
          successPayload = _context2.sent;

          if (silent) {
            _context2.next = 77;
            break;
          }

          _context2.next = 77;
          return put(createSuccessAction(action, successPayload, response));

        case 77:
          return _context2.abrupt("return", {
            response: response
          });

        case 78:
          _context2.prev = 78;
          _context2.next = 81;
          return cancelled();

        case 81:
          if (!_context2.sent) {
            _context2.next = 92;
            break;
          }

          _context2.next = 84;
          return call([driver, 'abortRequest'], abortSource);

        case 84:
          if (!(requestsConfig.onAbort && (runOnAbort !== null ? runOnAbort : runByInterceptor !== INTERCEPTORS.ON_ABORT))) {
            _context2.next = 89;
            break;
          }

          _context2.next = 87;
          return setContext((_setContext5 = {}, _setContext5[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_ABORT, _setContext5));

        case 87:
          _context2.next = 89;
          return call(requestsConfig.onAbort, action);

        case 89:
          if (silent) {
            _context2.next = 92;
            break;
          }

          _context2.next = 92;
          return put(createAbortAction(action));

        case 92:
          return _context2.finish(78);

        case 93:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this, [[27,, 78, 93], [28, 44]]);
}

var isRequestReadOnly = function isRequestReadOnly(request) {
  return !request.query && (!request.method || request.method.toLowerCase() === 'get') || request.query && !request.query.trim().startsWith('mutation');
};

var watchRequestsDefaultConfig = {
  takeLatest: function takeLatest(action) {
    var _getActionPayload = getActionPayload(action),
        request = _getActionPayload.request;

    return Array.isArray(request) ? request.every(isRequestReadOnly) : isRequestReadOnly(request);
  },
  abortOn: null,
  getLastActionKey: function getLastActionKey(action) {
    return action.type;
  }
};
export function cancelSendRequestOnAction(abortOn, task) {
  var _ref3, abortingAction;

  return _regeneratorRuntime.wrap(function cancelSendRequestOnAction$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return race({
            abortingAction: take(abortOn),
            taskFinished: join(task),
            timeout: call(delay, 10000) // taskFinished doesnt work for aborted tasks

          });

        case 2:
          _ref3 = _context3.sent;
          abortingAction = _ref3.abortingAction;

          if (!abortingAction) {
            _context3.next = 7;
            break;
          }

          _context3.next = 7;
          return cancel(task);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, this);
}

var isWatchable = function isWatchable(a) {
  return isRequestAction(a) && (!a.meta || a.meta.runByWatcher !== false);
};

export function watchRequests(commonConfig) {
  var lastTasks, config, action, lastActionKey, takeLatest, activeTask, newTask, abortOn;
  return _regeneratorRuntime.wrap(function watchRequests$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (commonConfig === void 0) {
            commonConfig = {};
          }

          lastTasks = {};
          config = _extends({}, watchRequestsDefaultConfig, commonConfig);

        case 3:
          if (!true) {
            _context4.next = 24;
            break;
          }

          _context4.next = 6;
          return take(isWatchable);

        case 6:
          action = _context4.sent;
          lastActionKey = config.getLastActionKey(action);
          takeLatest = action.meta && action.meta.takeLatest !== undefined ? action.meta.takeLatest : typeof config.takeLatest === 'function' ? config.takeLatest(action) : config.takeLatest;

          if (!takeLatest) {
            _context4.next = 14;
            break;
          }

          activeTask = lastTasks[lastActionKey];

          if (!activeTask) {
            _context4.next = 14;
            break;
          }

          _context4.next = 14;
          return cancel(activeTask);

        case 14:
          _context4.next = 16;
          return fork(sendRequest, action);

        case 16:
          newTask = _context4.sent;

          if (takeLatest) {
            lastTasks[lastActionKey] = newTask;
          }

          abortOn = action.meta && action.meta.abortOn ? action.meta.abortOn : config.abortOn;

          if (!abortOn) {
            _context4.next = 22;
            break;
          }

          _context4.next = 22;
          return fork(cancelSendRequestOnAction, abortOn, newTask);

        case 22:
          _context4.next = 3;
          break;

        case 24:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4, this);
}
export function countServerRequests(_ref4) {
  var serverRequestActions, _ref4$finishOnFirstEr, finishOnFirstError, index, action;

  return _regeneratorRuntime.wrap(function countServerRequests$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          serverRequestActions = _ref4.serverRequestActions, _ref4$finishOnFirstEr = _ref4.finishOnFirstError, finishOnFirstError = _ref4$finishOnFirstEr === void 0 ? true : _ref4$finishOnFirstEr;
          index = 0;
          serverRequestActions.requestActionsToIgnore = [];
          serverRequestActions.successActions = [];
          serverRequestActions.dependentSuccessActions = [];
          serverRequestActions.errorActions = [];

        case 6:
          if (!true) {
            _context5.next = 30;
            break;
          }

          _context5.next = 9;
          return take(function (a) {
            return isRequestAction(a) || isResponseAction(a);
          });

        case 9:
          action = _context5.sent;

          if (!isRequestAction(action)) {
            _context5.next = 13;
            break;
          }

          index += action.meta && action.meta.dependentRequestsNumber !== undefined ? action.meta.dependentRequestsNumber + 1 : 1;
          return _context5.abrupt("continue", 6);

        case 13:
          if (isSuccessAction(action)) {
            _context5.next = 21;
            break;
          }

          serverRequestActions.errorActions.push(action);

          if (!finishOnFirstError) {
            _context5.next = 19;
            break;
          }

          _context5.next = 18;
          return put(END);

        case 18:
          return _context5.abrupt("return");

        case 19:
          _context5.next = 22;
          break;

        case 21:
          if (action.meta.isDependentRequest) {
            serverRequestActions.dependentSuccessActions.push(action);
          } else {
            serverRequestActions.successActions.push(action);
          }

        case 22:
          index -= action.meta.isDependentRequest ? 2 : 1;

          if (!(index === 0)) {
            _context5.next = 28;
            break;
          }

          serverRequestActions.requestActionsToIgnore = serverRequestActions.successActions.map(getRequestActionFromResponse).map(function (a) {
            return {
              type: a.type
            };
          });
          _context5.next = 27;
          return put(END);

        case 27:
          return _context5.abrupt("return");

        case 28:
          _context5.next = 6;
          break;

        case 30:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5, this);
}