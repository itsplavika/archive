import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import isAbsoluteUrl from 'axios/lib/helpers/isAbsoluteURL';
var responseTypes = ['arraybuffer', 'blob', 'formData', 'json', 'text', null];

var getResponseData = function getResponseData(response, responseType) {
  if (responseTypes.indexOf(responseType) === -1) {
    throw new Error("responseType must be one of the following: 'arraybuffer', 'blob', 'formData', 'json', 'text', null");
  }

  if (responseType === null) {
    return Promise.resolve(null);
  }

  return response[responseType]();
};

var prepareSuccessPayload = function prepareSuccessPayload(response) {
  return response.data;
};

var DummyAbortController =
/*#__PURE__*/
function () {
  function DummyAbortController() {}

  var _proto = DummyAbortController.prototype;

  /* eslint-disable-next-line class-methods-use-this */
  _proto.abort = function abort() {};

  return DummyAbortController;
}();

export var createDriver = function createDriver(fetchInstance, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$baseURL = _ref.baseURL,
      baseURL = _ref$baseURL === void 0 ? '' : _ref$baseURL,
      _ref$AbortController = _ref.AbortController,
      AbortController = _ref$AbortController === void 0 ? DummyAbortController : _ref$AbortController;

  return {
    requestInstance: fetchInstance,
    getAbortSource: function getAbortSource() {
      return new AbortController();
    },
    abortRequest: function abortRequest(abortSource) {
      abortSource.abort();
    },
    sendRequest: function () {
      var _sendRequest = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee(_ref2, abortSource) {
        var url, _ref2$responseType, responseType, requestConfig, response;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = _ref2.url, _ref2$responseType = _ref2.responseType, responseType = _ref2$responseType === void 0 ? 'json' : _ref2$responseType, requestConfig = _objectWithoutPropertiesLoose(_ref2, ["url", "responseType"]);
                _context.next = 3;
                return fetchInstance(isAbsoluteUrl(url) ? url : baseURL + url, _extends({
                  signal: abortSource.signal
                }, requestConfig));

              case 3:
                response = _context.sent;

                if (response.ok) {
                  _context.next = 14;
                  break;
                }

                _context.prev = 5;
                _context.next = 8;
                return response.json();

              case 8:
                response.data = _context.sent;
                _context.next = 13;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](5);

              case 13:
                throw response;

              case 14:
                _context.next = 16;
                return getResponseData(response, responseType);

              case 16:
                response.data = _context.sent;
                return _context.abrupt("return", response);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[5, 11]]);
      }));

      return function sendRequest(_x, _x2) {
        return _sendRequest.apply(this, arguments);
      };
    }(),
    getSuccessPayload: function getSuccessPayload(response) {
      if (Array.isArray(response)) {
        return response.map(prepareSuccessPayload);
      }

      return prepareSuccessPayload(response);
    },
    getErrorPayload: function getErrorPayload(error) {
      return error;
    }
  };
};