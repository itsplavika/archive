{"ast":null,"code":"import produce from 'immer';\nimport { combineReducers } from 'redux';\nimport actionTypes from '../actions/types';\nimport workflow, { selectors as fromWorkflow } from './workflow';\nimport equipmentLocations, { selectors as fromEquipmentLocations } from './equipmentLocations';\nimport assets, { selectors as fromAssets } from './assets';\nimport { genSelectors } from './util';\nimport workrequest from './workrequest';\nimport workRequestV2, { selectors as fromWorkRequestV2 } from './workRequestV2';\nimport context from './context';\nimport workOrder, { selectors as fromWorkOrder } from './workOrder';\nconst emptySet = [];\nconst combinedReducers = combineReducers({\n  // session,\n  workflow,\n  assets,\n  equipmentLocations,\n  context,\n  workrequest,\n  workRequestV2,\n  workOrder // user,\n\n});\n\nconst rootReducer = (state, action) => {\n  const newState = combinedReducers(state, action);\n  const {\n    type\n  } = action;\n  return produce(newState, draft => {\n    switch (type) {\n      //TODO\n      case actionTypes.CLEAR_STORE:\n        Object.keys(draft).forEach(key => {\n          // delete everthing except for auth\n          if (key !== 'auth') {\n            delete draft[key];\n          }\n        });\n        break;\n      //TODO\n\n      case actionTypes.APP_DELETE_DATA_STATE:\n        delete draft.data;\n        break;\n\n      default:\n    }\n  });\n};\n\nexport default rootReducer;\nexport const selectors = {};\nconst subSelectors = {\n  // resources: fromResources,\n  workflow: fromWorkflow,\n  assets: fromAssets,\n  equipmentLocations: fromEquipmentLocations,\n  workOrder: fromWorkOrder,\n  workRequestV2: fromWorkRequestV2\n};\ngenSelectors(selectors, subSelectors);\n\nselectors.workflows = state => {\n  //mock imp\n  return emptySet;\n}; //currently this is returning mock preference\n\n\nconst MOCK_PREFERENCE = {\n  dateFormat: 'DD/MM/YYYY',\n  timeFormat: 'HH:mm:ss'\n};\n\nselectors.userPreferences = state => {\n  return MOCK_PREFERENCE;\n};\n\nselectors.userToken = state => {\n  return state.context.accessToken;\n};\n\nselectors.workRequestStatusName = (state, groupBy) => {};","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/reducers/index.js"],"names":["produce","combineReducers","actionTypes","workflow","selectors","fromWorkflow","equipmentLocations","fromEquipmentLocations","assets","fromAssets","genSelectors","workrequest","workRequestV2","fromWorkRequestV2","context","workOrder","fromWorkOrder","emptySet","combinedReducers","rootReducer","state","action","newState","type","draft","CLEAR_STORE","Object","keys","forEach","key","APP_DELETE_DATA_STATE","data","subSelectors","workflows","MOCK_PREFERENCE","dateFormat","timeFormat","userPreferences","userToken","accessToken","workRequestStatusName","groupBy"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,IAAmBC,SAAS,IAAIC,YAAhC,QAAoD,YAApD;AACA,OAAOC,kBAAP,IAA6BF,SAAS,IAAIG,sBAA1C,QAAwE,sBAAxE;AACA,OAAOC,MAAP,IAAiBJ,SAAS,IAAIK,UAA9B,QAAgD,UAAhD;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,IAAuBR,SAAS,IAAIS,iBAApC,QAA4D,iBAA5D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,IAAoBX,SAAS,IAAIY,aAAjC,QAAsD,aAAtD;AAEA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,gBAAgB,GAAGjB,eAAe,CAAC;AACvC;AACAE,EAAAA,QAFuC;AAGvCK,EAAAA,MAHuC;AAIvCF,EAAAA,kBAJuC;AAKvCQ,EAAAA,OALuC;AAMvCH,EAAAA,WANuC;AAOvCC,EAAAA,aAPuC;AAQvCG,EAAAA,SARuC,CASvC;;AATuC,CAAD,CAAxC;;AAYA,MAAMI,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAMC,QAAQ,GAAGJ,gBAAgB,CAACE,KAAD,EAAQC,MAAR,CAAjC;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAWF,MAAjB;AAEA,SAAOrB,OAAO,CAACsB,QAAD,EAAWE,KAAK,IAAI;AAChC,YAAQD,IAAR;AACE;AACA,WAAKrB,WAAW,CAACuB,WAAjB;AACEC,QAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2BC,GAAG,IAAI;AAChC;AACA,cAAIA,GAAG,KAAK,MAAZ,EAAoB;AAClB,mBAAOL,KAAK,CAACK,GAAD,CAAZ;AACD;AACF,SALD;AAOA;AAEF;;AACA,WAAK3B,WAAW,CAAC4B,qBAAjB;AACE,eAAON,KAAK,CAACO,IAAb;AAEA;;AAEF;AAlBF;AAoBD,GArBa,CAAd;AAsBD,CA3BD;;AA6BA,eAAeZ,WAAf;AAEA,OAAO,MAAMf,SAAS,GAAG,EAAlB;AACP,MAAM4B,YAAY,GAAG;AACnB;AACA7B,EAAAA,QAAQ,EAAEE,YAFS;AAGnBG,EAAAA,MAAM,EAAEC,UAHW;AAInBH,EAAAA,kBAAkB,EAAEC,sBAJD;AAKnBQ,EAAAA,SAAS,EAAEC,aALQ;AAMnBJ,EAAAA,aAAa,EAAEC;AANI,CAArB;AASAH,YAAY,CAACN,SAAD,EAAY4B,YAAZ,CAAZ;;AAGA5B,SAAS,CAAC6B,SAAV,GAAuBb,KAAD,IAAW;AAC/B;AACA,SAAOH,QAAP;AACD,CAHD,C,CAKA;;;AACA,MAAMiB,eAAe,GAAG;AACtBC,EAAAA,UAAU,EAAE,YADU;AAEtBC,EAAAA,UAAU,EAAE;AAFU,CAAxB;;AAIAhC,SAAS,CAACiC,eAAV,GAA6BjB,KAAD,IAAW;AACrC,SAAOc,eAAP;AACD,CAFD;;AAIA9B,SAAS,CAACkC,SAAV,GAAuBlB,KAAD,IAAW;AAC/B,SAAOA,KAAK,CAACN,OAAN,CAAcyB,WAArB;AACD,CAFD;;AAIAnC,SAAS,CAACoC,qBAAV,GAAkC,CAACpB,KAAD,EAAQqB,OAAR,KAAoB,CAErD,CAFD","sourcesContent":["import produce from 'immer';\nimport { combineReducers } from 'redux';\nimport actionTypes from '../actions/types';\nimport workflow, { selectors as fromWorkflow } from './workflow';\nimport equipmentLocations, { selectors as fromEquipmentLocations } from './equipmentLocations';\nimport assets, { selectors as fromAssets } from './assets';\nimport { genSelectors } from './util';\nimport workrequest from './workrequest';\nimport workRequestV2, {selectors as fromWorkRequestV2} from './workRequestV2';\nimport context from './context';\nimport workOrder, { selectors as fromWorkOrder } from './workOrder';\n\nconst emptySet = [];\nconst combinedReducers = combineReducers({\n  // session,\n  workflow,\n  assets,\n  equipmentLocations,\n  context,\n  workrequest,\n  workRequestV2,\n  workOrder,\n  // user,\n});\n\nconst rootReducer = (state, action) => {\n  const newState = combinedReducers(state, action);\n\n  const { type } = action;\n\n  return produce(newState, draft => {\n    switch (type) {\n      //TODO\n      case actionTypes.CLEAR_STORE:\n        Object.keys(draft).forEach(key => {\n          // delete everthing except for auth\n          if (key !== 'auth') {\n            delete draft[key];\n          }\n        });\n\n        break;\n\n      //TODO\n      case actionTypes.APP_DELETE_DATA_STATE:\n        delete draft.data;\n\n        break;\n\n      default:\n    }\n  });\n};\n\nexport default rootReducer;\n\nexport const selectors = {};\nconst subSelectors = {\n  // resources: fromResources,\n  workflow: fromWorkflow,\n  assets: fromAssets,\n  equipmentLocations: fromEquipmentLocations,\n  workOrder: fromWorkOrder,\n  workRequestV2: fromWorkRequestV2,\n};\n\ngenSelectors(selectors, subSelectors);\n\n\nselectors.workflows = (state) => {\n  //mock imp\n  return emptySet;\n}\n\n//currently this is returning mock preference\nconst MOCK_PREFERENCE = {\n  dateFormat: 'DD/MM/YYYY',\n  timeFormat: 'HH:mm:ss'\n}\nselectors.userPreferences = (state) => {\n  return MOCK_PREFERENCE;\n}\n\nselectors.userToken = (state) => {\n  return state.context.accessToken\n}\n\nselectors.workRequestStatusName = (state, groupBy) => {\n\n}\n\n"]},"metadata":{},"sourceType":"module"}