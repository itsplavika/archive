{"ast":null,"code":"export function* onRequestSaga(request) {\n  const {\n    path,\n    opts = {},\n    hidden = false,\n    refresh = false\n  } = request.args;\n  const method = opts && opts.method || 'GET';\n  const options = { ...opts\n  };\n  const additionalHeaders = {};\n  const url = path;\n  options.headers = { ...options.headers,\n    ...additionalHeaders\n  }; // all request bodies we stringify\n\n  if (options && options.body) {\n    options.body = JSON.stringify(options.body);\n  }\n\n  const requestPayload = yield {\n    url,\n    method,\n    ...options,\n    meta: {\n      path,\n      method,\n      origReq: request\n    },\n    responseType: 'text'\n  };\n  return requestPayload;\n}\nexport function* onSuccessSaga(response, action) {\n  // check for session to be aborted and perform ops.\n  return response;\n}\nexport function* onErrorSaga(error, action) {\n  const {\n    path,\n    method,\n    origReq\n  } = action.request.meta;\n\n  if (error.status >= 400 && error.status < 500) {\n    //perform clean up\n    return {\n      error\n    };\n  } //have a delay and retry logic\n\n\n  return {\n    error\n  };\n}\nexport function* onAbortSaga(action) {//dispatch api complete action\n}","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/api/requestInterceptors.js"],"names":["onRequestSaga","request","path","opts","hidden","refresh","args","method","options","additionalHeaders","url","headers","body","JSON","stringify","requestPayload","meta","origReq","responseType","onSuccessSaga","response","action","onErrorSaga","error","status","onAbortSaga"],"mappings":"AAAA,OAAO,UAAUA,aAAV,CAAwBC,OAAxB,EAAiC;AACtC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAI,GAAG,EAAf;AAAmBC,IAAAA,MAAM,GAAG,KAA5B;AAAmCC,IAAAA,OAAO,GAAG;AAA7C,MAAuDJ,OAAO,CAACK,IAArE;AACA,QAAMC,MAAM,GAAIJ,IAAI,IAAIA,IAAI,CAACI,MAAd,IAAyB,KAAxC;AAEA,QAAMC,OAAO,GAAG,EAAE,GAAGL;AAAL,GAAhB;AACA,QAAMM,iBAAiB,GAAG,EAA1B;AACA,QAAMC,GAAG,GAAGR,IAAZ;AACAM,EAAAA,OAAO,CAACG,OAAR,GAAkB,EAAE,GAAGH,OAAO,CAACG,OAAb;AAAsB,OAAGF;AAAzB,GAAlB,CAPsC,CAStC;;AACA,MAAID,OAAO,IAAIA,OAAO,CAACI,IAAvB,EAA6B;AAC3BJ,IAAAA,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACI,IAAvB,CAAf;AACD;;AAED,QAAMG,cAAc,GAAG,MAAM;AAC3BL,IAAAA,GAD2B;AAE3BH,IAAAA,MAF2B;AAG3B,OAAGC,OAHwB;AAI3BQ,IAAAA,IAAI,EAAE;AACJd,MAAAA,IADI;AAEJK,MAAAA,MAFI;AAGJU,MAAAA,OAAO,EAAEhB;AAHL,KAJqB;AAS3BiB,IAAAA,YAAY,EAAE;AATa,GAA7B;AAYA,SAAOH,cAAP;AACD;AAED,OAAO,UAAUI,aAAV,CAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AAC/C;AACA,SAAOD,QAAP;AACD;AAED,OAAO,UAAUE,WAAV,CAAsBC,KAAtB,EAA6BF,MAA7B,EAAqC;AAC1C,QAAM;AAAEnB,IAAAA,IAAF;AAAQK,IAAAA,MAAR;AAAgBU,IAAAA;AAAhB,MAA4BI,MAAM,CAACpB,OAAP,CAAee,IAAjD;;AAEA,MAAIO,KAAK,CAACC,MAAN,IAAgB,GAAhB,IAAuBD,KAAK,CAACC,MAAN,GAAe,GAA1C,EAA+C;AAC7C;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD,GANyC,CAQ1C;;;AAEA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD;AAED,OAAO,UAAUE,WAAV,CAAsBJ,MAAtB,EAA8B,CACnC;AACD","sourcesContent":["export function* onRequestSaga(request) {\n  const { path, opts = {}, hidden = false, refresh = false } = request.args;\n  const method = (opts && opts.method) || 'GET';\n\n  const options = { ...opts };\n  const additionalHeaders = {};\n  const url = path;\n  options.headers = { ...options.headers, ...additionalHeaders };\n\n  // all request bodies we stringify\n  if (options && options.body) {\n    options.body = JSON.stringify(options.body);\n  }\n\n  const requestPayload = yield {\n    url,\n    method,\n    ...options,\n    meta: {\n      path,\n      method,\n      origReq: request,\n    },\n    responseType: 'text',\n  };\n\n  return requestPayload;\n}\n\nexport function* onSuccessSaga(response, action) {\n  // check for session to be aborted and perform ops.\n  return response;\n}\n\nexport function* onErrorSaga(error, action) {\n  const { path, method, origReq } = action.request.meta;\n\n  if (error.status >= 400 && error.status < 500) {\n    //perform clean up\n    return { error };\n  }\n\n  //have a delay and retry logic\n\n  return { error };\n}\n\nexport function* onAbortSaga(action) {\n  //dispatch api complete action\n}"]},"metadata":{},"sourceType":"module"}