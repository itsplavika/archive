{"ast":null,"code":"var _jsxFileName = \"/Users/plsingh/Downloads/archive-19Sep-Sunday/src/pages/WorkRequest/List/View/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from \"@material-ui/styles\";\nimport { useCallback } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport actions from \"../../../../actions\";\nimport { selectors } from \"../../../../reducers\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    overflowY: 'scroll'\n  }\n}));\nconst emptySet = [];\nexport default function WorkRequestListing({\n  canManage = false\n}) {\n  _s();\n\n  const match = useRouteMatch();\n  const classes = useStyles();\n  const location = useLocation();\n  const history = useHistory();\n  const {\n    groupBy,\n    status: subGroup\n  } = match.params;\n  const dispatch = useDispatch();\n  const workRequestList = useSelector(state => {\n    var _selectors$workReques;\n\n    return ((_selectors$workReques = selectors.workRequestListObj(state, groupBy)) === null || _selectors$workReques === void 0 ? void 0 : _selectors$workReques.list) || emptySet;\n  }); // const workRequestList =emptySet;\n  // const status = useSelector(state => selectors.workRequestActiveTab(state, groupBy));\n\n  const status = '';\n  const totalCount = useSelector(state => {\n    if (groupBy === 'Status' && subGroup !== undefined) {\n      return selectors.wRDashboardStatusCountByTaskStatus(state, subGroup);\n    }\n\n    return selectors.workRequestStatusCount(state, groupBy, status);\n  });\n  const handleFetchMore = useCallback(() => {\n    dispatch(actions.workRequestV2.list.requestNextPage(groupBy, status));\n  }, [dispatch, groupBy, status]);\n  const handleRefresh = useCallback(() => {\n    dispatch(actions.workRequestV2.list.refresh(groupBy));\n  }, [dispatch, groupBy]);\n\n  const handleClick = wrNo => {\n    history.push(`${location.pathname}/${wrNo}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    id: \"wrkreqlistcontainer\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      id: \"infinite-scroll-component\",\n      dataLength: workRequestList.length,\n      next: handleFetchMore,\n      hasMore: workRequestList.length < totalCount,\n      scrollableTarget: \"wrkreqlistcontainer\",\n      refreshFunction: handleRefresh,\n      pullDownToRefresh: true,\n      pullDownToRefreshThreshold: 100,\n      pullDownToRefreshContent: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: \"#1d95e7\",\n          textAlign: 'center'\n        },\n        children: \"\\u2193 Pull down to refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this),\n      releaseToRefreshContent: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: \"#1d95e7\",\n          textAlign: 'center'\n        },\n        children: \"\\u2191 Release to refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this),\n      children: workRequestList === null || workRequestList === void 0 ? void 0 : workRequestList.map((req, index) => /*#__PURE__*/_jsxDEV(Row, {\n        isSelectable: canManage,\n        value: req,\n        onClick: handleClick,\n        groupBy: groupBy\n      }, `${req.workrequestNoout}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkRequestListing, \"lMu7RrCbCaA+VqretDyuLImyCfo=\", false, function () {\n  return [useRouteMatch, useStyles, useLocation, useHistory, useDispatch, useSelector, useSelector];\n});\n\n_c = WorkRequestListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkRequestListing\");","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/pages/WorkRequest/List/View/index.jsx"],"names":["makeStyles","useCallback","InfiniteScroll","useDispatch","useSelector","useRouteMatch","useHistory","useLocation","actions","selectors","Row","useStyles","theme","wrapper","overflowY","emptySet","WorkRequestListing","canManage","match","classes","location","history","groupBy","status","subGroup","params","dispatch","workRequestList","state","workRequestListObj","list","totalCount","undefined","wRDashboardStatusCountByTaskStatus","workRequestStatusCount","handleFetchMore","workRequestV2","requestNextPage","handleRefresh","refresh","handleClick","wrNo","push","pathname","length","color","textAlign","map","req","index","workrequestNoout"],"mappings":"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","sourcesContent":["import { makeStyles } from \"@material-ui/styles\";\nimport { useCallback } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport actions from \"../../../../actions\";\nimport { selectors } from \"../../../../reducers\";\nimport Row from \"./Row\";\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    overflowY: 'scroll',\n  },\n}))\nconst emptySet = [];\n\nexport default function WorkRequestListing({ canManage = false }) {\n  const match = useRouteMatch();\n  const classes = useStyles();\n  const location = useLocation();\n  const history = useHistory();\n  const { groupBy, status: subGroup } = match.params;\n  const dispatch = useDispatch();\n  const workRequestList = useSelector(state => selectors.workRequestListObj(state, groupBy)?.list || emptySet);\n  // const workRequestList =emptySet;\n  // const status = useSelector(state => selectors.workRequestActiveTab(state, groupBy));\n  const status = '';\n  const totalCount = useSelector(state => {\n    if(groupBy === 'Status' && subGroup !== undefined){\n      return selectors.wRDashboardStatusCountByTaskStatus(state, subGroup);\n    }\n    return selectors.workRequestStatusCount(state, groupBy, status);\n  });\n  const handleFetchMore = useCallback(() => {\n    dispatch(actions.workRequestV2.list.requestNextPage(groupBy, status))\n  }, [dispatch, groupBy, status])\n\n  const handleRefresh = useCallback(() => {\n    dispatch(actions.workRequestV2.list.refresh(groupBy))\n  }, [dispatch, groupBy])\n  const handleClick = (wrNo) => {\n    history.push(`${location.pathname}/${wrNo}`)\n  }\n\n  return (\n    <div className={classes.wrapper}\n      id=\"wrkreqlistcontainer\">\n      <InfiniteScroll\n        id=\"infinite-scroll-component\"\n        dataLength={workRequestList.length}\n        next={handleFetchMore}\n        hasMore={workRequestList.length < totalCount}\n        scrollableTarget=\"wrkreqlistcontainer\"\n        refreshFunction={handleRefresh}\n        pullDownToRefresh\n        pullDownToRefreshThreshold={100}\n        pullDownToRefreshContent={\n          <h3 style={{ color: \"#1d95e7\", textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n        }\n        releaseToRefreshContent={\n          <h3 style={{ color: \"#1d95e7\", textAlign: 'center' }}>&#8593; Release to refresh</h3>\n        }\n      >\n        {workRequestList?.map((req, index) => (\n          <Row\n            key={`${req.workrequestNoout}-${index}`}\n            isSelectable={canManage}\n            value={req}\n            onClick={handleClick}\n            groupBy={groupBy}\n          />\n        ))}\n      </InfiniteScroll>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}