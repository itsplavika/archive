{"ast":null,"code":"import produce from 'immer';\nimport actionTypes from '../../actions/types';\nimport { deepClone } from 'fast-json-patch';\n\nconst reducer = (state = {}, action) => {\n  const {\n    type,\n    value,\n    defaultValues,\n    filesMainRef,\n    fieldId,\n    file,\n    filesIndividualRef,\n    name,\n    relativePath,\n    errMsg,\n    workrequestNo\n  } = action;\n  return produce(state, draft => {\n    var _draft$workflow, _draft$workflow$value, _draft$workflow$value2;\n\n    switch (type) {\n      case actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n\n        draft.workflowItems.status = 'requested';\n        break;\n\n      case actionTypes.WORKFLOW.COMBO_ITEMS.RECEIVED:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n\n        if (!draft.defaultValues) {\n          draft.defaultValues = {};\n        }\n\n        draft.workflowItems.status = 'success';\n        Object.assign(draft.workflowItems, value);\n        Object.assign(draft.defaultValues, defaultValues);\n        break;\n\n      case actionTypes.WORKFLOW.COMBO_ITEMS.FAILED:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n\n        draft.workflowItems.status = 'failed';\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.INIT_SUCCESS:\n        if (!draft.workflow) {\n          draft.workflow = {};\n        }\n\n        draft.workflow.value = value;\n        draft.workflow.initValue = deepClone(value);\n        draft.workflow.status = 'success';\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.PATCH_FIELD:\n        if (draft.workflow) {\n          draft.workflow.value[fieldId] = value;\n        }\n\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.SAVE:\n        draft.workflow.saveStatus = 'saving';\n        delete draft.workflow.saveErrorMsg;\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.SAVE_SUCCESS:\n        draft.workflow.saveStatus = 'completed';\n        draft.workflow.workrequestNo = workrequestNo;\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.SAVE_FAILED:\n        draft.workflow.saveStatus = 'failed';\n        draft.workflow.saveErrorMsg = errMsg;\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.CLEAR_MSG:\n        delete draft.workflow.saveErrorMsg;\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.CLEAN:\n        delete draft.workflow;\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT_SUCCESS:\n        if (draft.workflow) {\n          const item = draft.workflow.value.fileList.find(i => i.uiName === name);\n\n          if (item) {\n            item.filesIndividualRef = filesIndividualRef;\n            item.relativePath = relativePath;\n            item.name = name;\n            item.status = 'UPLOADED';\n            item.filesMainRef = filesMainRef;\n          } // draft.workflow.value.fileList.push({fileId, name})\n\n        }\n\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.REMOVE_ATTACHMENT:\n        if (draft.workOrder) {\n          const item = draft.workflow.value.fileList.find(i => i.filesIndividualRef === filesIndividualRef);\n\n          if (item) {\n            item.status = 'DELETED';\n          } // draft.workOrder.value.fileList.push({fileId, name})\n\n        }\n\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT:\n        if (draft.workflow) {\n          if (!draft.workflow.value.fileList) {\n            draft.workflow.value.fileList = [];\n          }\n\n          draft.workflow.value.fileList.push({\n            uiName: file.name,\n            type: file.type,\n            status: 'UPLOADING'\n          });\n        }\n\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT_FAILED:\n        if (draft === null || draft === void 0 ? void 0 : (_draft$workflow = draft.workflow) === null || _draft$workflow === void 0 ? void 0 : (_draft$workflow$value = _draft$workflow.value) === null || _draft$workflow$value === void 0 ? void 0 : (_draft$workflow$value2 = _draft$workflow$value.fileList) === null || _draft$workflow$value2 === void 0 ? void 0 : _draft$workflow$value2.length) {\n          const clonedFileSet = deepClone(draft.workflow.value.fileList);\n          const newFileList = clonedFileSet.filter(i => i.uiName !== name);\n          draft.workflow.value.fileList = newFileList;\n          draft.workflow.value.fileListError = \"Failed to Upload\";\n        }\n\n        break;\n\n      default:\n    }\n  });\n};\n\nexport default reducer;\nconst emptyObj = {};\nexport const selectors = {};\n\nselectors.workflow = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workflow || emptyObj;\n};\n\nselectors.workflowItems = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workflowItems || emptyObj;\n};\n\nselectors.workflowDefaultValues = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.defaultValues || emptyObj;\n};","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/reducers/workflow/index.js"],"names":["produce","actionTypes","deepClone","reducer","state","action","type","value","defaultValues","filesMainRef","fieldId","file","filesIndividualRef","name","relativePath","errMsg","workrequestNo","draft","WORKFLOW","COMBO_ITEMS","REQUEST","workflowItems","status","RECEIVED","Object","assign","FAILED","UPDATE","INIT_SUCCESS","workflow","initValue","PATCH_FIELD","SAVE","saveStatus","saveErrorMsg","SAVE_SUCCESS","SAVE_FAILED","CLEAR_MSG","CLEAN","ADD_ATTACHMENT_SUCCESS","item","fileList","find","i","uiName","REMOVE_ATTACHMENT","workOrder","ADD_ATTACHMENT","push","ADD_ATTACHMENT_FAILED","length","clonedFileSet","newFileList","filter","fileListError","emptyObj","selectors","workflowDefaultValues"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport actionTypes from '../../actions/types'\nimport { deepClone } from 'fast-json-patch';\n\nconst reducer = (state = {}, action) => {\n  const { type, value, defaultValues, filesMainRef, fieldId, file, filesIndividualRef, name, relativePath, errMsg, workrequestNo } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n        draft.workflowItems.status = 'requested';\n        break;\n      case actionTypes.WORKFLOW.COMBO_ITEMS.RECEIVED:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n        if (!draft.defaultValues) {\n          draft.defaultValues = {};\n        }\n        draft.workflowItems.status = 'success';\n        Object.assign(draft.workflowItems, value)\n        Object.assign(draft.defaultValues, defaultValues)\n        break;\n      case actionTypes.WORKFLOW.COMBO_ITEMS.FAILED:\n        if (!draft.workflowItems) {\n          draft.workflowItems = {};\n        }\n        draft.workflowItems.status = 'failed';\n\n        break;\n\n      case actionTypes.WORKFLOW.UPDATE.INIT_SUCCESS:\n        if (!draft.workflow) {\n          draft.workflow = {};\n        }\n        draft.workflow.value = value;\n        draft.workflow.initValue = deepClone(value);\n        draft.workflow.status = 'success';\n        break;\n      case actionTypes.WORKFLOW.UPDATE.PATCH_FIELD:\n        if (draft.workflow) {\n          draft.workflow.value[fieldId] = value;\n        }\n        break;\n      case actionTypes.WORKFLOW.UPDATE.SAVE:\n        draft.workflow.saveStatus = 'saving';\n        delete draft.workflow.saveErrorMsg;\n        break;\n      case actionTypes.WORKFLOW.UPDATE.SAVE_SUCCESS:\n        draft.workflow.saveStatus = 'completed';\n        draft.workflow.workrequestNo = workrequestNo;\n        break;\n      case actionTypes.WORKFLOW.UPDATE.SAVE_FAILED:\n        draft.workflow.saveStatus = 'failed';\n        draft.workflow.saveErrorMsg = errMsg;\n        break;\n      case actionTypes.WORKFLOW.UPDATE.CLEAR_MSG:\n        delete draft.workflow.saveErrorMsg;\n        break;\n      case actionTypes.WORKFLOW.UPDATE.CLEAN:\n        delete draft.workflow;\n        break;\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT_SUCCESS:\n        if (draft.workflow) {\n          const item = draft.workflow.value.fileList.find(i => i.uiName === name);\n          if (item) {\n            item.filesIndividualRef = filesIndividualRef;\n            item.relativePath = relativePath;\n            item.name = name;\n            item.status = 'UPLOADED';\n            item.filesMainRef = filesMainRef;\n\n          }\n          // draft.workflow.value.fileList.push({fileId, name})\n        }\n\n        break;\n      case actionTypes.WORKFLOW.UPDATE.REMOVE_ATTACHMENT:\n        if (draft.workOrder) {\n          const item = draft.workflow.value.fileList.find(i => i.filesIndividualRef === filesIndividualRef);\n          if (item) {\n            item.status = 'DELETED'\n          }\n          // draft.workOrder.value.fileList.push({fileId, name})\n        }\n        break;\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT:\n        if (draft.workflow) {\n          if (!draft.workflow.value.fileList) {\n            draft.workflow.value.fileList = [];\n          }\n          draft.workflow.value.fileList.push({ uiName: file.name, type: file.type, status: 'UPLOADING' })\n        }\n        break;\n      case actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT_FAILED:\n          if (draft?.workflow?.value?.fileList?.length) {\n            const clonedFileSet = deepClone(draft.workflow.value.fileList);\n            const newFileList = clonedFileSet.filter(i => i.uiName !== name);\n            draft.workflow.value.fileList = newFileList;\n            draft.workflow.value.fileListError = \"Failed to Upload\";\n          }\n          break;\n      default:\n    }\n  })\n}\n\nexport default reducer;\nconst emptyObj = {};\nexport const selectors = {};\nselectors.workflow = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workflow || emptyObj;\n};\n\nselectors.workflowItems = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workflowItems || emptyObj;\n};\nselectors.workflowDefaultValues = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.defaultValues || emptyObj;\n};\n\n"]},"metadata":{},"sourceType":"module"}