{"ast":null,"code":"var _jsxFileName = \"/Users/plsingh/Downloads/archive-19Sep-Sunday/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './app/Main';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Provider } from \"react-redux\";\nimport rootSaga from './sagas';\nimport rootReducer from './reducers';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga'; // import { I18nextProvider } from 'react-i18next';\n\nimport './i18n';\nimport { ConfirmationDialogProvider } from './components/EAMConfirmDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet store;\nconst middleware = [];\nconst sagaMiddleware = createSagaMiddleware({\n  onError: error => {\n    // eslint-disable-next-line no-console\n    console.warn('saga middleware crashed on error ', error); //disptach action for app error. Display popup to reload app\n    // store.dispatch(actions.app.errored());\n    // LogRocket.captureException(error);\n  }\n});\nmiddleware.push(sagaMiddleware); // redux-logger options reference: https://www.npmjs.com/package/redux-logger#options\n\nconst logOptions = {\n  predicate: (getState, action) => !['API_WATCHER_SUCCESS', 'API_COMPLETE'].includes(action.type),\n  diff: true,\n  duration: true,\n  collapsed: (getState, action, logEntry) => !logEntry.error\n};\nmiddleware.push(createLogger(logOptions)); // trace true allows us to determine the origin of dispatched actions\n// using the redux dev tools plugin we can see the stack trace of where the request is originated from.\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && // TODO: check if we need to enable it in staging.\n// env === 'development' &&\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n  trace: true,\n  traceLimit: 25\n}) || compose;\nstore = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\nsagaMiddleware.run(rootSaga);\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n      utils: DateFnsUtils,\n      children: /*#__PURE__*/_jsxDEV(ConfirmationDialogProvider, {\n        children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 61,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nwindow.store = store; //remove\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\nserviceWorkerRegistration.register(); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/index.js"],"names":["React","ReactDOM","Main","serviceWorkerRegistration","reportWebVitals","MuiPickersUtilsProvider","DateFnsUtils","Provider","rootSaga","rootReducer","createLogger","createStore","applyMiddleware","compose","createSagaMiddleware","ConfirmationDialogProvider","store","middleware","sagaMiddleware","onError","error","console","warn","push","logOptions","predicate","getState","action","includes","type","diff","duration","collapsed","logEntry","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","run","render","document","getElementById","register"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,KAAKC,yBAAZ,MAA2C,6BAA3C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,uBAAT,QAAwC,sBAAxC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AACA,OAAO,QAAP;AACA,SAASC,0BAAT,QAA2C,+BAA3C;;AAEA,IAAIC,KAAJ;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,cAAc,GAAGJ,oBAAoB,CAAC;AAC1CK,EAAAA,OAAO,EAAEC,KAAK,IAAI;AAChB;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,mCAAb,EAAkDF,KAAlD,EAFgB,CAGhB;AACA;AACA;AACD;AAPyC,CAAD,CAA3C;AAUAH,UAAU,CAACM,IAAX,CAAgBL,cAAhB,E,CACA;;AACA,MAAMM,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB,CAAC,CAAC,qBAAD,EAAwB,cAAxB,EAAwCC,QAAxC,CAAiDD,MAAM,CAACE,IAAxD,CADjB;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,QAAQ,EAAE,IAHO;AAIjBC,EAAAA,SAAS,EAAE,CAACN,QAAD,EAAWC,MAAX,EAAmBM,QAAnB,KAAgC,CAACA,QAAQ,CAACb;AAJpC,CAAnB;AAOAH,UAAU,CAACM,IAAX,CAAgBb,YAAY,CAACc,UAAD,CAA5B,E,CACA;AACA;;AACA,MAAMU,gBAAgB,GACnBC,MAAM,CAACC,oCAAP,IACC;AACA;AACAD,MAAM,CAACC,oCAAP,CAA4C;AAC1CC,EAAAA,KAAK,EAAE,IADmC;AAE1CC,EAAAA,UAAU,EAAE;AAF8B,CAA5C,CAHF,IAMSzB,OAPX;AASAG,KAAK,GAAGL,WAAW,CACjBF,WADiB,EAEjByB,gBAAgB,CAACtB,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAFC,CAAnB;AAKAC,cAAc,CAACqB,GAAf,CAAmB/B,QAAnB;AAGAP,QAAQ,CAACuC,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAExB,KAAjB;AAAA,2BACE,QAAC,uBAAD;AAAyB,MAAA,KAAK,EAAEV,YAAhC;AAAA,6BACE,QAAC,0BAAD;AAAA,+BAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAYEmC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAZF;AAeAP,MAAM,CAACnB,KAAP,GAAeA,KAAf,C,CAAqB;AAGrB;AACA;AACA;;AACAb,yBAAyB,CAACwC,QAA1B,G,CAEA;AACA;AACA;;AACAvC,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './app/Main';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Provider } from \"react-redux\";\nimport rootSaga from './sagas';\nimport rootReducer from './reducers';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// import { I18nextProvider } from 'react-i18next';\nimport './i18n'\nimport { ConfirmationDialogProvider } from './components/EAMConfirmDialog';\n\nlet store;\nconst middleware = [];\nconst sagaMiddleware = createSagaMiddleware({\n  onError: error => {\n    // eslint-disable-next-line no-console\n    console.warn('saga middleware crashed on error ', error);\n    //disptach action for app error. Display popup to reload app\n    // store.dispatch(actions.app.errored());\n    // LogRocket.captureException(error);\n  },\n});\n\nmiddleware.push(sagaMiddleware);\n// redux-logger options reference: https://www.npmjs.com/package/redux-logger#options\nconst logOptions = {\n  predicate: (getState, action) => !['API_WATCHER_SUCCESS', 'API_COMPLETE'].includes(action.type),\n  diff: true,\n  duration: true,\n  collapsed: (getState, action, logEntry) => !logEntry.error,\n};\n\nmiddleware.push(createLogger(logOptions));\n// trace true allows us to determine the origin of dispatched actions\n// using the redux dev tools plugin we can see the stack trace of where the request is originated from.\nconst composeEnhancers =\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    // TODO: check if we need to enable it in staging.\n    // env === 'development' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      trace: true,\n      traceLimit: 25,\n    })) || compose;\n\nstore = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <ConfirmationDialogProvider>\n          {/* <I18nextProvider i18n={i18n}> */}\n          <Main />\n          {/* </I18nextProvider> */}\n        </ConfirmationDialogProvider>\n      </MuiPickersUtilsProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nwindow.store = store;//remove\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}