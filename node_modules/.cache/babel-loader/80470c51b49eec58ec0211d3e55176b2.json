{"ast":null,"code":"import { call, put, select, takeLatest } from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"..\";\nimport actionTypes from \"../../actions/types\";\nimport { getCountByStatusV2 } from \"../../queries/workRequest/getCountByStsV2\";\nimport actions from \"../../actions\";\nimport getFilterMetaData from \"../../queries/workRequest/getFilterMetaData\";\nimport { selectors } from \"../../reducers\";\nimport { getWorkRequestTimeline } from \"../../queries/workRequest/getWorkRequestTimeline\";\nimport moment from \"moment\";\nimport { postWorkReqAction } from \"../../queries/workRequest/postWorkReqAction\";\nimport { workRequestV2ListSagas } from \"./List\";\nimport { worRequestDashboardSagas } from \"./Dashboard\";\nimport getWorkRequestListByGroupStatus from \"../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWRWorkOrder } from \"../../queries/workRequest/getWRWorkorder\";\nimport { postAssignWOV2 } from \"../../queries/workRequest/postAssignWOV2\";\nimport { getWorkRequestListActions } from \"../../queries/workRequest/getWorkRequestListActions\";\nexport function* filterOptsInit() {\n  const query = getFilterMetaData();\n\n  try {\n    var _resp$workRequest_get, _resp$workRequest_get2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get = resp['workRequest_getWrkReqMetaData']) === null || _resp$workRequest_get === void 0 ? void 0 : (_resp$workRequest_get2 = _resp$workRequest_get.getListItems) === null || _resp$workRequest_get2 === void 0 ? void 0 : _resp$workRequest_get2.data) {\n      var _resp$workRequest_get3, _resp$workRequest_get4;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get3 = resp['workRequest_getWrkReqMetaData']) === null || _resp$workRequest_get3 === void 0 ? void 0 : (_resp$workRequest_get4 = _resp$workRequest_get3.getListItems) === null || _resp$workRequest_get4 === void 0 ? void 0 : _resp$workRequest_get4.data;\n      yield put(actions.workRequestV2.filterOpts.initSuccess(value));\n      return;\n    }\n  } catch (e) {}\n}\nexport function* getWorkRequestCount({\n  groupBy,\n  Actionflag = 'WorkReq_WS_fetch'\n}) {\n  const query = getCountByStatusV2({\n    Actionflag,\n    groupBy\n  });\n\n  try {\n    var _resp$workRequest_get5, _resp$workRequest_get6;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get5 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get5 === void 0 ? void 0 : (_resp$workRequest_get6 = _resp$workRequest_get5.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get6 === void 0 ? void 0 : _resp$workRequest_get6.data) {\n      var _resp$workRequest_get7, _resp$workRequest_get8;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get7 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get7 === void 0 ? void 0 : (_resp$workRequest_get8 = _resp$workRequest_get7.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get8 === void 0 ? void 0 : _resp$workRequest_get8.data;\n      return value;\n    }\n  } catch (e) {}\n}\nexport function* requestWorkRequestCount({\n  groupBy,\n  Actionflag = 'WorkReq_WS_fetch'\n}) {\n  const value = yield call(getWorkRequestCount, {\n    groupBy,\n    Actionflag\n  });\n\n  if (value) {\n    yield put(actions.workRequestV2.count.received(groupBy, Actionflag, value));\n  } else {\n    return yield put(actions.workRequestV2.count.requestFailed(groupBy, Actionflag));\n  }\n}\nexport function* workRequestListInit({\n  groupBy,\n  status\n}) {\n  if (!status) {\n    var _workRequestSet, _workRequestSet$value, _workRequestSet2, _workRequestSet2$valu, _workRequestSet2$valu2;\n\n    let workRequestSet = yield select(selectors.workRequestCount, groupBy);\n\n    if (!((_workRequestSet = workRequestSet) === null || _workRequestSet === void 0 ? void 0 : (_workRequestSet$value = _workRequestSet.value) === null || _workRequestSet$value === void 0 ? void 0 : _workRequestSet$value.workrequestcount)) {\n      yield call(requestWorkRequestCount, {\n        groupBy\n      });\n      workRequestSet = yield select(selectors.workRequestCount, groupBy);\n    }\n\n    if ((_workRequestSet2 = workRequestSet) === null || _workRequestSet2 === void 0 ? void 0 : (_workRequestSet2$valu = _workRequestSet2.value) === null || _workRequestSet2$valu === void 0 ? void 0 : (_workRequestSet2$valu2 = _workRequestSet2$valu.workrequestcount) === null || _workRequestSet2$valu2 === void 0 ? void 0 : _workRequestSet2$valu2.length) {\n      var _workRequestSet3, _workRequestSet3$valu;\n\n      const statusTmp = (_workRequestSet3 = workRequestSet) === null || _workRequestSet3 === void 0 ? void 0 : (_workRequestSet3$valu = _workRequestSet3.value) === null || _workRequestSet3$valu === void 0 ? void 0 : _workRequestSet3$valu.workrequestcount[0].hdn_card_code;\n      yield put(actions.workRequestV2.list.request(groupBy, statusTmp));\n    }\n\n    return;\n  }\n\n  yield put(actions.workRequestV2.list.request(groupBy, status));\n}\nexport function* getWorkRequestListCount({\n  groupBy,\n  status,\n  Actionflag\n}) {\n  const filters = yield select(selectors.workRequestListFilter, groupBy);\n  const query = getCountByStatusV2({\n    Actionflag,\n    groupBy\n  });\n\n  try {\n    var _resp$workRequest_get9, _resp$workRequest_get10;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get9 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get9 === void 0 ? void 0 : (_resp$workRequest_get10 = _resp$workRequest_get9.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get10 === void 0 ? void 0 : _resp$workRequest_get10.data) {\n      var _resp$workRequest_get11, _resp$workRequest_get12;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get11 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get11 === void 0 ? void 0 : (_resp$workRequest_get12 = _resp$workRequest_get11.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get12 === void 0 ? void 0 : _resp$workRequest_get12.data;\n      return value;\n    }\n  } catch (e) {}\n} // export function* workRequestListRequest({ groupBy, status, pageNo = 0 }) {\n//   const filters = yield select(selectors.workRequestListFilter, groupBy);\n//   console.log(\"filters\", filters, groupBy, status)\n//   const obj = { skip: pageNo, groupBy, status };\n//   if (groupBy === 'Status') {\n//     obj.Actionflag = 'Browse_Work_Requests_UI_Fetch';\n//   }\n//   else if (groupBy === 'Priority') {\n//     obj.Actionflag = 'Priority_Filter';\n//   }\n//   else if (groupBy === 'RepDate') {\n//     obj.Actionflag = 'ReportedDate_Filter';\n//   }\n//   const query = getWorkRequestListByGroupStatus(obj);\n//   try {\n//     const resp = yield call(apiCallWithRetry, {\n//       opts: {},\n//       query: query,\n//       gCtxtCmp: 'workRequest',\n//       hidden: true,\n//     })\n//     if (resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo) {\n//       const value = resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo;\n//       return yield put(actions.workRequestV2.list.received(groupBy, status, value, pageNo + 1));\n//     }\n//     return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n//   } catch (e) {\n//     return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n//   }\n// }\n\nexport function* requestWrTimeline({\n  wrNo\n}) {\n  const query = getWorkRequestTimeline({\n    wrNo\n  });\n\n  try {\n    var _resp$workRequest_get13, _resp$workRequest_get14;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get13 = resp['workRequest_getWRTimeline']) === null || _resp$workRequest_get13 === void 0 ? void 0 : (_resp$workRequest_get14 = _resp$workRequest_get13.getthetimelinemapoftheWorkRequest) === null || _resp$workRequest_get14 === void 0 ? void 0 : _resp$workRequest_get14.data) {\n      var _resp$workRequest_get15, _resp$workRequest_get16;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get15 = resp['workRequest_getWRTimeline']) === null || _resp$workRequest_get15 === void 0 ? void 0 : (_resp$workRequest_get16 = _resp$workRequest_get15.getthetimelinemapoftheWorkRequest) === null || _resp$workRequest_get16 === void 0 ? void 0 : _resp$workRequest_get16.data;\n      const valueFormatted = [];\n      value.forEach(val => {\n        const date = moment(val.HistoryDatetime).format('DD/MM/YYYY HH:mm');\n\n        if (val.iconcode.indexOf('WR-') !== -1) {\n          const iconcode = val.iconcode.replace('WR-', '');\n          valueFormatted.push({ ...val,\n            iconcode,\n            date\n          });\n        } else if (val.iconcode.indexOf('WO-') !== -1 && valueFormatted.length) {\n          const lastItem = valueFormatted[valueFormatted.length - 1];\n\n          if (!lastItem.child) {\n            lastItem.child = [];\n          }\n\n          const iconcode = val.iconcode.replace('WO-', '');\n          lastItem.child.push({ ...val,\n            iconcode,\n            date\n          });\n        }\n      });\n      return yield put(actions.workRequestV2.timeline.received(wrNo, valueFormatted));\n    }\n\n    return yield put(actions.workRequestV2.timeline.requestFailed(wrNo));\n  } catch (e) {\n    return yield put(actions.workRequestV2.timeline.requestFailed(wrNo));\n  }\n}\nexport function* requestWorkRequest({\n  wrNo\n}) {\n  const query = getWorkRequestListByGroupStatus({\n    workrequestNo: wrNo\n  });\n\n  try {\n    var _resp$workRequest_get17, _resp$workRequest_get18, _resp$workRequest_get19, _resp$workRequest_get20;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get17 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get17 === void 0 ? void 0 : (_resp$workRequest_get18 = _resp$workRequest_get17.getthelistofWorkRequests) === null || _resp$workRequest_get18 === void 0 ? void 0 : (_resp$workRequest_get19 = _resp$workRequest_get18.data) === null || _resp$workRequest_get19 === void 0 ? void 0 : (_resp$workRequest_get20 = _resp$workRequest_get19.GetWorkReqInfo) === null || _resp$workRequest_get20 === void 0 ? void 0 : _resp$workRequest_get20[0]) {\n      var _resp$workRequest_get21, _resp$workRequest_get22, _resp$workRequest_get23, _resp$workRequest_get24;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get21 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get21 === void 0 ? void 0 : (_resp$workRequest_get22 = _resp$workRequest_get21.getthelistofWorkRequests) === null || _resp$workRequest_get22 === void 0 ? void 0 : (_resp$workRequest_get23 = _resp$workRequest_get22.data) === null || _resp$workRequest_get23 === void 0 ? void 0 : (_resp$workRequest_get24 = _resp$workRequest_get23.GetWorkReqInfo) === null || _resp$workRequest_get24 === void 0 ? void 0 : _resp$workRequest_get24[0];\n      return yield put(actions.workRequestV2.resource.received(wrNo, value));\n    }\n\n    return yield put(actions.workRequestV2.resource.requestFailed(wrNo));\n  } catch (e) {\n    return yield put(actions.workRequestV2.resource.requestFailed(wrNo));\n  }\n}\nexport function* triggerAction({\n  groupBy,\n  value\n}) {\n  if (!value.length) {\n    return;\n  }\n\n  const query = postWorkReqAction(value);\n\n  try {\n    var _resp$workRequest_pos, _resp$workRequest_pos2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\"); //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_pos = resp['workRequest_postWrkReqs']) === null || _resp$workRequest_pos === void 0 ? void 0 : (_resp$workRequest_pos2 = _resp$workRequest_pos.processtheWorkRequestbasedontheActionTypeflag) === null || _resp$workRequest_pos2 === void 0 ? void 0 : _resp$workRequest_pos2.data) {\n      const status = yield select(selectors.workRequestActiveTab, groupBy);\n      yield put(actions.workRequestV2.list.refresh(groupBy, status));\n    }\n  } catch (e) {\n    const [error] = e.response.errors;\n    let message = 'Something went wrong!';\n\n    try {\n      var _parsedErorMsg$;\n\n      const parsedErorMsg = JSON.parse(error.message);\n\n      if (parsedErorMsg === null || parsedErorMsg === void 0 ? void 0 : (_parsedErorMsg$ = parsedErorMsg[0]) === null || _parsedErorMsg$ === void 0 ? void 0 : _parsedErorMsg$.description) {\n        message = parsedErorMsg[0].description;\n      }\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    } // return yield put(actions.workflow.update.saveFailed(message));\n\n  }\n}\nexport function* dashboardInit() {\n  yield put(actions.workRequestV2.filterOpts.init());\n  const value = yield call(getWorkRequestCount, {\n    Actionflag: 'WorkReq_WS_fetch'\n  });\n\n  if (value) {\n    const defaultGroupBy = value.workhubcmbcode;\n    yield put(actions.workRequestV2.dashboard.selectFilter(defaultGroupBy));\n    yield put(actions.workRequestV2.count.received(defaultGroupBy, 'WorkReq_WS_fetch', value));\n  }\n}\nexport function* requestAssociatedWorkOrder({\n  wrNo\n}) {\n  const query = getWRWorkOrder({\n    wrNo\n  });\n\n  try {\n    var _resp$workRequest_get25, _resp$workRequest_get26, _resp$workRequest_get27;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {// const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get25 = resp['workRequest_getWRWorkorder']) === null || _resp$workRequest_get25 === void 0 ? void 0 : (_resp$workRequest_get26 = _resp$workRequest_get25.listofopenWorkordersraisedontheEquipmentLocation) === null || _resp$workRequest_get26 === void 0 ? void 0 : (_resp$workRequest_get27 = _resp$workRequest_get26.data) === null || _resp$workRequest_get27 === void 0 ? void 0 : _resp$workRequest_get27.WorkOrderInfo) {\n      const value = resp['workRequest_getWRWorkorder'].listofopenWorkordersraisedontheEquipmentLocation.data.WorkOrderInfo || [];\n      yield put(actions.workRequestV2.resource.workOrder.received(wrNo, value));\n      return;\n    }\n\n    yield put(actions.workRequestV2.resource.workOrder.requestFailed(wrNo));\n  } catch (e) {\n    yield put(actions.workRequestV2.resource.workOrder.requestFailed(wrNo));\n  }\n}\nexport function* assignWorkOrder({\n  wrNo,\n  woNo\n}) {\n  const query = postAssignWOV2({\n    wrNo,\n    woNo\n  });\n\n  try {\n    var _resp$workRequest_pos3, _resp$workRequest_pos4;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {}\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_pos3 = resp['workRequest_postWRAssignWrkReq']) === null || _resp$workRequest_pos3 === void 0 ? void 0 : (_resp$workRequest_pos4 = _resp$workRequest_pos3.tagWorkrequesttotheworkordergivenintheRequestbody) === null || _resp$workRequest_pos4 === void 0 ? void 0 : _resp$workRequest_pos4.data) {\n      yield put(actions.workRequestV2.resource.request(wrNo));\n      return;\n    }\n\n    yield put(actions.workRequestV2.resource.workOrder.assignFailed(wrNo));\n  } catch (e) {\n    yield put(actions.workRequestV2.resource.workOrder.assignFailed(wrNo));\n  }\n}\nexport function* requestWorkRequestAction({\n  wrNo\n}) {\n  const query = getWorkRequestListActions({\n    documentNo: wrNo\n  });\n\n  try {\n    var _resp$workRequest_get28, _resp$workRequest_get29;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get28 = resp['workRequest_getlistOfAllowedActions']) === null || _resp$workRequest_get28 === void 0 ? void 0 : (_resp$workRequest_get29 = _resp$workRequest_get28.listOfAllowedActions) === null || _resp$workRequest_get29 === void 0 ? void 0 : _resp$workRequest_get29.data) {\n      var _resp$workRequest_get30, _resp$workRequest_get31;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get30 = resp['workRequest_getlistOfAllowedActions']) === null || _resp$workRequest_get30 === void 0 ? void 0 : (_resp$workRequest_get31 = _resp$workRequest_get30.listOfAllowedActions) === null || _resp$workRequest_get31 === void 0 ? void 0 : _resp$workRequest_get31.data;\n      return yield put(actions.workRequestV2.resource.receivedActions(wrNo, value));\n    }\n  } catch (e) {}\n}\nexport function* triggerActionForWR({\n  actionFlag,\n  wrNo\n}) {\n  const arr = [{\n    actionFlag,\n    workrequestNo: wrNo\n  }];\n  const query = postWorkReqAction(arr);\n\n  try {\n    var _resp$workRequest_pos5, _resp$workRequest_pos6;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      yield put(actions.workRequestV2.resource.triggerActionFailed(wrNo, parsedErrorJson.description || '')); //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_pos5 = resp['workRequest_postWrkReqs']) === null || _resp$workRequest_pos5 === void 0 ? void 0 : (_resp$workRequest_pos6 = _resp$workRequest_pos5.processtheWorkRequestbasedontheActionTypeflag) === null || _resp$workRequest_pos6 === void 0 ? void 0 : _resp$workRequest_pos6.data) {\n      yield put(actions.workRequestV2.resource.requestActions(wrNo));\n      yield put(actions.workRequestV2.resource.request(wrNo));\n      yield put(actions.workRequestV2.resource.workOrder.request(wrNo));\n    }\n  } catch (e) {\n    const [error] = e.response.errors || [];\n    let message = 'Something went wrong!';\n\n    try {\n      var _parsedErorMsg$2;\n\n      const parsedErorMsg = JSON.parse(error.message);\n\n      if (parsedErorMsg === null || parsedErorMsg === void 0 ? void 0 : (_parsedErorMsg$2 = parsedErorMsg[0]) === null || _parsedErorMsg$2 === void 0 ? void 0 : _parsedErorMsg$2.description) {\n        message = parsedErorMsg[0].description;\n      }\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n\n    yield put(actions.workRequestV2.resource.triggerActionFailed(wrNo, message));\n  }\n}\nexport const workRequestV2Sagas = [takeLatest(actionTypes.WORK_REQUEST_V2.FILTER_OPTIONS.INIT, filterOptsInit), takeLatest(actionTypes.WORK_REQUEST_V2.COUNT.REQUEST, requestWorkRequestCount), takeLatest(actionTypes.WORK_REQUEST_V2.LIST.INIT, workRequestListInit), takeLatest(actionTypes.WORK_REQUEST_V2.TIMELINE.REQUEST, requestWrTimeline), takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.REQUEST, requestWorkRequest), takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.WORK_ORDER.REQUEST, requestAssociatedWorkOrder), takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.WORK_ORDER.ASSIGN, assignWorkOrder), takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.REQUEST_ACTION, requestWorkRequestAction), takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.TRIGGER_ACTION, triggerActionForWR), ...workRequestV2ListSagas, ...worRequestDashboardSagas];","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/workRequestV2/index.js"],"names":["call","put","select","takeLatest","apiCallWithRetry","actionTypes","getCountByStatusV2","actions","getFilterMetaData","selectors","getWorkRequestTimeline","moment","postWorkReqAction","workRequestV2ListSagas","worRequestDashboardSagas","getWorkRequestListByGroupStatus","getWRWorkOrder","postAssignWOV2","getWorkRequestListActions","filterOptsInit","query","resp","opts","gCtxtCmp","hidden","getListItems","data","value","workRequestV2","filterOpts","initSuccess","e","getWorkRequestCount","groupBy","Actionflag","gettheCountofWorkRequestsgroupedbyStatus","requestWorkRequestCount","count","received","requestFailed","workRequestListInit","status","workRequestSet","workRequestCount","workrequestcount","length","statusTmp","hdn_card_code","list","request","getWorkRequestListCount","filters","workRequestListFilter","requestWrTimeline","wrNo","getthetimelinemapoftheWorkRequest","valueFormatted","forEach","val","date","HistoryDatetime","format","iconcode","indexOf","replace","push","lastItem","child","timeline","requestWorkRequest","workrequestNo","getthelistofWorkRequests","GetWorkReqInfo","resource","triggerAction","errors","parsedErrorJson","JSON","parse","message","processtheWorkRequestbasedontheActionTypeflag","workRequestActiveTab","refresh","error","response","parsedErorMsg","description","dashboardInit","init","defaultGroupBy","workhubcmbcode","dashboard","selectFilter","requestAssociatedWorkOrder","listofopenWorkordersraisedontheEquipmentLocation","WorkOrderInfo","workOrder","assignWorkOrder","woNo","tagWorkrequesttotheworkordergivenintheRequestbody","assignFailed","requestWorkRequestAction","documentNo","listOfAllowedActions","receivedActions","triggerActionForWR","actionFlag","arr","triggerActionFailed","requestActions","workRequestV2Sagas","WORK_REQUEST_V2","FILTER_OPTIONS","INIT","COUNT","REQUEST","LIST","TIMELINE","RESOURCE","WORK_ORDER","ASSIGN","REQUEST_ACTION","TRIGGER_ACTION"],"mappings":"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","sourcesContent":["\nimport {\n  call,\n  put,\n  select,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"..\";\nimport actionTypes from \"../../actions/types\";\nimport { getCountByStatusV2 } from \"../../queries/workRequest/getCountByStsV2\";\nimport actions from \"../../actions\";\nimport getFilterMetaData from \"../../queries/workRequest/getFilterMetaData\";\nimport { selectors } from \"../../reducers\";\nimport { getWorkRequestTimeline } from \"../../queries/workRequest/getWorkRequestTimeline\";\nimport moment from \"moment\";\nimport { postWorkReqAction } from \"../../queries/workRequest/postWorkReqAction\";\nimport { workRequestV2ListSagas } from \"./List\";\nimport { worRequestDashboardSagas } from \"./Dashboard\";\nimport getWorkRequestListByGroupStatus from \"../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWRWorkOrder } from \"../../queries/workRequest/getWRWorkorder\";\nimport { postAssignWOV2 } from \"../../queries/workRequest/postAssignWOV2\";\nimport { getWorkRequestListActions } from \"../../queries/workRequest/getWorkRequestListActions\";\n\nexport function* filterOptsInit() {\n  const query = getFilterMetaData();\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWrkReqMetaData']?.getListItems?.data) {\n      const value = resp?.['workRequest_getWrkReqMetaData']?.getListItems?.data\n      yield put(actions.workRequestV2.filterOpts.initSuccess(value));\n      return;\n    }\n  } catch (e) {\n  }\n}\nexport function* getWorkRequestCount({ groupBy, Actionflag = 'WorkReq_WS_fetch' }) {\n  const query = getCountByStatusV2({ Actionflag, groupBy });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data) {\n      const value = resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data\n      return value;\n    }\n  } catch (e) {\n  }\n}\nexport function* requestWorkRequestCount({ groupBy, Actionflag = 'WorkReq_WS_fetch' }) {\n\n  const value = yield call(getWorkRequestCount, { groupBy, Actionflag });\n  if (value) {\n    yield put(actions.workRequestV2.count.received(groupBy, Actionflag, value));\n  } else {\n    return yield put(actions.workRequestV2.count.requestFailed(groupBy, Actionflag));\n  }\n}\nexport function* workRequestListInit({ groupBy, status }) {\n\n  if (!status) {\n    let workRequestSet = yield select(selectors.workRequestCount, groupBy);\n    if (!workRequestSet?.value?.workrequestcount) {\n      yield call(requestWorkRequestCount, { groupBy });\n      workRequestSet = yield select(selectors.workRequestCount, groupBy);\n    }\n    if (workRequestSet?.value?.workrequestcount?.length) {\n      const statusTmp = workRequestSet?.value?.workrequestcount[0].hdn_card_code;\n      yield put(actions.workRequestV2.list.request(groupBy, statusTmp))\n    }\n    return;\n  }\n  yield put(actions.workRequestV2.list.request(groupBy, status))\n}\n\nexport function* getWorkRequestListCount({ groupBy, status, Actionflag }) {\n  const filters = yield select(selectors.workRequestListFilter, groupBy);\n\n  const query = getCountByStatusV2({ Actionflag, groupBy });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data) {\n      const value = resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data\n      return value;\n    }\n  } catch (e) {\n  }\n}\n// export function* workRequestListRequest({ groupBy, status, pageNo = 0 }) {\n//   const filters = yield select(selectors.workRequestListFilter, groupBy);\n//   console.log(\"filters\", filters, groupBy, status)\n//   const obj = { skip: pageNo, groupBy, status };\n//   if (groupBy === 'Status') {\n//     obj.Actionflag = 'Browse_Work_Requests_UI_Fetch';\n//   }\n//   else if (groupBy === 'Priority') {\n//     obj.Actionflag = 'Priority_Filter';\n//   }\n//   else if (groupBy === 'RepDate') {\n//     obj.Actionflag = 'ReportedDate_Filter';\n//   }\n//   const query = getWorkRequestListByGroupStatus(obj);\n//   try {\n//     const resp = yield call(apiCallWithRetry, {\n//       opts: {},\n//       query: query,\n//       gCtxtCmp: 'workRequest',\n//       hidden: true,\n//     })\n//     if (resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo) {\n//       const value = resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo;\n//       return yield put(actions.workRequestV2.list.received(groupBy, status, value, pageNo + 1));\n//     }\n//     return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n\n//   } catch (e) {\n//     return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n//   }\n// }\n\nexport function* requestWrTimeline({ wrNo }) {\n  const query = getWorkRequestTimeline({ wrNo });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWRTimeline']?.getthetimelinemapoftheWorkRequest?.data) {\n      const value = resp?.['workRequest_getWRTimeline']?.getthetimelinemapoftheWorkRequest?.data\n      const valueFormatted = [];\n      value.forEach(val => {\n        const date = moment(val.HistoryDatetime).format('DD/MM/YYYY HH:mm');\n        if (val.iconcode.indexOf('WR-') !== -1) {\n          const iconcode = val.iconcode.replace('WR-', '');\n          valueFormatted.push({ ...val, iconcode, date });\n        } else if (val.iconcode.indexOf('WO-') !== -1 && valueFormatted.length) {\n          const lastItem = valueFormatted[valueFormatted.length - 1];\n          if (!lastItem.child) {\n            lastItem.child = [];\n          }\n          const iconcode = val.iconcode.replace('WO-', '');\n          lastItem.child.push({ ...val, iconcode, date });\n        }\n      })\n      return yield put(actions.workRequestV2.timeline.received(wrNo, valueFormatted));\n    }\n    return yield put(actions.workRequestV2.timeline.requestFailed(wrNo));\n\n  } catch (e) {\n    return yield put(actions.workRequestV2.timeline.requestFailed(wrNo));\n  }\n}\n\nexport function* requestWorkRequest({ wrNo }) {\n  const query = getWorkRequestListByGroupStatus({ workrequestNo: wrNo });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo?.[0]) {\n      const value = resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo?.[0]\n      return yield put(actions.workRequestV2.resource.received(wrNo, value));\n    }\n    return yield put(actions.workRequestV2.resource.requestFailed(wrNo));\n\n  } catch (e) {\n    return yield put(actions.workRequestV2.resource.requestFailed(wrNo));\n  }\n}\nexport function* triggerAction({ groupBy, value }) {\n  if (!value.length) {\n    return;\n  }\n  const query = postWorkReqAction(value);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n    if (resp?.['workRequest_postWrkReqs']?.processtheWorkRequestbasedontheActionTypeflag?.data) {\n      const status = yield select(selectors.workRequestActiveTab, groupBy);\n      yield put(actions.workRequestV2.list.refresh(groupBy, status));\n    }\n\n  } catch (e) {\n    const [error] = e.response.errors;\n    let message = 'Something went wrong!';\n    try {\n      const parsedErorMsg = JSON.parse(error.message);\n      if (parsedErorMsg?.[0]?.description) {\n        message = parsedErorMsg[0].description;\n      }\n\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n    // return yield put(actions.workflow.update.saveFailed(message));\n  }\n}\n\nexport function* dashboardInit() {\n  yield put(actions.workRequestV2.filterOpts.init());\n  const value = yield call(getWorkRequestCount, { Actionflag: 'WorkReq_WS_fetch' });\n  if (value) {\n    const defaultGroupBy = value.workhubcmbcode;\n    yield put(actions.workRequestV2.dashboard.selectFilter(defaultGroupBy));\n    yield put(actions.workRequestV2.count.received(defaultGroupBy, 'WorkReq_WS_fetch', value));\n  }\n}\n\nexport function* requestAssociatedWorkOrder({ wrNo }) {\n\n  const query = getWRWorkOrder({ wrNo });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n      // const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n    if (resp?.['workRequest_getWRWorkorder']?.listofopenWorkordersraisedontheEquipmentLocation?.data?.WorkOrderInfo) {\n      const value = resp['workRequest_getWRWorkorder'].listofopenWorkordersraisedontheEquipmentLocation.data.WorkOrderInfo || [];\n      yield put(actions.workRequestV2.resource.workOrder.received(wrNo, value));\n      return;\n    }\n\n    yield put(actions.workRequestV2.resource.workOrder.requestFailed(wrNo));\n\n  } catch (e) {\n    yield put(actions.workRequestV2.resource.workOrder.requestFailed(wrNo));\n  }\n}\nexport function* assignWorkOrder({ wrNo, woNo }) {\n  const query = postAssignWOV2({ wrNo, woNo });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n    }\n    if (resp?.['workRequest_postWRAssignWrkReq']?.tagWorkrequesttotheworkordergivenintheRequestbody?.data) {\n      yield put(actions.workRequestV2.resource.request(wrNo))\n      return;\n    }\n    yield put(actions.workRequestV2.resource.workOrder.assignFailed(wrNo));\n  } catch (e) {\n    yield put(actions.workRequestV2.resource.workOrder.assignFailed(wrNo));\n  }\n}\nexport function* requestWorkRequestAction({ wrNo }) {\n  const query = getWorkRequestListActions({ documentNo: wrNo });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getlistOfAllowedActions']?.listOfAllowedActions?.data) {\n      const value = resp?.['workRequest_getlistOfAllowedActions']?.listOfAllowedActions?.data\n      return yield put(actions.workRequestV2.resource.receivedActions(wrNo, value));\n    }\n  } catch (e) {\n  }\n}\nexport function* triggerActionForWR({ actionFlag, wrNo }) {\n  const arr = [{\n    actionFlag,\n    workrequestNo: wrNo\n  }];\n  const query = postWorkReqAction(arr);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      yield put(actions.workRequestV2.resource.triggerActionFailed(wrNo, parsedErrorJson.description || ''));\n      //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n    if (resp?.['workRequest_postWrkReqs']?.processtheWorkRequestbasedontheActionTypeflag?.data) {\n      yield put(actions.workRequestV2.resource.requestActions(wrNo));\n      yield put(actions.workRequestV2.resource.request(wrNo));\n      yield put(actions.workRequestV2.resource.workOrder.request(wrNo));\n    }\n\n  } catch (e) {\n    const [error] = e.response.errors || [];\n    let message = 'Something went wrong!';\n    try {\n      const parsedErorMsg = JSON.parse(error.message);\n      if (parsedErorMsg?.[0]?.description) {\n        message = parsedErorMsg[0].description;\n      }\n\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n    yield put(actions.workRequestV2.resource.triggerActionFailed(wrNo, message));\n    \n  }\n}\n\n\n\nexport const workRequestV2Sagas = [\n  takeLatest(actionTypes.WORK_REQUEST_V2.FILTER_OPTIONS.INIT, filterOptsInit),\n  takeLatest(actionTypes.WORK_REQUEST_V2.COUNT.REQUEST, requestWorkRequestCount),\n  takeLatest(actionTypes.WORK_REQUEST_V2.LIST.INIT, workRequestListInit),\n  takeLatest(actionTypes.WORK_REQUEST_V2.TIMELINE.REQUEST, requestWrTimeline),\n  takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.REQUEST, requestWorkRequest),\n  takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.WORK_ORDER.REQUEST, requestAssociatedWorkOrder),\n  takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.WORK_ORDER.ASSIGN, assignWorkOrder),\n  takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.REQUEST_ACTION, requestWorkRequestAction),\n  takeLatest(actionTypes.WORK_REQUEST_V2.RESOURCE.TRIGGER_ACTION, triggerActionForWR),\n  ...workRequestV2ListSagas,\n  ...worRequestDashboardSagas,\n\n];\n"]},"metadata":{},"sourceType":"module"}