{"ast":null,"code":"import { call, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"../..\";\nimport actions from \"../../../actions\";\nimport actionTypes from \"../../../actions/types\";\nimport { getWorkRequestListActions } from \"../../../queries/workRequest/getWorkRequestListActions\";\nimport getWorkRequestListByGroupStatus from \"../../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWorkRequestListCount } from \"../../../queries/workRequest/getWorkRequestListCount\";\nimport { postWorkReqAction } from \"../../../queries/workRequest/postWorkReqAction\";\nimport { selectors } from \"../../../reducers\";\n\nfunction getRequestObj({\n  taskStatus,\n  groupBy,\n  subGroup,\n  pageNo,\n  isFilterSet,\n  ...others\n}) {\n  console.log(\"isFilterSet\", isFilterSet);\n  const {\n    reportedBy = '',\n    PlangroupCode = '',\n    workGroup = '',\n    Priority = '',\n    locationCode = '',\n    equipmentCode = '',\n    WorkrequestOn = '',\n    srchby = '',\n    Category = ''\n  } = others;\n  const obj = {};\n\n  if (isFilterSet) {\n    obj.Actionflag = 'filter';\n  } else if (taskStatus) {\n    obj.Actionflag = 'status_click';\n\n    if (groupBy === 'RepDate') {\n      obj.ReportedTimeCode = subGroup;\n    } else if (groupBy === 'Priority') {\n      obj.Priority = subGroup;\n    }\n  } else if (groupBy === 'Status') {\n    obj.Actionflag = 'Browse_Work_Requests_UI_Fetch';\n  } else if (groupBy === 'Priority') {\n    obj.Actionflag = 'Priority_Filter';\n  } else if (groupBy === 'RepDate') {\n    obj.Actionflag = 'ReportedDate_Filter';\n  }\n\n  obj.HiddenControl1 = groupBy;\n  obj.HiddenControl2 = subGroup;\n  obj.status = taskStatus;\n  obj.skip = pageNo;\n  obj.reportedBy = reportedBy;\n  obj.PlangroupCode = PlangroupCode;\n  obj.workGroup = workGroup;\n  obj.Category = Category;\n\n  if (!obj.Priority) {\n    obj.Priority = Priority;\n  }\n\n  obj.locationCode = locationCode;\n  obj.equipmentCode = equipmentCode;\n  obj.WorkrequestOn = WorkrequestOn;\n  obj.srchby = srchby;\n  return obj;\n}\n\nexport function* workRequestListCount({\n  groupBy\n}) {\n  var _Object$keys, _Object$keys$call;\n\n  const {\n    taskStatus,\n    pageNo,\n    filter = {},\n    subGroup\n  } = yield select(selectors.workRequestListObj, groupBy);\n  const opts = getRequestObj({\n    groupBy,\n    subGroup,\n    pageNo,\n    isFilterSet: Object === null || Object === void 0 ? void 0 : (_Object$keys = Object.keys) === null || _Object$keys === void 0 ? void 0 : (_Object$keys$call = _Object$keys.call(Object, filter)) === null || _Object$keys$call === void 0 ? void 0 : _Object$keys$call.length,\n    ...filter\n  });\n  const query = getWorkRequestListCount(opts);\n\n  try {\n    var _resp$workRequest_get, _resp$workRequest_get2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get === void 0 ? void 0 : (_resp$workRequest_get2 = _resp$workRequest_get.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get2 === void 0 ? void 0 : _resp$workRequest_get2.data) {\n      var _resp$workRequest_get3, _resp$workRequest_get4;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get3 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get3 === void 0 ? void 0 : (_resp$workRequest_get4 = _resp$workRequest_get3.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get4 === void 0 ? void 0 : _resp$workRequest_get4.data;\n      yield put(actions.workRequestV2.list.receivedCount(groupBy, value));\n\n      if (!taskStatus && value.workrequestcount) {\n        yield put(actions.workRequestV2.list.updateTaskStatus(groupBy, value.workrequestcount[0].hdn_card_code, true));\n      }\n\n      return;\n    }\n  } catch (e) {}\n}\nexport function* workRequestListRequest({\n  groupBy\n}) {\n  var _Object$keys2, _Object$keys2$call;\n\n  if (groupBy === 'Priority') {\n    const priorityCountObj = yield select(selectors.workRequestPriorityColor);\n\n    if (!priorityCountObj) {\n      yield put(actions.workRequestV2.dashboard.changeFilter(\"Priority\"));\n    }\n  }\n\n  const xyz = yield select(selectors.workRequestListObj, groupBy);\n  console.log(\"xyz\", xyz);\n  const {\n    taskStatus,\n    pageNo,\n    filter = {},\n    subGroup\n  } = xyz;\n  const isFilterSet = !!(Object === null || Object === void 0 ? void 0 : (_Object$keys2 = Object.keys) === null || _Object$keys2 === void 0 ? void 0 : (_Object$keys2$call = _Object$keys2.call(Object, filter)) === null || _Object$keys2$call === void 0 ? void 0 : _Object$keys2$call.length);\n  let opts = {};\n\n  if (isFilterSet) {\n    yield call(workRequestListCount, {\n      groupBy,\n      isFilterSet\n    });\n    opts = getRequestObj({\n      groupBy,\n      subGroup,\n      pageNo,\n      ...filter,\n      taskStatus,\n      isFilterSet\n    });\n  } else if (!subGroup || subGroup && taskStatus !== subGroup) {\n    yield call(workRequestListCount, {\n      groupBy,\n      isFilterSet\n    });\n    opts = getRequestObj({\n      groupBy,\n      subGroup,\n      pageNo,\n      ...filter,\n      isFilterSet\n    });\n  } else {\n    opts = getRequestObj({\n      groupBy,\n      subGroup,\n      pageNo,\n      ...filter,\n      taskStatus,\n      isFilterSet\n    });\n  }\n\n  const query = getWorkRequestListByGroupStatus(opts);\n\n  try {\n    var _resp$workRequest_get5, _resp$workRequest_get6, _resp$workRequest_get7;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get5 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get5 === void 0 ? void 0 : (_resp$workRequest_get6 = _resp$workRequest_get5.getthelistofWorkRequests) === null || _resp$workRequest_get6 === void 0 ? void 0 : (_resp$workRequest_get7 = _resp$workRequest_get6.data) === null || _resp$workRequest_get7 === void 0 ? void 0 : _resp$workRequest_get7.GetWorkReqInfo) {\n      var _resp$workRequest_get8, _resp$workRequest_get9, _resp$workRequest_get10;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get8 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get8 === void 0 ? void 0 : (_resp$workRequest_get9 = _resp$workRequest_get8.getthelistofWorkRequests) === null || _resp$workRequest_get9 === void 0 ? void 0 : (_resp$workRequest_get10 = _resp$workRequest_get9.data) === null || _resp$workRequest_get10 === void 0 ? void 0 : _resp$workRequest_get10.GetWorkReqInfo;\n      return yield put(actions.workRequestV2.list.received(groupBy, value));\n    }\n\n    yield put(actions.workRequestV2.list.requestFailed(groupBy));\n    return;\n  } catch (e) {// return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n  }\n}\nexport function* workRequestListTaskUpdate({\n  groupBy,\n  skipFetch\n}) {\n  var _Object$keys3, _Object$keys3$call;\n\n  if (skipFetch) {\n    return;\n  }\n\n  const {\n    taskStatus,\n    pageNo,\n    filter = {},\n    subGroup\n  } = yield select(selectors.workRequestListObj, groupBy);\n  const isFilterSet = Object === null || Object === void 0 ? void 0 : (_Object$keys3 = Object.keys) === null || _Object$keys3 === void 0 ? void 0 : (_Object$keys3$call = _Object$keys3.call(Object, filter)) === null || _Object$keys3$call === void 0 ? void 0 : _Object$keys3$call.length;\n  const opts = getRequestObj({\n    groupBy,\n    subGroup,\n    pageNo,\n    isFilterSet,\n    ...filter,\n    taskStatus\n  });\n  const query = getWorkRequestListByGroupStatus(opts);\n\n  try {\n    var _resp$workRequest_get11, _resp$workRequest_get12, _resp$workRequest_get13;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get11 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get11 === void 0 ? void 0 : (_resp$workRequest_get12 = _resp$workRequest_get11.getthelistofWorkRequests) === null || _resp$workRequest_get12 === void 0 ? void 0 : (_resp$workRequest_get13 = _resp$workRequest_get12.data) === null || _resp$workRequest_get13 === void 0 ? void 0 : _resp$workRequest_get13.GetWorkReqInfo) {\n      var _resp$workRequest_get14, _resp$workRequest_get15, _resp$workRequest_get16;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get14 = resp['workRequest_getWrkReqsBySts']) === null || _resp$workRequest_get14 === void 0 ? void 0 : (_resp$workRequest_get15 = _resp$workRequest_get14.getthelistofWorkRequests) === null || _resp$workRequest_get15 === void 0 ? void 0 : (_resp$workRequest_get16 = _resp$workRequest_get15.data) === null || _resp$workRequest_get16 === void 0 ? void 0 : _resp$workRequest_get16.GetWorkReqInfo;\n      return yield put(actions.workRequestV2.list.received(groupBy, value));\n    }\n\n    return yield put(actions.workRequestV2.list.requestFailed(groupBy));\n  } catch (e) {// return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n  }\n}\nexport function* requestWorkRequestActions({\n  status\n}) {\n  const query = getWorkRequestListActions({\n    status\n  });\n\n  try {\n    var _resp$workRequest_get17, _resp$workRequest_get18;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get17 = resp['workRequest_getlistOfAllowedActions']) === null || _resp$workRequest_get17 === void 0 ? void 0 : (_resp$workRequest_get18 = _resp$workRequest_get17.listOfAllowedActions) === null || _resp$workRequest_get18 === void 0 ? void 0 : _resp$workRequest_get18.data) {\n      var _resp$workRequest_get19, _resp$workRequest_get20;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get19 = resp['workRequest_getlistOfAllowedActions']) === null || _resp$workRequest_get19 === void 0 ? void 0 : (_resp$workRequest_get20 = _resp$workRequest_get19.listOfAllowedActions) === null || _resp$workRequest_get20 === void 0 ? void 0 : _resp$workRequest_get20.data;\n      return yield put(actions.workRequestV2.list.receivedActions(status, value));\n    }\n  } catch (e) {}\n}\nexport function* fetchNewWorkRequests({\n  groupBy,\n  status\n}) {\n  const {\n    pageNo\n  } = yield select(selectors.workRequestList, groupBy); // yield call(workRequestListRequest, { groupBy, status, pageNo: pageNo + 1 })\n}\nexport function* triggerAction({\n  groupBy,\n  actionFlag,\n  workrequestNo,\n  allSelected\n}) {\n  const arr = [];\n\n  if (!allSelected) {\n    arr.push({\n      actionFlag,\n      workrequestNo\n    });\n  } else {\n    const allWrNo = yield select(selectors.allWRItemSelected, groupBy);\n    allWrNo.forEach(wrNo => {\n      arr.push({\n        actionFlag,\n        workrequestNo: wrNo\n      });\n    });\n  }\n\n  const query = postWorkReqAction(arr);\n\n  try {\n    var _resp$workRequest_pos, _resp$workRequest_pos2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\"); //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_pos = resp['workRequest_postWrkReqs']) === null || _resp$workRequest_pos === void 0 ? void 0 : (_resp$workRequest_pos2 = _resp$workRequest_pos.processtheWorkRequestbasedontheActionTypeflag) === null || _resp$workRequest_pos2 === void 0 ? void 0 : _resp$workRequest_pos2.data) {\n      yield put(actions.workRequestV2.list.refresh(groupBy));\n    }\n  } catch (e) {\n    const [error] = e.response.errors || [];\n    let message = 'Something went wrong!';\n\n    try {\n      var _parsedErorMsg$;\n\n      const parsedErorMsg = JSON.parse(error.message);\n\n      if (parsedErorMsg === null || parsedErorMsg === void 0 ? void 0 : (_parsedErorMsg$ = parsedErorMsg[0]) === null || _parsedErorMsg$ === void 0 ? void 0 : _parsedErorMsg$.description) {\n        message = parsedErorMsg[0].description;\n      }\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    } // return yield put(actions.workflow.update.saveFailed(message));\n\n  }\n}\nexport const workRequestV2ListSagas = [takeLatest([actionTypes.WORK_REQUEST_V2.LIST.REQUEST, actionTypes.WORK_REQUEST_V2.LIST.REFRESH, actionTypes.WORK_REQUEST_V2.LIST.SET_FILTER, actionTypes.WORK_REQUEST_V2.LIST.REQUEST_NEXT_PAGE], workRequestListRequest), takeLatest([actionTypes.WORK_REQUEST_V2.LIST.UPDATE_TASK_STATUS], workRequestListTaskUpdate), takeLatest(actionTypes.WORK_REQUEST_V2.LIST.REQUEST_ACTIONS, requestWorkRequestActions), takeEvery(actionTypes.WORK_REQUEST_V2.LIST.TRIGGER_ACTION, triggerAction)];","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/workRequestV2/List/index.js"],"names":["call","put","select","takeEvery","takeLatest","apiCallWithRetry","actions","actionTypes","getWorkRequestListActions","getWorkRequestListByGroupStatus","getWorkRequestListCount","postWorkReqAction","selectors","getRequestObj","taskStatus","groupBy","subGroup","pageNo","isFilterSet","others","console","log","reportedBy","PlangroupCode","workGroup","Priority","locationCode","equipmentCode","WorkrequestOn","srchby","Category","obj","Actionflag","ReportedTimeCode","HiddenControl1","HiddenControl2","status","skip","workRequestListCount","filter","workRequestListObj","opts","Object","keys","length","query","resp","gCtxtCmp","hidden","gettheCountofWorkRequestsgroupedbyStatus","data","value","workRequestV2","list","receivedCount","workrequestcount","updateTaskStatus","hdn_card_code","e","workRequestListRequest","priorityCountObj","workRequestPriorityColor","dashboard","changeFilter","xyz","getthelistofWorkRequests","GetWorkReqInfo","received","requestFailed","workRequestListTaskUpdate","skipFetch","requestWorkRequestActions","listOfAllowedActions","receivedActions","fetchNewWorkRequests","workRequestList","triggerAction","actionFlag","workrequestNo","allSelected","arr","push","allWrNo","allWRItemSelected","forEach","wrNo","errors","parsedErrorJson","JSON","parse","message","processtheWorkRequestbasedontheActionTypeflag","refresh","error","response","parsedErorMsg","description","workRequestV2ListSagas","WORK_REQUEST_V2","LIST","REQUEST","REFRESH","SET_FILTER","REQUEST_NEXT_PAGE","UPDATE_TASK_STATUS","REQUEST_ACTIONS","TRIGGER_ACTION"],"mappings":"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","sourcesContent":["\nimport {\n  call,\n  put,\n  select,\n  takeEvery,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"../..\";\nimport actions from \"../../../actions\";\nimport actionTypes from \"../../../actions/types\";\nimport { getWorkRequestListActions } from \"../../../queries/workRequest/getWorkRequestListActions\";\nimport getWorkRequestListByGroupStatus from \"../../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWorkRequestListCount } from \"../../../queries/workRequest/getWorkRequestListCount\";\nimport { postWorkReqAction } from \"../../../queries/workRequest/postWorkReqAction\";\nimport { selectors } from \"../../../reducers\";\n\n\nfunction getRequestObj({ taskStatus, groupBy, subGroup, pageNo,isFilterSet, ...others }) {\n  console.log(\"isFilterSet\", isFilterSet)\n  const {\n    reportedBy = '',\n    PlangroupCode = '',\n    workGroup = '',\n    Priority = '',\n    locationCode = '',\n    equipmentCode = '',\n    WorkrequestOn = '',\n    srchby = '',\n    Category = '',\n  } = others ;\n  const obj = {}\n  if(isFilterSet){\n    obj.Actionflag = 'filter';\n  }\n  else if(taskStatus){\n    obj.Actionflag = 'status_click'\n    if(groupBy === 'RepDate'){\n      obj.ReportedTimeCode = subGroup;\n    } else if(groupBy === 'Priority'){\n      obj.Priority = subGroup;\n    }\n  }\n  else if (groupBy === 'Status') {\n    obj.Actionflag = 'Browse_Work_Requests_UI_Fetch'\n  }\n  else if (groupBy === 'Priority') {\n    obj.Actionflag = 'Priority_Filter';\n  }\n  else if (groupBy === 'RepDate') {\n    obj.Actionflag = 'ReportedDate_Filter';\n  }\n  obj.HiddenControl1 = groupBy;\n  obj.HiddenControl2 = subGroup;\n  obj.status = taskStatus;\n  obj.skip = pageNo;\n  obj.reportedBy = reportedBy;\n  obj.PlangroupCode = PlangroupCode;\n  obj.workGroup = workGroup;\n  obj.Category = Category;\n  if(!obj.Priority){\n    obj.Priority = Priority;\n  }\n  obj.locationCode = locationCode;\n  obj.equipmentCode = equipmentCode;\n  obj.WorkrequestOn = WorkrequestOn;\n  obj.srchby = srchby;\n  return obj;\n}\n\nexport function* workRequestListCount({ groupBy }) {\n  const { taskStatus, pageNo, filter = {}, subGroup } = yield select(selectors.workRequestListObj, groupBy);\n  const opts = getRequestObj({ groupBy, subGroup, pageNo, isFilterSet: Object?.keys?.(filter)?.length, ...filter });\n  const query = getWorkRequestListCount(opts);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data) {\n      const value = resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data;\n      yield put(actions.workRequestV2.list.receivedCount(groupBy, value));\n      if(!taskStatus && value.workrequestcount){\n        yield put(actions.workRequestV2.list.updateTaskStatus(groupBy, value.workrequestcount[0].hdn_card_code, true));\n      }\n      return;\n    }\n  } catch (e) {\n  }\n}\n\nexport function* workRequestListRequest({ groupBy }) {\n  if(groupBy === 'Priority'){\n    const priorityCountObj = yield select(selectors.workRequestPriorityColor);\n    if(!priorityCountObj){\n      yield put(actions.workRequestV2.dashboard.changeFilter(\"Priority\"));\n    }\n  }\n  const xyz = yield select(selectors.workRequestListObj, groupBy);\n  console.log(\"xyz\", xyz);\n  const { taskStatus, pageNo, filter = {}, subGroup } = xyz;\n  const isFilterSet = !!Object?.keys?.(filter)?.length\n\n  let opts = {}\n  if(isFilterSet){\n    yield call(workRequestListCount, {groupBy, isFilterSet});\n    opts = getRequestObj({ groupBy, subGroup, pageNo, ...filter, taskStatus, isFilterSet });\n  }\n  else if(!subGroup || (subGroup && taskStatus !== subGroup)){\n    yield call(workRequestListCount, {groupBy, isFilterSet});\n    opts = getRequestObj({ groupBy, subGroup, pageNo, ...filter, isFilterSet });\n  }\n  else {\n    opts = getRequestObj({ groupBy, subGroup, pageNo, ...filter, taskStatus, isFilterSet });\n  }\n\n  const query = getWorkRequestListByGroupStatus(opts);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo) {\n      const value = resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo;\n      return yield put(actions.workRequestV2.list.received(groupBy, value));\n    }\n    yield put(actions.workRequestV2.list.requestFailed(groupBy));\n    return;\n  } catch (e) {\n    // return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n  }\n}\nexport function* workRequestListTaskUpdate({ groupBy, skipFetch }) {\n  if(skipFetch){\n    return;\n  }\n\n  const { taskStatus, pageNo, filter = {}, subGroup } = yield select(selectors.workRequestListObj, groupBy);\n  const isFilterSet = Object?.keys?.(filter)?.length\n  const opts = getRequestObj({ groupBy, subGroup, pageNo, isFilterSet, ...filter, taskStatus });\n  const query = getWorkRequestListByGroupStatus(opts);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo) {\n      const value = resp?.['workRequest_getWrkReqsBySts']?.getthelistofWorkRequests?.data?.GetWorkReqInfo;\n      return yield put(actions.workRequestV2.list.received(groupBy, value));\n    }\n    return yield put(actions.workRequestV2.list.requestFailed(groupBy));\n\n  } catch (e) {\n    // return yield put(actions.workRequestV2.list.requestFailed(groupBy, status));\n  }\n}\n\nexport function* requestWorkRequestActions({ status }) {\n  const query = getWorkRequestListActions({ status });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getlistOfAllowedActions']?.listOfAllowedActions?.data) {\n      const value = resp?.['workRequest_getlistOfAllowedActions']?.listOfAllowedActions?.data\n      return yield put(actions.workRequestV2.list.receivedActions(status, value));\n    }\n  } catch (e) {\n  }\n}\n\nexport function* fetchNewWorkRequests({ groupBy, status }) {\n  const { pageNo } = yield select(selectors.workRequestList, groupBy);\n  // yield call(workRequestListRequest, { groupBy, status, pageNo: pageNo + 1 })\n}\n\nexport function* triggerAction({ groupBy, actionFlag, workrequestNo, allSelected }) {\n  const arr = [];\n  if(!allSelected){\n    arr.push({\n      actionFlag,\n      workrequestNo\n    });\n  }\n  else {\n    const allWrNo = yield select(selectors.allWRItemSelected, groupBy);\n    allWrNo.forEach(wrNo => {\n      arr.push({\n        actionFlag,\n        workrequestNo: wrNo\n      });\n    })\n  }\n  const query = postWorkReqAction(arr);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      //something went wrong\n      // return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n    if (resp?.['workRequest_postWrkReqs']?.processtheWorkRequestbasedontheActionTypeflag?.data) {\n      yield put(actions.workRequestV2.list.refresh(groupBy));\n    }\n\n  } catch (e) {\n    const [error] = e.response.errors || [];\n    let message = 'Something went wrong!';\n    try {\n      const parsedErorMsg = JSON.parse(error.message);\n      if (parsedErorMsg?.[0]?.description) {\n        message = parsedErorMsg[0].description;\n      }\n\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n    // return yield put(actions.workflow.update.saveFailed(message));\n  }\n}\n\n\n\nexport const workRequestV2ListSagas = [\n  takeLatest([\n    actionTypes.WORK_REQUEST_V2.LIST.REQUEST,\n    actionTypes.WORK_REQUEST_V2.LIST.REFRESH,\n    actionTypes.WORK_REQUEST_V2.LIST.SET_FILTER,\n    actionTypes.WORK_REQUEST_V2.LIST.REQUEST_NEXT_PAGE\n  ], workRequestListRequest),\n  takeLatest([\n    actionTypes.WORK_REQUEST_V2.LIST.UPDATE_TASK_STATUS,\n  ], workRequestListTaskUpdate),\n  takeLatest(actionTypes.WORK_REQUEST_V2.LIST.REQUEST_ACTIONS, requestWorkRequestActions),\n  takeEvery(actionTypes.WORK_REQUEST_V2.LIST.TRIGGER_ACTION, triggerAction),\n];\n"]},"metadata":{},"sourceType":"module"}