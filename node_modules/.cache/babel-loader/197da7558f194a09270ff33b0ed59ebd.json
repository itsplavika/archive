{"ast":null,"code":"import produce from 'immer';\nimport actionTypes from '../../actions/types';\nimport { deepClone } from 'fast-json-patch';\n\nconst reducer = (state = {}, action) => {\n  const {\n    type,\n    value,\n    defaultValues,\n    filesMainRef,\n    filesIndividualRef,\n    relativePath,\n    fieldId,\n    file,\n    fileId,\n    name,\n    errMsg,\n    eqpOrLoc,\n    eqpLocCode\n  } = action;\n  return produce(state, draft => {\n    var _draft$workOrder, _draft$workOrder$valu, _draft$workOrder$valu2, _draft$workOrder2;\n\n    switch (type) {\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.REQUEST:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n\n        draft.workOrderItems.status = 'requested';\n        break;\n\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.RECEIVED:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n\n        if (!draft.defaultValues) {\n          draft.defaultValues = {};\n        }\n\n        draft.workOrderItems.status = 'success';\n        Object.assign(draft.workOrderItems, value);\n        Object.assign(draft.defaultValues, defaultValues);\n        break;\n\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.FAILED:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n\n        draft.workOrderItems.status = 'failed';\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.INIT_SUCCESS:\n        if (!draft.workOrder) {\n          draft.workOrder = {};\n        }\n\n        draft.workOrder.value = value;\n        draft.workOrder.initValue = deepClone(value);\n        draft.workOrder.status = 'success';\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.PATCH_FIELD:\n        if (draft.workOrder) {\n          draft.workOrder.value[fieldId] = value;\n        }\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.SAVE:\n        draft.workOrder.saveStatus = 'saving';\n        delete draft.workOrder.saveErrorMsg;\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.SAVE_SUCCESS:\n        draft.workOrder.saveStatus = 'completed';\n        draft.workOrder.workOrderNo = value;\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.SAVE_FAILED:\n        draft.workOrder.saveStatus = 'failed';\n        draft.workOrder.saveErrorMsg = errMsg;\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.CLEAR_MSG:\n        delete draft.workOrder.saveErrorMsg;\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.CLEAN:\n        delete draft.workOrder;\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT_SUCCESS:\n        if (draft.workOrder) {\n          const item = draft.workOrder.value.fileList.find(i => i.uiName === name);\n\n          if (item) {\n            item.filesMainRef = filesMainRef;\n            item.filesIndividualRef = filesIndividualRef;\n            item.relativePath = relativePath;\n            item.name = name;\n            item.status = 'UPLOADED';\n          } // draft.workOrder.value.fileList.push({fileId, name})\n\n        }\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT:\n        if (draft.workOrder) {\n          if (!draft.workOrder.value.fileList) {\n            draft.workOrder.value.fileList = [];\n          }\n\n          draft.workOrder.value.fileList.push({\n            uiName: file.name,\n            type: file.type,\n            status: 'UPLOADING'\n          });\n        }\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.REMOVE_ATTACHMENT:\n        if (draft.workOrder) {\n          const item = draft.workOrder.value.fileList.find(i => i.filesIndividualRef === filesIndividualRef);\n\n          if (item) {\n            item.status = 'DELETED';\n          } // draft.workOrder.value.fileList.push({fileId, name})\n\n        }\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT_FAILED:\n        if (draft === null || draft === void 0 ? void 0 : (_draft$workOrder = draft.workOrder) === null || _draft$workOrder === void 0 ? void 0 : (_draft$workOrder$valu = _draft$workOrder.value) === null || _draft$workOrder$valu === void 0 ? void 0 : (_draft$workOrder$valu2 = _draft$workOrder$valu.fileList) === null || _draft$workOrder$valu2 === void 0 ? void 0 : _draft$workOrder$valu2.length) {\n          const clonedFileSet = deepClone(draft.workOrder.value.fileList);\n          const newFileList = clonedFileSet.filter(i => i.uiName !== name);\n          draft.workOrder.value.fileList = newFileList;\n          draft.workOrder.value.fileListError = \"Failed to Upload\";\n        }\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.PARENT_LIST_ITEM.RECEIVED:\n        if (!((_draft$workOrder2 = draft.workOrder) === null || _draft$workOrder2 === void 0 ? void 0 : _draft$workOrder2.parentListItems)) {\n          draft.workOrder.parentListItems = {};\n        }\n\n        draft.workOrder.parentListItems[`${eqpOrLoc}-${eqpLocCode}`] = value;\n        break;\n\n      default:\n    }\n  });\n};\n\nexport default reducer;\nconst emptyObj = {};\nexport const selectors = {};\n\nselectors.workOrder = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workOrder || emptyObj;\n};\n\nselectors.workOrderItems = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workOrderItems || emptyObj;\n};\n\nselectors.workOrderDefaultValues = state => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.defaultValues || emptyObj;\n};\n\nselectors.workOrderParentList = (state, {\n  eqpLocCode,\n  eqpOrLoc\n}) => {\n  var _state$workOrder, _state$workOrder$pare;\n\n  return state === null || state === void 0 ? void 0 : (_state$workOrder = state.workOrder) === null || _state$workOrder === void 0 ? void 0 : (_state$workOrder$pare = _state$workOrder.parentListItems) === null || _state$workOrder$pare === void 0 ? void 0 : _state$workOrder$pare[`${eqpOrLoc}-${eqpLocCode}`];\n};","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/reducers/workOrder/index.js"],"names":["produce","actionTypes","deepClone","reducer","state","action","type","value","defaultValues","filesMainRef","filesIndividualRef","relativePath","fieldId","file","fileId","name","errMsg","eqpOrLoc","eqpLocCode","draft","WORK_ORDER","COMBO_ITEMS","REQUEST","workOrderItems","status","RECEIVED","Object","assign","FAILED","UPDATE","INIT_SUCCESS","workOrder","initValue","PATCH_FIELD","SAVE","saveStatus","saveErrorMsg","SAVE_SUCCESS","workOrderNo","SAVE_FAILED","CLEAR_MSG","CLEAN","ADD_ATTACHMENT_SUCCESS","item","fileList","find","i","uiName","ADD_ATTACHMENT","push","REMOVE_ATTACHMENT","ADD_ATTACHMENT_FAILED","length","clonedFileSet","newFileList","filter","fileListError","PARENT_LIST_ITEM","parentListItems","emptyObj","selectors","workOrderDefaultValues","workOrderParentList"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport actionTypes from '../../actions/types'\nimport { deepClone } from 'fast-json-patch';\n\nconst reducer = (state = {}, action) => {\n  const { type, value, defaultValues, filesMainRef, filesIndividualRef, relativePath, fieldId, file, fileId, name, errMsg, eqpOrLoc, eqpLocCode } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.REQUEST:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n        draft.workOrderItems.status = 'requested';\n        break;\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.RECEIVED:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n        if (!draft.defaultValues) {\n          draft.defaultValues = {};\n        }\n        draft.workOrderItems.status = 'success';\n        Object.assign(draft.workOrderItems, value)\n        Object.assign(draft.defaultValues, defaultValues)\n        break;\n      case actionTypes.WORK_ORDER.COMBO_ITEMS.FAILED:\n        if (!draft.workOrderItems) {\n          draft.workOrderItems = {};\n        }\n        draft.workOrderItems.status = 'failed';\n\n        break;\n\n      case actionTypes.WORK_ORDER.UPDATE.INIT_SUCCESS:\n        if (!draft.workOrder) {\n          draft.workOrder = {};\n        }\n        draft.workOrder.value = value;\n        draft.workOrder.initValue = deepClone(value);\n        draft.workOrder.status = 'success';\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.PATCH_FIELD:\n        if (draft.workOrder) {\n          draft.workOrder.value[fieldId] = value;\n        }\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.SAVE:\n        draft.workOrder.saveStatus = 'saving';\n        delete draft.workOrder.saveErrorMsg;\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.SAVE_SUCCESS:\n        draft.workOrder.saveStatus = 'completed';\n        draft.workOrder.workOrderNo = value;\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.SAVE_FAILED:\n        draft.workOrder.saveStatus = 'failed';\n        draft.workOrder.saveErrorMsg = errMsg;\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.CLEAR_MSG:\n        delete draft.workOrder.saveErrorMsg;\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.CLEAN:\n        delete draft.workOrder;\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT_SUCCESS:\n        if (draft.workOrder) {\n          const item = draft.workOrder.value.fileList.find(i => i.uiName === name);\n          if (item) {\n            item.filesMainRef = filesMainRef;\n            item.filesIndividualRef = filesIndividualRef;\n            item.relativePath = relativePath;\n\n            item.name = name;\n            item.status = 'UPLOADED'\n          }\n          // draft.workOrder.value.fileList.push({fileId, name})\n        }\n\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT:\n        if (draft.workOrder) {\n          if (!draft.workOrder.value.fileList) {\n            draft.workOrder.value.fileList = [];\n          }\n          draft.workOrder.value.fileList.push({ uiName: file.name, type: file.type, status: 'UPLOADING' })\n        }\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.REMOVE_ATTACHMENT:\n        if (draft.workOrder) {\n          const item = draft.workOrder.value.fileList.find(i => i.filesIndividualRef === filesIndividualRef);\n          if (item) {\n            item.status = 'DELETED'\n          }\n          // draft.workOrder.value.fileList.push({fileId, name})\n        }\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.ADD_ATTACHMENT_FAILED:\n        if (draft?.workOrder?.value?.fileList?.length) {\n          const clonedFileSet = deepClone(draft.workOrder.value.fileList);\n          const newFileList = clonedFileSet.filter(i => i.uiName !== name);\n          draft.workOrder.value.fileList = newFileList;\n          draft.workOrder.value.fileListError = \"Failed to Upload\";\n        }\n        break;\n      case actionTypes.WORK_ORDER.UPDATE.PARENT_LIST_ITEM.RECEIVED:\n        if (!draft.workOrder?.parentListItems) {\n          draft.workOrder.parentListItems = {};\n        }\n        draft.workOrder.parentListItems[`${eqpOrLoc}-${eqpLocCode}`] = value;\n        break;\n      default:\n    }\n  })\n}\n\nexport default reducer;\nconst emptyObj = {};\nexport const selectors = {};\nselectors.workOrder = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workOrder || emptyObj;\n};\n\nselectors.workOrderItems = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.workOrderItems || emptyObj;\n};\nselectors.workOrderDefaultValues = (state) => {\n  if (!state) {\n    return emptyObj;\n  }\n\n  return state.defaultValues || emptyObj;\n};\n\nselectors.workOrderParentList = (state, { eqpLocCode, eqpOrLoc }) => {\n  return state?.workOrder?.parentListItems?.[`${eqpOrLoc}-${eqpLocCode}`];\n};\n"]},"metadata":{},"sourceType":"module"}