{"ast":null,"code":"import { call, put, select, takeLatest } from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"..\";\nimport actions from \"../../actions\";\nimport actionTypes from \"../../actions/types\";\nimport { selectors } from \"../../reducers\";\nimport { getEqpLocDetails } from \"../../queries/workRequest/getEqpLocDetails\";\nimport { getListofEqpWithLocDetails } from \"../../queries/workRequest/getListofEqpWithLocDetails\";\nimport { getEqpMetaDataTreeView } from \"../../queries/workRequest/getEqpMetaDataTreeView\";\nimport { getPlanningMetaData } from \"../../queries/workRequest/getPlanningMetaData\";\nexport function* requestEquipmentLocations({\n  eqpOrLoc,\n  eqpLocCode,\n  eqpLocDesc\n}) {\n  const {\n    itemTextList: existingTextList = []\n  } = yield select(selectors.equipmentLocations, eqpOrLoc) || {};\n\n  if (existingTextList.indexOf(eqpLocCode) !== -1) {\n    return;\n  }\n\n  const query = getEqpLocDetails({\n    EqporLoc: eqpOrLoc,\n    EqpLocCode: eqpLocCode,\n    eqpLocDesc: eqpLocDesc\n  });\n\n  try {\n    var _resp$location_getEqp, _resp$location_getEqp2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      gCtxtCmp: 'location',\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$location_getEqp = resp['location_getEqpLocDet']) === null || _resp$location_getEqp === void 0 ? void 0 : (_resp$location_getEqp2 = _resp$location_getEqp.getEquipmentLocationDetails) === null || _resp$location_getEqp2 === void 0 ? void 0 : _resp$location_getEqp2.data) {\n      const locationsTmp = resp['location_getEqpLocDet'].getEquipmentLocationDetails.data || []; // const {items: existingLocations= []} = yield select(selectors.equipmentLocations, eqpOrLoc) || {};\n      // const locationsToAdd = locationsTmp.filter(l => existingLocations?.indexOf(el => el.EqpLocCode === l.EqpLocCode) === -1)\n\n      return yield put(actions.equipmentLocations.received({\n        eqpLocCode,\n        eqpOrLoc,\n        value: locationsTmp\n      }));\n    }\n  } catch (e) {\n    return yield put(actions.equipmentLocations.failed({\n      eqpOrLoc\n    }));\n  }\n}\nexport function* requestMapLocations({\n  eqpOrLoc,\n  lat,\n  lng\n}) {\n  const query = getListofEqpWithLocDetails({\n    currentLat: lat,\n    currentLong: lng,\n    eqpOrLoc\n  });\n\n  try {\n    var _resp$workRequest_get, _resp$workRequest_get2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get = resp['workRequest_getListofEqpWithLocDetails']) === null || _resp$workRequest_get === void 0 ? void 0 : (_resp$workRequest_get2 = _resp$workRequest_get.getthelistofEquipmentswiththeirGeolocationdetails) === null || _resp$workRequest_get2 === void 0 ? void 0 : _resp$workRequest_get2.data) {\n      const {\n        defaultCenterInformation,\n        defaultZoominformation,\n        markersInformation,\n        wayPointsInformation\n      } = resp['workRequest_getListofEqpWithLocDetails'].getthelistofEquipmentswiththeirGeolocationdetails.data || {};\n      return yield put(actions.equipmentLocations.mapLocations.received({\n        defaultCenterInformation,\n        defaultZoominformation,\n        markersInformation,\n        wayPointsInformation\n      }));\n    }\n  } catch (e) {}\n}\nexport function* requestGroupEqpAndLoc({\n  wrkGrpCode,\n  eqpLocCode,\n  parentEqpCode\n}) {\n  const query = getEqpMetaDataTreeView({\n    EqpLocCode: eqpLocCode,\n    wrkGrpCode: wrkGrpCode,\n    ParentEqpCode: parentEqpCode\n  });\n\n  try {\n    var _resp$workRequest_get3;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get3 = resp['workRequest_getEqpMetaData']) === null || _resp$workRequest_get3 === void 0 ? void 0 : _resp$workRequest_get3.getEqpMetaData) {\n      var _resp$workRequest_get4;\n\n      const data = ((_resp$workRequest_get4 = resp['workRequest_getEqpMetaData']) === null || _resp$workRequest_get4 === void 0 ? void 0 : _resp$workRequest_get4.getEqpMetaData) || [];\n      return yield put(actions.equipmentLocations.groupEqpAndLoc.received({\n        wrkGrpCode,\n        eqpLocCode,\n        parentEqpCode,\n        value: data\n      }));\n    }\n  } catch (e) {}\n}\nexport function* requestLocationPlanningMetadata({\n  planningGrpCode,\n  parentCode\n}) {\n  const query = getPlanningMetaData({\n    PlanningGrpCode: planningGrpCode,\n    ParentCode: parentCode\n  });\n\n  try {\n    var _resp$workRequest_get5;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get5 = resp['workRequest_getPlanningMetaData']) === null || _resp$workRequest_get5 === void 0 ? void 0 : _resp$workRequest_get5.getPlanningMetaData) {\n      var _resp$workRequest_get6;\n\n      const data = ((_resp$workRequest_get6 = resp['workRequest_getPlanningMetaData']) === null || _resp$workRequest_get6 === void 0 ? void 0 : _resp$workRequest_get6.getPlanningMetaData) || [];\n      return yield put(actions.equipmentLocations.planningGroup.received({\n        planningGrpCode,\n        parentCode,\n        value: data\n      }));\n    }\n  } catch (e) {}\n}\nexport const equipmentLocationsSagas = [// takeLatest(actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST, workflowLoadItems),\n// takeLatest(actionTypes.WORKFLOW.UPDATE.INIT, workflowUpdateInit),\ntakeLatest(actionTypes.EQUIPMENT_LOCATIONS.REQUEST, requestEquipmentLocations), takeLatest(actionTypes.EQUIPMENT_LOCATIONS.MAP_LOCATIONS.REQUEST, requestMapLocations), takeLatest(actionTypes.EQUIPMENT_LOCATIONS.GROUP_EQP_AND_LOC.REQUEST, requestGroupEqpAndLoc), takeLatest(actionTypes.EQUIPMENT_LOCATIONS.PLANNING_GROUP.REQUEST, requestLocationPlanningMetadata)];","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/equipmentLocations/index.js"],"names":["call","put","select","takeLatest","apiCallWithRetry","actions","actionTypes","selectors","getEqpLocDetails","getListofEqpWithLocDetails","getEqpMetaDataTreeView","getPlanningMetaData","requestEquipmentLocations","eqpOrLoc","eqpLocCode","eqpLocDesc","itemTextList","existingTextList","equipmentLocations","indexOf","query","EqporLoc","EqpLocCode","resp","opts","gCtxtCmp","hidden","getEquipmentLocationDetails","data","locationsTmp","received","value","e","failed","requestMapLocations","lat","lng","currentLat","currentLong","getthelistofEquipmentswiththeirGeolocationdetails","defaultCenterInformation","defaultZoominformation","markersInformation","wayPointsInformation","mapLocations","requestGroupEqpAndLoc","wrkGrpCode","parentEqpCode","ParentEqpCode","getEqpMetaData","groupEqpAndLoc","requestLocationPlanningMetadata","planningGrpCode","parentCode","PlanningGrpCode","ParentCode","planningGroup","equipmentLocationsSagas","EQUIPMENT_LOCATIONS","REQUEST","MAP_LOCATIONS","GROUP_EQP_AND_LOC","PLANNING_GROUP"],"mappings":"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","sourcesContent":["\nimport {\n  call,\n  put,\n  select,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"..\";\nimport actions from \"../../actions\";\nimport actionTypes from \"../../actions/types\";\nimport { selectors } from \"../../reducers\";\nimport { getEqpLocDetails } from \"../../queries/workRequest/getEqpLocDetails\";\nimport { getListofEqpWithLocDetails } from \"../../queries/workRequest/getListofEqpWithLocDetails\";\nimport { getEqpMetaDataTreeView } from \"../../queries/workRequest/getEqpMetaDataTreeView\";\nimport { getPlanningMetaData } from \"../../queries/workRequest/getPlanningMetaData\"\nexport function* requestEquipmentLocations({ eqpOrLoc, eqpLocCode, eqpLocDesc }) {\n  const { itemTextList: existingTextList = [] } = yield select(selectors.equipmentLocations, eqpOrLoc) || {};\n  if (existingTextList.indexOf(eqpLocCode) !== -1) {\n    return;\n  }\n  const query = getEqpLocDetails({\n    EqporLoc: eqpOrLoc,\n    EqpLocCode: eqpLocCode,\n    eqpLocDesc: eqpLocDesc,\n  });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      gCtxtCmp: 'location',\n      query: query,\n      hidden: true,\n    })\n    if (resp?.['location_getEqpLocDet']?.getEquipmentLocationDetails?.data) {\n      const locationsTmp = resp['location_getEqpLocDet'].getEquipmentLocationDetails.data || [];\n      // const {items: existingLocations= []} = yield select(selectors.equipmentLocations, eqpOrLoc) || {};\n      // const locationsToAdd = locationsTmp.filter(l => existingLocations?.indexOf(el => el.EqpLocCode === l.EqpLocCode) === -1)\n      return yield put(actions.equipmentLocations.received({ eqpLocCode, eqpOrLoc, value: locationsTmp }));\n    }\n\n  } catch (e) {\n    return yield put(actions.equipmentLocations.failed({ eqpOrLoc }));\n  }\n}\n\nexport function* requestMapLocations({ eqpOrLoc, lat, lng }) {\n  const query = getListofEqpWithLocDetails({\n    currentLat: lat,\n    currentLong: lng,\n    eqpOrLoc\n  });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.['workRequest_getListofEqpWithLocDetails']?.getthelistofEquipmentswiththeirGeolocationdetails?.data) {\n      const { defaultCenterInformation, defaultZoominformation, markersInformation, wayPointsInformation } = resp['workRequest_getListofEqpWithLocDetails'].getthelistofEquipmentswiththeirGeolocationdetails.data || {}\n      return yield put(actions.equipmentLocations.mapLocations.received({\n        defaultCenterInformation,\n        defaultZoominformation,\n        markersInformation,\n        wayPointsInformation\n      }));\n    }\n\n  } catch (e) {\n  }\n}\n\nexport function* requestGroupEqpAndLoc({ wrkGrpCode, eqpLocCode, parentEqpCode }) {\n  const query = getEqpMetaDataTreeView({\n    EqpLocCode: eqpLocCode,\n    wrkGrpCode: wrkGrpCode,\n    ParentEqpCode: parentEqpCode\n  });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.['workRequest_getEqpMetaData']?.getEqpMetaData) {\n      const data = resp['workRequest_getEqpMetaData']?.getEqpMetaData || [];\n\n      return yield put(actions.equipmentLocations.groupEqpAndLoc.received({\n        wrkGrpCode,\n        eqpLocCode,\n        parentEqpCode,\n        value: data\n      }));\n    }\n\n  } catch (e) {\n  }\n}\n\nexport function* requestLocationPlanningMetadata({ planningGrpCode, parentCode }) {\n  const query = getPlanningMetaData({\n    PlanningGrpCode: planningGrpCode,\n    ParentCode: parentCode,\n  });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.['workRequest_getPlanningMetaData']?.getPlanningMetaData) {\n      const data = resp['workRequest_getPlanningMetaData']?.getPlanningMetaData || [];\n\n      return yield put(actions.equipmentLocations.planningGroup.received({\n        planningGrpCode,\n        parentCode,\n        value: data\n      }));\n    }\n\n  } catch (e) {\n  }\n}\n\nexport const equipmentLocationsSagas = [\n  // takeLatest(actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST, workflowLoadItems),\n  // takeLatest(actionTypes.WORKFLOW.UPDATE.INIT, workflowUpdateInit),\n  takeLatest(actionTypes.EQUIPMENT_LOCATIONS.REQUEST, requestEquipmentLocations),\n  takeLatest(actionTypes.EQUIPMENT_LOCATIONS.MAP_LOCATIONS.REQUEST, requestMapLocations),\n  takeLatest(actionTypes.EQUIPMENT_LOCATIONS.GROUP_EQP_AND_LOC.REQUEST, requestGroupEqpAndLoc),\n  takeLatest(actionTypes.EQUIPMENT_LOCATIONS.PLANNING_GROUP.REQUEST, requestLocationPlanningMetadata),\n];\n"]},"metadata":{},"sourceType":"module"}