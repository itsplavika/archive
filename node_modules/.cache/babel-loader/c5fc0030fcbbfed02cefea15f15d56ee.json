{"ast":null,"code":"import ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nexport function doReactXTemplate() {\n  var Template = Ext.define(null, {\n    extend: 'Ext.Template',\n    constructor: function constructor(fn) {\n      this.fn = fn;\n    },\n    apply: function apply(values) {\n      return ReactDOMServer.renderToStaticMarkup(this.fn(values));\n    },\n    doInsert: function doInsert(where, el, values, returnElement) {\n      var target = this.getCachedTarget();\n      this.doRender(values, target);\n      var dom = target.firstChild;\n      var result = Ext.dom.Helper.doInsert(el, dom, returnElement, where);\n      this.unmountChildrenOnRemove(dom);\n      return result;\n    },\n    overwrite: function overwrite(el, values, returnElement) {\n      var dom = Ext.getDom(el);\n      var result = this.doRender(values, dom);\n      this.unmountChildrenOnRemove(dom);\n      return returnElement ? new Ext.Element(dom) : dom;\n    },\n    getCachedTarget: function getCachedTarget() {\n      if (!this.cachedTarget) this.cachedTarget = document.createElement('div');\n      return this.cachedTarget;\n    },\n    doRender: function doRender(values, target) {\n      var reactElement = this.fn(values);\n      ReactDOM.render(reactElement, target);\n      return target.firstChild;\n    },\n    unmountChildrenOnRemove: function unmountChildrenOnRemove(target) {\n      var parent = target.parentNode;\n      var parentKey = '$extreactObserveRemoveChild';\n      var targetKey = '$extreactUnmountOnRemove';\n      target[targetKey] = true; // we tag the target with $extreactUnmountOnRemove so we know it has a React tree to unmount when removed\n\n      if (!parent[parentKey]) {\n        // we tag the parent with $extreactObserveRemoveChild so we can ensure we are only observing it once\n        parent[parentKey] = true;\n        var observer = new MutationObserver(function (mutations) {\n          mutations.forEach(function (_ref) {\n            var removedNodes = _ref.removedNodes;\n\n            for (var i = 0; i < removedNodes.length; i++) {\n              var node = removedNodes[i];\n\n              if (node[targetKey]) {\n                ReactDOM.unmountComponentAtNode(node); // Unmount the React tree when the target dom node is removed.\n              }\n            }\n          });\n        });\n        observer.observe(parent, {\n          childList: true\n        });\n      }\n    }\n  });\n  var getTpl = Ext.XTemplate.getTpl;\n  var originalGet = Ext.XTemplate.get;\n\n  Ext.XTemplate.get = function (fn) {\n    if (typeof fn === 'function') {\n      return new Template(fn);\n    } else {\n      return originalGet.apply(Ext.XTemplate, arguments);\n    }\n  };\n\n  Ext.XTemplate.getTpl = function () {\n    return getTpl.apply(Ext.XTemplate, arguments);\n  };\n}","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/node_modules/@sencha/ext-react-modern/dist/overrides/ReactXTemplate.js"],"names":["ReactDOM","ReactDOMServer","doReactXTemplate","Template","Ext","define","extend","constructor","fn","apply","values","renderToStaticMarkup","doInsert","where","el","returnElement","target","getCachedTarget","doRender","dom","firstChild","result","Helper","unmountChildrenOnRemove","overwrite","getDom","Element","cachedTarget","document","createElement","reactElement","render","parent","parentNode","parentKey","targetKey","observer","MutationObserver","mutations","forEach","_ref","removedNodes","i","length","node","unmountComponentAtNode","observe","childList","getTpl","XTemplate","originalGet","get","arguments"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nexport function doReactXTemplate() {\n  var Template = Ext.define(null, {\n    extend: 'Ext.Template',\n    constructor: function constructor(fn) {\n      this.fn = fn;\n    },\n    apply: function apply(values) {\n      return ReactDOMServer.renderToStaticMarkup(this.fn(values));\n    },\n    doInsert: function doInsert(where, el, values, returnElement) {\n      var target = this.getCachedTarget();\n      this.doRender(values, target);\n      var dom = target.firstChild;\n      var result = Ext.dom.Helper.doInsert(el, dom, returnElement, where);\n      this.unmountChildrenOnRemove(dom);\n      return result;\n    },\n    overwrite: function overwrite(el, values, returnElement) {\n      var dom = Ext.getDom(el);\n      var result = this.doRender(values, dom);\n      this.unmountChildrenOnRemove(dom);\n      return returnElement ? new Ext.Element(dom) : dom;\n    },\n    getCachedTarget: function getCachedTarget() {\n      if (!this.cachedTarget) this.cachedTarget = document.createElement('div');\n      return this.cachedTarget;\n    },\n    doRender: function doRender(values, target) {\n      var reactElement = this.fn(values);\n      ReactDOM.render(reactElement, target);\n      return target.firstChild;\n    },\n    unmountChildrenOnRemove: function unmountChildrenOnRemove(target) {\n      var parent = target.parentNode;\n      var parentKey = '$extreactObserveRemoveChild';\n      var targetKey = '$extreactUnmountOnRemove';\n      target[targetKey] = true; // we tag the target with $extreactUnmountOnRemove so we know it has a React tree to unmount when removed\n\n      if (!parent[parentKey]) {\n        // we tag the parent with $extreactObserveRemoveChild so we can ensure we are only observing it once\n        parent[parentKey] = true;\n        var observer = new MutationObserver(function (mutations) {\n          mutations.forEach(function (_ref) {\n            var removedNodes = _ref.removedNodes;\n\n            for (var i = 0; i < removedNodes.length; i++) {\n              var node = removedNodes[i];\n\n              if (node[targetKey]) {\n                ReactDOM.unmountComponentAtNode(node); // Unmount the React tree when the target dom node is removed.\n              }\n            }\n          });\n        });\n        observer.observe(parent, {\n          childList: true\n        });\n      }\n    }\n  });\n  var getTpl = Ext.XTemplate.getTpl;\n  var originalGet = Ext.XTemplate.get;\n\n  Ext.XTemplate.get = function (fn) {\n    if (typeof fn === 'function') {\n      return new Template(fn);\n    } else {\n      return originalGet.apply(Ext.XTemplate, arguments);\n    }\n  };\n\n  Ext.XTemplate.getTpl = function () {\n    return getTpl.apply(Ext.XTemplate, arguments);\n  };\n}"]},"metadata":{},"sourceType":"module"}