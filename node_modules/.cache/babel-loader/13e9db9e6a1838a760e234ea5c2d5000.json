{"ast":null,"code":"import ReactDOM from 'react-dom';\nexport function doReactCell() {\n  Ext.define('Ext.ReactCell', {\n    extend: 'Ext.grid.cell.Base',\n    xtype: 'reactcell',\n    config: {\n      renderer: null,\n      summaryRenderer: null,\n      forceWidth: true\n    },\n    setValue: function setValue(value) {\n      var me = this,\n          context = me.refreshContext,\n          column = context.column,\n          needsSizing = false,\n          scope = column.getScope(),\n          markup,\n          renderer,\n          result;\n\n      if (context.summary) {\n        renderer = me.getSummaryRenderer() || column.getSummaryRenderer();\n      }\n\n      renderer = renderer || me.getRenderer() || column.getRenderer();\n\n      if (renderer) {\n        markup = renderer.call(scope, value, context.record, context.dataIndex, me, column);\n\n        if (typeof markup === 'object') {\n          result = ReactDOM.render(markup, me.bodyElement.dom);\n\n          if (result == null) {//markup.type.prototype.rootDOM =  me.bodyElement.dom\n          } else {\n            if (result.cmp != undefined) {\n              result.cmp.setRenderTo(me.bodyElement.dom);\n            }\n\n            if (result.isWidget) {\n              needsSizing = result !== me.widget;\n              me.widget = result;\n            }\n          }\n        } else {\n          if (markup == null) {\n            markup = '';\n          }\n\n          Ext.dom.Helper.overwrite(me.bodyElement, Ext.htmlEncode(markup.toString()));\n          me.widget = null;\n        }\n\n        if (needsSizing && me.getForceWidth()) {\n          me.setWidgetWidth(me.getWidth());\n        }\n      }\n\n      return me;\n    },\n    updateWidth: function updateWidth(width, oldWidth) {\n      //this.callParent(arguments);\n      var el = this.el;\n      el.setWidth(width);\n      el.toggleCls(this.widthedCls, width != null && width !== 'auto');\n\n      if (this.getForceWidth()) {\n        this.setWidgetWidth(width);\n      }\n    },\n    doDestroy: function doDestroy() {\n      ReactDOM.unmountComponentAtNode(this.bodyElement.dom);\n      this.setColumn(null);\n      this.setRecord(null);\n      var el = document.getElementById(this.id);\n\n      if (el != undefined) {\n        if (el != null) {\n          el.parentNode.removeChild(el);\n        }\n      }\n    },\n    privates: {\n      setWidgetWidth: function setWidgetWidth(width) {\n        var me = this,\n            el = me.bodyElement,\n            widget,\n            column,\n            leftPad,\n            rightPad;\n\n        if (!me.rendered) {\n          return;\n        }\n\n        widget = me.widget;\n\n        if (widget) {\n          column = me.getColumn();\n          leftPad = parseInt(column.getCachedStyle(el, 'padding-left'), 10) || 0;\n          rightPad = parseInt(column.getCachedStyle(el, 'padding-right'), 10) || 0; // Give the widget a reference to ourself to allow it to do extra measuring\n\n          widget.measurer = column;\n          widget.setWidth(width - leftPad - rightPad);\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/node_modules/@sencha/ext-react-modern/dist/overrides/ReactCell.js"],"names":["ReactDOM","doReactCell","Ext","define","extend","xtype","config","renderer","summaryRenderer","forceWidth","setValue","value","me","context","refreshContext","column","needsSizing","scope","getScope","markup","result","summary","getSummaryRenderer","getRenderer","call","record","dataIndex","render","bodyElement","dom","cmp","undefined","setRenderTo","isWidget","widget","Helper","overwrite","htmlEncode","toString","getForceWidth","setWidgetWidth","getWidth","updateWidth","width","oldWidth","el","setWidth","toggleCls","widthedCls","doDestroy","unmountComponentAtNode","setColumn","setRecord","document","getElementById","id","parentNode","removeChild","privates","leftPad","rightPad","rendered","getColumn","parseInt","getCachedStyle","measurer"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nexport function doReactCell() {\n  Ext.define('Ext.ReactCell', {\n    extend: 'Ext.grid.cell.Base',\n    xtype: 'reactcell',\n    config: {\n      renderer: null,\n      summaryRenderer: null,\n      forceWidth: true\n    },\n    setValue: function setValue(value) {\n      var me = this,\n          context = me.refreshContext,\n          column = context.column,\n          needsSizing = false,\n          scope = column.getScope(),\n          markup,\n          renderer,\n          result;\n\n      if (context.summary) {\n        renderer = me.getSummaryRenderer() || column.getSummaryRenderer();\n      }\n\n      renderer = renderer || me.getRenderer() || column.getRenderer();\n\n      if (renderer) {\n        markup = renderer.call(scope, value, context.record, context.dataIndex, me, column);\n\n        if (typeof markup === 'object') {\n          result = ReactDOM.render(markup, me.bodyElement.dom);\n\n          if (result == null) {//markup.type.prototype.rootDOM =  me.bodyElement.dom\n          } else {\n            if (result.cmp != undefined) {\n              result.cmp.setRenderTo(me.bodyElement.dom);\n            }\n\n            if (result.isWidget) {\n              needsSizing = result !== me.widget;\n              me.widget = result;\n            }\n          }\n        } else {\n          if (markup == null) {\n            markup = '';\n          }\n\n          Ext.dom.Helper.overwrite(me.bodyElement, Ext.htmlEncode(markup.toString()));\n          me.widget = null;\n        }\n\n        if (needsSizing && me.getForceWidth()) {\n          me.setWidgetWidth(me.getWidth());\n        }\n      }\n\n      return me;\n    },\n    updateWidth: function updateWidth(width, oldWidth) {\n      //this.callParent(arguments);\n      var el = this.el;\n      el.setWidth(width);\n      el.toggleCls(this.widthedCls, width != null && width !== 'auto');\n\n      if (this.getForceWidth()) {\n        this.setWidgetWidth(width);\n      }\n    },\n    doDestroy: function doDestroy() {\n      ReactDOM.unmountComponentAtNode(this.bodyElement.dom);\n      this.setColumn(null);\n      this.setRecord(null);\n      var el = document.getElementById(this.id);\n\n      if (el != undefined) {\n        if (el != null) {\n          el.parentNode.removeChild(el);\n        }\n      }\n    },\n    privates: {\n      setWidgetWidth: function setWidgetWidth(width) {\n        var me = this,\n            el = me.bodyElement,\n            widget,\n            column,\n            leftPad,\n            rightPad;\n\n        if (!me.rendered) {\n          return;\n        }\n\n        widget = me.widget;\n\n        if (widget) {\n          column = me.getColumn();\n          leftPad = parseInt(column.getCachedStyle(el, 'padding-left'), 10) || 0;\n          rightPad = parseInt(column.getCachedStyle(el, 'padding-right'), 10) || 0; // Give the widget a reference to ourself to allow it to do extra measuring\n\n          widget.measurer = column;\n          widget.setWidth(width - leftPad - rightPad);\n        }\n      }\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}