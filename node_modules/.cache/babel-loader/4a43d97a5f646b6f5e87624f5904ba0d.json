{"ast":null,"code":"var _jsxFileName = \"/Users/plsingh/Downloads/archive-19Sep-Sunday/src/components/Map/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef } from \"react\";\nimport { GoogleMap, InfoWindow, Marker } from \"@react-google-maps/api\";\nimport LocationMarker from \"../../assets/Icons/LocationMarker/marker.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport actions from \"../../actions\";\nimport { selectors } from \"../../reducers\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst google = window.google;\nconst emptySet = [];\nconst emptyObj = {};\nconst useStyles = makeStyles({\n  loading: {\n    color: '#5e5e5e',\n    fontSize: 16,\n    marginTop: '5%',\n    textAlign: 'center'\n  }\n});\nconst center = {\n  lat: 9.248134,\n  lng: 78.178407\n};\n\nfunction Map({\n  type,\n  onSelect,\n  coords = emptyObj\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [map, setMap] = React.useState(null);\n  const refMap = useRef(null);\n  const {\n    latitude: lat,\n    longitude: lng\n  } = coords;\n  const dispatch = useDispatch();\n  const {\n    defaultCenterInformation = emptyObj,\n    // defaultZoominformation = emptyObj, \n    markersInformation = emptySet,\n    status\n  } = useSelector(state => selectors.equipmentMapLocations(state));\n  useEffect(() => {\n    dispatch(actions.equipmentLocations.mapLocations.request({\n      lat: lat,\n      lng: lng,\n      eqpOrLoc: type === 'equipment' ? 'E' : 'L'\n    }));\n  }, [dispatch, lat, lng, type]);\n\n  const handleMarkerClick = EqpLocCode => {\n    onSelect({\n      EqpLocCode\n    });\n  };\n\n  useEffect(() => {\n    if (defaultCenterInformation.defaultLat && map) {\n      setTimeout(() => {\n        console.log(\"hey\");\n        map.setCenter(center);\n      }, 500);\n    }\n  }, [map, defaultCenterInformation]);\n  const handleOnLoad = useCallback(_map => {\n    const bounds = new google.maps.LatLngBounds(); // markersInformation.forEach(({ eqpLat, eqpLong }) => \n    // {\n    //     bounds.extend({ lat: eqpLat, lng: eqpLong })\n    // });\n\n    _map.fitBounds(bounds);\n\n    setMap(_map);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !defaultCenterInformation.defaultLat ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GoogleMap, {\n      ref: refMap,\n      onLoad: handleOnLoad,\n      mapContainerStyle: {\n        height: \"100%\"\n      },\n      center: center // zoom={5}\n      ,\n      children: markersInformation.map(({\n        eqpLat,\n        eqpLong,\n        EqpOrLocationCode,\n        EqpOrLocationDesc\n      }) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: eqpLat,\n          lng: eqpLong\n        },\n        icon: LocationMarker,\n        onClick: () => handleMarkerClick(EqpOrLocationCode),\n        children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: eqpLat,\n            lng: eqpLong\n          },\n          options: {\n            pixelOffset: new google.maps.Size(0, -1)\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleMarkerClick(EqpOrLocationCode),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"#0073E6\",\n                fontWeight: 500\n              },\n              children: EqpOrLocationDesc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"#7D8597\",\n                fontWeight: 400,\n                paddingTop: \"5px\"\n              },\n              children: EqpOrLocationCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, EqpOrLocationCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(Map, \"NKISv4UQYfQauthgOUnv1CALNjg=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/components/Map/index.jsx"],"names":["React","useCallback","useRef","GoogleMap","InfoWindow","Marker","LocationMarker","useDispatch","useSelector","useEffect","actions","selectors","makeStyles","google","window","emptySet","emptyObj","useStyles","loading","color","fontSize","marginTop","textAlign","center","lat","lng","Map","type","onSelect","coords","classes","map","setMap","useState","refMap","latitude","longitude","dispatch","defaultCenterInformation","markersInformation","status","state","equipmentMapLocations","equipmentLocations","mapLocations","request","eqpOrLoc","handleMarkerClick","EqpLocCode","defaultLat","setTimeout","console","log","setCenter","handleOnLoad","_map","bounds","maps","LatLngBounds","fitBounds","height","eqpLat","eqpLong","EqpOrLocationCode","EqpOrLocationDesc","pixelOffset","Size","fontWeight","paddingTop"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef } from \"react\";\nimport { GoogleMap, InfoWindow, Marker } from \"@react-google-maps/api\";\nimport LocationMarker from \"../../assets/Icons/LocationMarker/marker.png\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport actions from \"../../actions\";\nimport { selectors } from \"../../reducers\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst google = window.google;\nconst emptySet = [];\nconst emptyObj = {};\nconst useStyles = makeStyles({\n  loading: {\n    color: '#5e5e5e',\n    fontSize: 16,\n    marginTop: '5%',\n    textAlign: 'center'\n  }\n})\nconst center = { lat: 9.248134, lng: 78.178407 }\nfunction Map({ type, onSelect, coords = emptyObj }) {\n  const classes = useStyles();\n  const [map, setMap] = React.useState(null)\n\n  const refMap = useRef(null);\n  const { latitude: lat, longitude: lng } = coords;\n  const dispatch = useDispatch();\n  const { defaultCenterInformation = emptyObj,\n    // defaultZoominformation = emptyObj, \n    markersInformation = emptySet, status } = useSelector(state => selectors.equipmentMapLocations(state));\n  useEffect(() => {\n    dispatch(actions.equipmentLocations.mapLocations.request(\n      {\n        lat: lat,\n        lng: lng,\n        eqpOrLoc: type === 'equipment' ? 'E' : 'L'\n      }\n    ))\n  }, [dispatch, lat, lng, type])\n  const handleMarkerClick = (EqpLocCode) => {\n    onSelect({ EqpLocCode })\n  };\n\n  useEffect(() => {\n    if (defaultCenterInformation.defaultLat && map) {\n      setTimeout(() => {\n        console.log(\"hey\")\n        map.setCenter(center);\n      }, 500)\n    }\n  }, [map, defaultCenterInformation])\n  const handleOnLoad = useCallback(_map => {\n    const bounds = new google.maps.LatLngBounds();\n    // markersInformation.forEach(({ eqpLat, eqpLong }) => \n    // {\n    //     bounds.extend({ lat: eqpLat, lng: eqpLong })\n    // });\n    _map.fitBounds(bounds);\n    setMap(_map);\n  }, []);\n  return (\n    <>\n      {   !defaultCenterInformation.defaultLat ? (\n        <div className={classes.loading}>Loading...</div>\n      ) :\n        (\n          <GoogleMap\n            ref={refMap}\n            onLoad={handleOnLoad}\n            mapContainerStyle={{ height: \"100%\" }}\n            center={center}\n          // zoom={5}\n          >\n            {markersInformation.map(({ eqpLat, eqpLong, EqpOrLocationCode, EqpOrLocationDesc }) => (\n              <Marker\n                key={EqpOrLocationCode}\n                position={{ lat: eqpLat, lng: eqpLong }}\n                icon={LocationMarker}\n                onClick={() => handleMarkerClick(EqpOrLocationCode)}\n              >\n                <InfoWindow position={{ lat: eqpLat, lng: eqpLong }} options={{ pixelOffset: new google.maps.Size(0, -1) }}\n                >\n                  <div onClick={() => handleMarkerClick(EqpOrLocationCode)}>\n                    <div style={{ color: \"#0073E6\", fontWeight: 500 }}>\n                      {EqpOrLocationDesc}\n                    </div>\n                    <div style={{ color: \"#7D8597\", fontWeight: 400, paddingTop: \"5px\" }}>\n                      {EqpOrLocationCode}\n                    </div>\n                  </div>\n                </InfoWindow>\n              </Marker>\n            ))}\n          </GoogleMap>\n        )}\n    </>\n\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}