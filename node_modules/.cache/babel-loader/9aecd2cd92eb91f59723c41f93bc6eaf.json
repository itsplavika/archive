{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EnumType_1 = require(\"./types/EnumType\");\n\nvar VariableType_1 = require(\"./types/VariableType\");\n\nexports.configFields = ['__args', '__alias', '__aliasFor', '__variables', '__directives', '__on', '__all_on', '__typeName', '__name'];\n\nfunction stringify(obj_from_json) {\n  if (obj_from_json instanceof EnumType_1.EnumType) {\n    return obj_from_json.value;\n  } else if (obj_from_json instanceof VariableType_1.VariableType) {\n    return \"$\" + obj_from_json.value;\n  } else if (typeof obj_from_json !== 'object' || obj_from_json === null) {\n    return JSON.stringify(obj_from_json);\n  } else if (Array.isArray(obj_from_json)) {\n    return \"[\" + obj_from_json.map(function (item) {\n      return stringify(item);\n    }).join(', ') + \"]\";\n  }\n\n  var props = Object.keys(obj_from_json).map(function (key) {\n    return key + \": \" + stringify(obj_from_json[key]);\n  }).join(', ');\n  return \"{\" + props + \"}\";\n}\n\nfunction buildArgs(argsObj) {\n  var args = [];\n\n  for (var argName in argsObj) {\n    args.push(argName + \": \" + stringify(argsObj[argName]));\n  }\n\n  return args.join(', ');\n}\n\nfunction buildVariables(varsObj) {\n  var args = [];\n\n  for (var varName in varsObj) {\n    args.push(\"$\" + varName + \": \" + varsObj[varName]);\n  }\n\n  return args.join(', ');\n}\n\nfunction buildDirectives(dirsObj) {\n  var directiveName = Object.keys(dirsObj)[0];\n  var directiveValue = dirsObj[directiveName];\n\n  if (typeof directiveValue === 'boolean') {\n    return directiveName;\n  } else if (typeof directiveValue === 'object') {\n    var args = [];\n\n    for (var argName in directiveValue) {\n      var argVal = stringify(directiveValue[argName]).replace(/\"/g, '');\n      args.push(argName + \": \" + argVal);\n    }\n\n    return directiveName + \"(\" + args.join(', ') + \")\";\n  } else {\n    throw new Error(\"Unsupported type for directive: \" + typeof directiveValue + \". Types allowed: object, boolean.\\n\" + (\"Offending object: \" + JSON.stringify(dirsObj)));\n  }\n}\n\nfunction getIndent(level) {\n  return Array(level * 4 + 1).join(' ');\n}\n\nfunction filterNonConfigFields(fieldName, ignoreFields) {\n  return exports.configFields.indexOf(fieldName) == -1 && ignoreFields.indexOf(fieldName) == -1;\n}\n\nfunction convertQuery(node, level, output, options) {\n  Object.keys(node).filter(function (key) {\n    return filterNonConfigFields(key, options.ignoreFields);\n  }).forEach(function (key) {\n    var value = node[key];\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        value = value.find(function (item) {\n          return item && typeof item === 'object';\n        });\n\n        if (!value) {\n          output.push([\"\" + key, level]);\n          return;\n        }\n      }\n\n      var fieldCount = Object.keys(value).filter(function (keyCount) {\n        return filterNonConfigFields(keyCount, options.ignoreFields);\n      }).length;\n      var subFields = fieldCount > 0;\n      var argsExist = typeof value.__args === 'object';\n      var directivesExist = typeof value.__directives === 'object';\n      var fullFragmentsExist = value.__all_on instanceof Array;\n      var partialFragmentsExist = typeof value.__on === 'object';\n      var token = \"\" + key;\n\n      if (typeof value.__name === 'string') {\n        token = token + \" \" + value.__name;\n      }\n\n      if (typeof value.__aliasFor === 'string') {\n        token = token + \": \" + value.__aliasFor;\n      }\n\n      if (typeof value.__variables === 'object') {\n        token = token + \" (\" + buildVariables(value.__variables) + \")\";\n      } else if (argsExist || directivesExist) {\n        var argsStr = '';\n        var dirsStr = '';\n\n        if (directivesExist) {\n          var numDirectives = Object.keys(value.__directives).length;\n\n          if (numDirectives > 1) {\n            throw new Error(\"Too many directives. The object/key \" + (\"'\" + Object.keys(value)[0] + \"' had \" + numDirectives + \" directives, \") + \"but only 1 directive per object/key is supported at this time.\");\n          }\n\n          dirsStr = \"@\" + buildDirectives(value.__directives);\n        }\n\n        if (argsExist) {\n          argsStr = \"(\" + buildArgs(value.__args) + \")\";\n        }\n\n        var spacer = directivesExist && argsExist ? ' ' : '';\n        token = token + \" \" + dirsStr + spacer + argsStr;\n      }\n\n      output.push([token + (subFields || partialFragmentsExist || fullFragmentsExist ? ' {' : ''), level]);\n      convertQuery(value, level + 1, output, options);\n\n      if (fullFragmentsExist) {\n        value.__all_on.forEach(function (fullFragment) {\n          output.push([\"...\" + fullFragment, level + 1]);\n        });\n      }\n\n      if (partialFragmentsExist) {\n        var inlineFragments = value.__on instanceof Array ? value.__on : [value.__on];\n        inlineFragments.forEach(function (inlineFragment) {\n          var name = inlineFragment.__typeName;\n          output.push([\"... on \" + name + \" {\", level + 1]);\n          convertQuery(inlineFragment, level + 2, output, options);\n          output.push(['}', level + 1]);\n        });\n      }\n\n      if (subFields || partialFragmentsExist || fullFragmentsExist) {\n        output.push(['}', level]);\n      }\n    } else if (options.includeFalsyKeys === true || value) {\n      output.push([\"\" + key, level]);\n    }\n  });\n}\n\nfunction jsonToGraphQLQuery(query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!query || typeof query != 'object') {\n    throw new Error('query object not specified');\n  }\n\n  if (Object.keys(query).length == 0) {\n    throw new Error('query object has no data');\n  }\n\n  if (!(options.ignoreFields instanceof Array)) {\n    options.ignoreFields = [];\n  }\n\n  var queryLines = [];\n  convertQuery(query, 0, queryLines, options);\n  var output = '';\n  queryLines.forEach(function (_a) {\n    var line = _a[0],\n        level = _a[1];\n\n    if (options.pretty) {\n      if (output) {\n        output += '\\n';\n      }\n\n      output += getIndent(level) + line;\n    } else {\n      if (output) {\n        output += ' ';\n      }\n\n      output += line;\n    }\n  });\n  return output;\n}\n\nexports.jsonToGraphQLQuery = jsonToGraphQLQuery;","map":{"version":3,"sources":["../src/jsonToGraphQLQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EnumType_1 = require(\"./types/EnumType\");\nvar VariableType_1 = require(\"./types/VariableType\");\nexports.configFields = [\n    '__args', '__alias', '__aliasFor', '__variables', '__directives', '__on', '__all_on', '__typeName', '__name'\n];\nfunction stringify(obj_from_json) {\n    if (obj_from_json instanceof EnumType_1.EnumType) {\n        return obj_from_json.value;\n    }\n    else if (obj_from_json instanceof VariableType_1.VariableType) {\n        return \"$\" + obj_from_json.value;\n    }\n    else if (typeof obj_from_json !== 'object' || obj_from_json === null) {\n        return JSON.stringify(obj_from_json);\n    }\n    else if (Array.isArray(obj_from_json)) {\n        return \"[\" + obj_from_json.map(function (item) { return stringify(item); }).join(', ') + \"]\";\n    }\n    var props = Object\n        .keys(obj_from_json)\n        .map(function (key) { return key + \": \" + stringify(obj_from_json[key]); })\n        .join(', ');\n    return \"{\" + props + \"}\";\n}\nfunction buildArgs(argsObj) {\n    var args = [];\n    for (var argName in argsObj) {\n        args.push(argName + \": \" + stringify(argsObj[argName]));\n    }\n    return args.join(', ');\n}\nfunction buildVariables(varsObj) {\n    var args = [];\n    for (var varName in varsObj) {\n        args.push(\"$\" + varName + \": \" + varsObj[varName]);\n    }\n    return args.join(', ');\n}\nfunction buildDirectives(dirsObj) {\n    var directiveName = Object.keys(dirsObj)[0];\n    var directiveValue = dirsObj[directiveName];\n    if (typeof directiveValue === 'boolean') {\n        return directiveName;\n    }\n    else if (typeof directiveValue === 'object') {\n        var args = [];\n        for (var argName in directiveValue) {\n            var argVal = stringify(directiveValue[argName]).replace(/\"/g, '');\n            args.push(argName + \": \" + argVal);\n        }\n        return directiveName + \"(\" + args.join(', ') + \")\";\n    }\n    else {\n        throw new Error(\"Unsupported type for directive: \" + typeof directiveValue + \". Types allowed: object, boolean.\\n\" +\n            (\"Offending object: \" + JSON.stringify(dirsObj)));\n    }\n}\nfunction getIndent(level) {\n    return Array((level * 4) + 1).join(' ');\n}\nfunction filterNonConfigFields(fieldName, ignoreFields) {\n    return exports.configFields.indexOf(fieldName) == -1 && ignoreFields.indexOf(fieldName) == -1;\n}\nfunction convertQuery(node, level, output, options) {\n    Object.keys(node)\n        .filter(function (key) { return filterNonConfigFields(key, options.ignoreFields); })\n        .forEach(function (key) {\n        var value = node[key];\n        if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n                value = value.find(function (item) { return item && typeof item === 'object'; });\n                if (!value) {\n                    output.push([\"\" + key, level]);\n                    return;\n                }\n            }\n            var fieldCount = Object.keys(value)\n                .filter(function (keyCount) { return filterNonConfigFields(keyCount, options.ignoreFields); }).length;\n            var subFields = fieldCount > 0;\n            var argsExist = typeof value.__args === 'object';\n            var directivesExist = typeof value.__directives === 'object';\n            var fullFragmentsExist = value.__all_on instanceof Array;\n            var partialFragmentsExist = typeof value.__on === 'object';\n            var token = \"\" + key;\n            if (typeof value.__name === 'string') {\n                token = token + \" \" + value.__name;\n            }\n            if (typeof value.__aliasFor === 'string') {\n                token = token + \": \" + value.__aliasFor;\n            }\n            if (typeof value.__variables === 'object') {\n                token = token + \" (\" + buildVariables(value.__variables) + \")\";\n            }\n            else if (argsExist || directivesExist) {\n                var argsStr = '';\n                var dirsStr = '';\n                if (directivesExist) {\n                    var numDirectives = Object.keys(value.__directives).length;\n                    if (numDirectives > 1) {\n                        throw new Error(\"Too many directives. The object/key \" +\n                            (\"'\" + Object.keys(value)[0] + \"' had \" + numDirectives + \" directives, \") +\n                            \"but only 1 directive per object/key is supported at this time.\");\n                    }\n                    dirsStr = \"@\" + buildDirectives(value.__directives);\n                }\n                if (argsExist) {\n                    argsStr = \"(\" + buildArgs(value.__args) + \")\";\n                }\n                var spacer = directivesExist && argsExist ? ' ' : '';\n                token = token + \" \" + dirsStr + spacer + argsStr;\n            }\n            output.push([token + (subFields || partialFragmentsExist || fullFragmentsExist ? ' {' : ''), level]);\n            convertQuery(value, level + 1, output, options);\n            if (fullFragmentsExist) {\n                value.__all_on.forEach(function (fullFragment) {\n                    output.push([\"...\" + fullFragment, level + 1]);\n                });\n            }\n            if (partialFragmentsExist) {\n                var inlineFragments = value.__on instanceof Array ? value.__on : [value.__on];\n                inlineFragments.forEach(function (inlineFragment) {\n                    var name = inlineFragment.__typeName;\n                    output.push([\"... on \" + name + \" {\", level + 1]);\n                    convertQuery(inlineFragment, level + 2, output, options);\n                    output.push(['}', level + 1]);\n                });\n            }\n            if (subFields || partialFragmentsExist || fullFragmentsExist) {\n                output.push(['}', level]);\n            }\n        }\n        else if (options.includeFalsyKeys === true || value) {\n            output.push([\"\" + key, level]);\n        }\n    });\n}\nfunction jsonToGraphQLQuery(query, options) {\n    if (options === void 0) { options = {}; }\n    if (!query || typeof query != 'object') {\n        throw new Error('query object not specified');\n    }\n    if (Object.keys(query).length == 0) {\n        throw new Error('query object has no data');\n    }\n    if (!(options.ignoreFields instanceof Array)) {\n        options.ignoreFields = [];\n    }\n    var queryLines = [];\n    convertQuery(query, 0, queryLines, options);\n    var output = '';\n    queryLines.forEach(function (_a) {\n        var line = _a[0], level = _a[1];\n        if (options.pretty) {\n            if (output) {\n                output += '\\n';\n            }\n            output += getIndent(level) + line;\n        }\n        else {\n            if (output) {\n                output += ' ';\n            }\n            output += line;\n        }\n    });\n    return output;\n}\nexports.jsonToGraphQLQuery = jsonToGraphQLQuery;\n//# sourceMappingURL=jsonToGraphQLQuery.js.map"]},"metadata":{},"sourceType":"script"}