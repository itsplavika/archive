{"ast":null,"code":"import { jsonToGraphQLQuery } from \"json-to-graphql-query\";\nexport default function getFilterMetaData() {\n  const query = {\n    '': {\n      workRequest_getWrkReqMetaData: {\n        getListItems: {\n          data: {\n            workhubinformation: {\n              workhubcmbcode: true,\n              workhubcmbdesc: true\n            },\n            categoryInformation: {\n              categoryCode: true,\n              categoryDesc: true\n            },\n            Plangroupinformation: {\n              PlangroupCode: true,\n              PlangroupDesc: true\n            },\n            priorityInformation: {\n              priorityCode: true,\n              priorityDesc: true\n            },\n            typeInformation: {\n              typeCode: true,\n              typeDesc: true\n            },\n            probleminformation: {\n              problemCode: true,\n              problemDesc: true\n            },\n            statusInformation: {\n              statusCode: true,\n              statusDesc: true\n            },\n            reportedbyinformation: {\n              reportedbycode: true,\n              reportedbyname: true\n            },\n            workgroupinformation: {\n              workgroupcode: true,\n              workgroupdesc: true\n            },\n            workreqfilterinformation: {\n              workfiltercmbcode: true,\n              workfiltercmbdesc: true\n            },\n            workReqOnInformation: {\n              wrOnCode: true,\n              wrOnDesc: true\n            },\n            reasonforrejectioninformation: {\n              reasonforrejectioncode: true,\n              reasonforrejectiondesc: true\n            },\n            ForwardtoUserinfo: {\n              ForwardtoUserDesc: true,\n              ForwardtoUserName: true,\n              ForwardtoEmployeeCode: true,\n              ForwardtoEmployeeDesc: true\n            }\n          }\n        }\n      }\n    }\n  };\n  return jsonToGraphQLQuery(query, {\n    pretty: true\n  });\n}","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/queries/workRequest/getFilterMetaData.js"],"names":["jsonToGraphQLQuery","getFilterMetaData","query","workRequest_getWrkReqMetaData","getListItems","data","workhubinformation","workhubcmbcode","workhubcmbdesc","categoryInformation","categoryCode","categoryDesc","Plangroupinformation","PlangroupCode","PlangroupDesc","priorityInformation","priorityCode","priorityDesc","typeInformation","typeCode","typeDesc","probleminformation","problemCode","problemDesc","statusInformation","statusCode","statusDesc","reportedbyinformation","reportedbycode","reportedbyname","workgroupinformation","workgroupcode","workgroupdesc","workreqfilterinformation","workfiltercmbcode","workfiltercmbdesc","workReqOnInformation","wrOnCode","wrOnDesc","reasonforrejectioninformation","reasonforrejectioncode","reasonforrejectiondesc","ForwardtoUserinfo","ForwardtoUserDesc","ForwardtoUserName","ForwardtoEmployeeCode","ForwardtoEmployeeDesc","pretty"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,uBAAnC;AAEA,eAAe,SAASC,iBAAT,GAA4B;AACzC,QAAMC,KAAK,GAAG;AACZ,QAAI;AACFC,MAAAA,6BAA6B,EAAE;AAC7BC,QAAAA,YAAY,EAAE;AACZC,UAAAA,IAAI,EAAE;AACJC,YAAAA,kBAAkB,EAAC;AACjBC,cAAAA,cAAc,EAAE,IADC;AAEjBC,cAAAA,cAAc,EAAE;AAFC,aADf;AAKJC,YAAAA,mBAAmB,EAAE;AACnBC,cAAAA,YAAY,EAAE,IADK;AAEnBC,cAAAA,YAAY,EAAE;AAFK,aALjB;AASJC,YAAAA,oBAAoB,EAAC;AACnBC,cAAAA,aAAa,EAAE,IADI;AAEnBC,cAAAA,aAAa,EAAE;AAFI,aATjB;AAaJC,YAAAA,mBAAmB,EAAE;AACnBC,cAAAA,YAAY,EAAE,IADK;AAEnBC,cAAAA,YAAY,EAAE;AAFK,aAbjB;AAiBJC,YAAAA,eAAe,EAAC;AACdC,cAAAA,QAAQ,EAAE,IADI;AAEdC,cAAAA,QAAQ,EAAE;AAFI,aAjBZ;AAqBJC,YAAAA,kBAAkB,EAAC;AACjBC,cAAAA,WAAW,EAAE,IADI;AAEjBC,cAAAA,WAAW,EAAE;AAFI,aArBf;AAyBJC,YAAAA,iBAAiB,EAAC;AAChBC,cAAAA,UAAU,EAAE,IADI;AAEhBC,cAAAA,UAAU,EAAE;AAFI,aAzBd;AA6BJC,YAAAA,qBAAqB,EAAC;AACpBC,cAAAA,cAAc,EAAE,IADI;AAEpBC,cAAAA,cAAc,EAAE;AAFI,aA7BlB;AAiCJC,YAAAA,oBAAoB,EAAE;AACpBC,cAAAA,aAAa,EAAE,IADK;AAEpBC,cAAAA,aAAa,EAAE;AAFK,aAjClB;AAqCJC,YAAAA,wBAAwB,EAAC;AACvBC,cAAAA,iBAAiB,EAAE,IADI;AAEvBC,cAAAA,iBAAiB,EAAE;AAFI,aArCrB;AAyCJC,YAAAA,oBAAoB,EAAC;AACnBC,cAAAA,QAAQ,EAAE,IADS;AAEnBC,cAAAA,QAAQ,EAAE;AAFS,aAzCjB;AA6CJC,YAAAA,6BAA6B,EAAE;AAC7BC,cAAAA,sBAAsB,EAAE,IADK;AAE7BC,cAAAA,sBAAsB,EAAE;AAFK,aA7C3B;AAiDJC,YAAAA,iBAAiB,EAAC;AAChBC,cAAAA,iBAAiB,EAAE,IADH;AAEhBC,cAAAA,iBAAiB,EAAE,IAFH;AAGhBC,cAAAA,qBAAqB,EAAE,IAHP;AAIhBC,cAAAA,qBAAqB,EAAE;AAJP;AAjDd;AADM;AADe;AAD7B;AADQ,GAAd;AAgEA,SAAO9C,kBAAkB,CAACE,KAAD,EAAQ;AAAE6C,IAAAA,MAAM,EAAE;AAAV,GAAR,CAAzB;AACD","sourcesContent":["import { jsonToGraphQLQuery } from \"json-to-graphql-query\";\n\nexport default function getFilterMetaData(){\n  const query = {\n    '': {\n      workRequest_getWrkReqMetaData: {\n        getListItems: {\n          data: {\n            workhubinformation:{\n              workhubcmbcode: true,\n              workhubcmbdesc: true,\n            },\n            categoryInformation: {\n              categoryCode: true,\n              categoryDesc: true,\n            },\n            Plangroupinformation:{\n              PlangroupCode: true,\n              PlangroupDesc: true,\n            },\n            priorityInformation: {\n              priorityCode: true,\n              priorityDesc: true,\n            },\n            typeInformation:{\n              typeCode: true,\n              typeDesc: true,\n            },\n            probleminformation:{\n              problemCode: true,\n              problemDesc: true,\n            },\n            statusInformation:{\n              statusCode: true,\n              statusDesc: true,\n            },\n            reportedbyinformation:{\n              reportedbycode: true,\n              reportedbyname: true,\n            },\n            workgroupinformation: {\n              workgroupcode: true,\n              workgroupdesc: true,\n            },\n            workreqfilterinformation:{\n              workfiltercmbcode: true,\n              workfiltercmbdesc: true,\n            },\n            workReqOnInformation:{\n              wrOnCode: true,\n              wrOnDesc: true,\n            },\n            reasonforrejectioninformation: {\n              reasonforrejectioncode: true,\n              reasonforrejectiondesc: true,\n            },\n            ForwardtoUserinfo:{\n              ForwardtoUserDesc: true,\n              ForwardtoUserName: true,\n              ForwardtoEmployeeCode: true,\n              ForwardtoEmployeeDesc: true,\n            },\n          }\n        }\n      }\n    }\n  }\n  return jsonToGraphQLQuery(query, { pretty: true });\n}\n"]},"metadata":{},"sourceType":"module"}