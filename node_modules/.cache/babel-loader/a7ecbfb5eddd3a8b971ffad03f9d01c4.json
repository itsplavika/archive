{"ast":null,"code":"import produce from 'immer';\nimport actionTypes from '../../actions/types';\n\nconst reducer = (state = {}, action) => {\n  const {\n    type,\n    value\n  } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case actionTypes.WORKREQUEST.COMBO_ITEMS.RECEIVED:\n        draft.wrkReqMetadata = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_COUNT_SUCCESS:\n        draft.countBySts = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_LIST_SUCCESS:\n        draft.wrkReqBySts = value;\n        break;\n\n      case actionTypes.WORKREQUEST.FILTER:\n        draft.wrkReqListFilter = value;\n        break;\n\n      case actionTypes.WORKREQUEST.REFRESH:\n        draft.refreshContext = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_LISTACTION_SUCCESS:\n        draft.wrkReqListActions = value;\n        break;\n\n      case actionTypes.WORKREQUEST.SINGLE_WRSELECTION:\n        draft.singleWrkReqSelection = value;\n        break;\n\n      case actionTypes.WORKREQUEST.MULTI_WRSELECTION:\n        draft.multiWrkReqSelection = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEW_SUCCESS:\n        draft.wrkReqSummary = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEWCARD_SUCCESS:\n        draft.wrkReqOverviewCard = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEWCARD_IMG_SUCCESS:\n        draft.wrkReqOverviewCardImage = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_TIMELINE_SUCCESS:\n        draft.wrkReqTimeline = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_WRWO_SUCCESS:\n        draft.wrkReqSuggestedWO = value;\n        break;\n\n      default:\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/reducers/workrequest/index.js"],"names":["produce","actionTypes","reducer","state","action","type","value","draft","WORKREQUEST","COMBO_ITEMS","RECEIVED","wrkReqMetadata","GET_COUNT_SUCCESS","countBySts","GET_LIST_SUCCESS","wrkReqBySts","FILTER","wrkReqListFilter","REFRESH","refreshContext","GET_LISTACTION_SUCCESS","wrkReqListActions","SINGLE_WRSELECTION","singleWrkReqSelection","MULTI_WRSELECTION","multiWrkReqSelection","GET_OVERVIEW_SUCCESS","wrkReqSummary","GET_OVERVIEWCARD_SUCCESS","wrkReqOverviewCard","GET_OVERVIEWCARD_IMG_SUCCESS","wrkReqOverviewCardImage","GET_TIMELINE_SUCCESS","wrkReqTimeline","GET_WRWO_SUCCESS","wrkReqSuggestedWO"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,MAAxB;AACA,SAAOJ,OAAO,CAACG,KAAD,EAAQI,KAAK,IAAI;AAC7B,YAAQF,IAAR;AACE,WAAKJ,WAAW,CAACO,WAAZ,CAAwBC,WAAxB,CAAoCC,QAAzC;AACEH,QAAAA,KAAK,CAACI,cAAN,GAAuBL,KAAvB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBI,iBAA7B;AACEL,QAAAA,KAAK,CAACM,UAAN,GAAmBP,KAAnB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBM,gBAA7B;AACEP,QAAAA,KAAK,CAACQ,WAAN,GAAoBT,KAApB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBQ,MAA7B;AACET,QAAAA,KAAK,CAACU,gBAAN,GAAyBX,KAAzB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBU,OAA7B;AACEX,QAAAA,KAAK,CAACY,cAAN,GAAuBb,KAAvB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBY,sBAA7B;AACEb,QAAAA,KAAK,CAACc,iBAAN,GAA0Bf,KAA1B;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBc,kBAA7B;AACEf,QAAAA,KAAK,CAACgB,qBAAN,GAA8BjB,KAA9B;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBgB,iBAA7B;AACEjB,QAAAA,KAAK,CAACkB,oBAAN,GAA6BnB,KAA7B;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBkB,oBAA7B;AACEnB,QAAAA,KAAK,CAACoB,aAAN,GAAsBrB,KAAtB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBoB,wBAA7B;AACErB,QAAAA,KAAK,CAACsB,kBAAN,GAA2BvB,KAA3B;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBsB,4BAA7B;AACEvB,QAAAA,KAAK,CAACwB,uBAAN,GAAgCzB,KAAhC;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwBwB,oBAA7B;AACEzB,QAAAA,KAAK,CAAC0B,cAAN,GAAuB3B,KAAvB;AACA;;AAEF,WAAKL,WAAW,CAACO,WAAZ,CAAwB0B,gBAA7B;AACE3B,QAAAA,KAAK,CAAC4B,iBAAN,GAA0B7B,KAA1B;AACA;;AAEF;AArDF;AAuDD,GAxDa,CAAd;AAyDD,CA3DD;;AA6DA,eAAeJ,OAAf","sourcesContent":["import produce from 'immer';\nimport actionTypes from '../../actions/types';\n\nconst reducer = (state = {}, action) => {\n  const { type, value } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case actionTypes.WORKREQUEST.COMBO_ITEMS.RECEIVED:\n        draft.wrkReqMetadata = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_COUNT_SUCCESS:\n        draft.countBySts = value\n        break;\n\n      case actionTypes.WORKREQUEST.GET_LIST_SUCCESS:\n        draft.wrkReqBySts = value;\n        break;\n\n      case actionTypes.WORKREQUEST.FILTER:\n        draft.wrkReqListFilter = value;\n        break;\n\n      case actionTypes.WORKREQUEST.REFRESH:\n        draft.refreshContext = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_LISTACTION_SUCCESS:\n        draft.wrkReqListActions = value;\n        break;\n\n      case actionTypes.WORKREQUEST.SINGLE_WRSELECTION:\n        draft.singleWrkReqSelection = value;\n        break;\n\n      case actionTypes.WORKREQUEST.MULTI_WRSELECTION:\n        draft.multiWrkReqSelection = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEW_SUCCESS:\n        draft.wrkReqSummary = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEWCARD_SUCCESS:\n        draft.wrkReqOverviewCard = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_OVERVIEWCARD_IMG_SUCCESS:\n        draft.wrkReqOverviewCardImage = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_TIMELINE_SUCCESS:\n        draft.wrkReqTimeline = value;\n        break;\n\n      case actionTypes.WORKREQUEST.GET_WRWO_SUCCESS:\n        draft.wrkReqSuggestedWO = value;\n        break;\n\n      default:\n    }\n  })\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}