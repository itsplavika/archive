{"ast":null,"code":"import { call, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"../..\";\nimport actions from \"../../../actions\";\nimport actionTypes from \"../../../actions/types\";\nimport { getCountByStatusV2 } from \"../../../queries/workRequest/getCountByStsV2\";\nimport getWorkRequestListByGroupStatus from \"../../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWorkRequestListCount } from \"../../../queries/workRequest/getWorkRequestListCount\";\nimport { selectors } from \"../../../reducers\";\nexport function* getWorkRequestCount({\n  groupBy,\n  Actionflag = 'WorkReq_WS_fetch'\n}) {\n  const query = getCountByStatusV2({\n    Actionflag,\n    groupBy\n  });\n\n  try {\n    var _resp$workRequest_get, _resp$workRequest_get2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get === void 0 ? void 0 : (_resp$workRequest_get2 = _resp$workRequest_get.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get2 === void 0 ? void 0 : _resp$workRequest_get2.data) {\n      var _resp$workRequest_get3, _resp$workRequest_get4;\n\n      const value = resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get3 = resp['workRequest_getCountBySts']) === null || _resp$workRequest_get3 === void 0 ? void 0 : (_resp$workRequest_get4 = _resp$workRequest_get3.gettheCountofWorkRequestsgroupedbyStatus) === null || _resp$workRequest_get4 === void 0 ? void 0 : _resp$workRequest_get4.data;\n      return value;\n    }\n  } catch (e) {}\n}\nexport function* dashboardInit() {\n  const selectedFilter = yield select(selectors.dashboardSelectedFilter);\n  const isDashboardInitDone = selectedFilter !== '';\n\n  if (!isDashboardInitDone) {\n    yield put(actions.workRequestV2.filterOpts.init());\n  }\n\n  const value = yield call(getWorkRequestCount, {\n    Actionflag: 'WorkReq_WS_fetch',\n    groupBy: selectedFilter\n  });\n\n  if (value) {\n    const defaultGroupBy = value.workhubcmbcode;\n\n    if (!isDashboardInitDone) {\n      yield put(actions.workRequestV2.dashboard.selectFilter(defaultGroupBy));\n      yield put(actions.workRequestV2.dashboard.receivedCount(defaultGroupBy, value));\n    } else {\n      yield put(actions.workRequestV2.dashboard.receivedCount(selectedFilter, value));\n    }\n  }\n}\nexport function* updateDashbordFilter({\n  groupBy\n}) {\n  const Actionflag = 'WorkReq_WS_fetch';\n  const value = yield call(getWorkRequestCount, {\n    Actionflag,\n    groupBy\n  });\n\n  if (value) {\n    yield put(actions.workRequestV2.dashboard.receivedCount(groupBy, value));\n  }\n}\nexport const worRequestDashboardSagas = [takeLatest([actionTypes.WORK_REQUEST_V2.DASHBOARD.INIT], dashboardInit), takeLatest(actionTypes.WORK_REQUEST_V2.DASHBOARD.CHANGE_FILTER, updateDashbordFilter)];","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/workRequestV2/Dashboard/index.js"],"names":["call","put","select","takeEvery","takeLatest","apiCallWithRetry","actions","actionTypes","getCountByStatusV2","getWorkRequestListByGroupStatus","getWorkRequestListCount","selectors","getWorkRequestCount","groupBy","Actionflag","query","resp","opts","gCtxtCmp","hidden","gettheCountofWorkRequestsgroupedbyStatus","data","value","e","dashboardInit","selectedFilter","dashboardSelectedFilter","isDashboardInitDone","workRequestV2","filterOpts","init","defaultGroupBy","workhubcmbcode","dashboard","selectFilter","receivedCount","updateDashbordFilter","worRequestDashboardSagas","WORK_REQUEST_V2","DASHBOARD","INIT","CHANGE_FILTER"],"mappings":"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","sourcesContent":["\nimport {\n  call,\n  put,\n  select,\n  takeEvery,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport { apiCallWithRetry } from \"../..\";\nimport actions from \"../../../actions\";\nimport actionTypes from \"../../../actions/types\";\nimport { getCountByStatusV2 } from \"../../../queries/workRequest/getCountByStsV2\";\nimport getWorkRequestListByGroupStatus from \"../../../queries/workRequest/getWorkRequestListByGroupStatus\";\nimport { getWorkRequestListCount } from \"../../../queries/workRequest/getWorkRequestListCount\";\nimport { selectors } from \"../../../reducers\";\n\n\nexport function* getWorkRequestCount({ groupBy, Actionflag = 'WorkReq_WS_fetch' }) {\n  const query = getCountByStatusV2({ Actionflag, groupBy });\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      gCtxtCmp: 'workRequest',\n      hidden: true,\n    })\n    if (resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data) {\n      const value = resp?.['workRequest_getCountBySts']?.gettheCountofWorkRequestsgroupedbyStatus?.data\n      return value;\n    }\n  } catch (e) {\n  }\n}\nexport function* dashboardInit() {\n  const selectedFilter = yield select(selectors.dashboardSelectedFilter);\n  const isDashboardInitDone = selectedFilter !== '';\n  if (!isDashboardInitDone) {\n    yield put(actions.workRequestV2.filterOpts.init());\n  }\n\n  const value = yield call(getWorkRequestCount, { Actionflag: 'WorkReq_WS_fetch', groupBy: selectedFilter });\n  if (value) {\n    const defaultGroupBy = value.workhubcmbcode;\n    if (!isDashboardInitDone) {\n      yield put(actions.workRequestV2.dashboard.selectFilter(defaultGroupBy));\n      yield put(actions.workRequestV2.dashboard.receivedCount(defaultGroupBy, value));\n    }\n    else {\n      yield put(actions.workRequestV2.dashboard.receivedCount(selectedFilter, value));\n    }\n\n  }\n}\n\nexport function* updateDashbordFilter({ groupBy }) {\n  const Actionflag = 'WorkReq_WS_fetch'\n  const value = yield call(getWorkRequestCount, { Actionflag, groupBy });\n  if (value) {\n    yield put(actions.workRequestV2.dashboard.receivedCount(groupBy, value));\n  }\n}\n\n\nexport const worRequestDashboardSagas = [\n  takeLatest([\n    actionTypes.WORK_REQUEST_V2.DASHBOARD.INIT,\n  ], dashboardInit),\n  takeLatest(actionTypes.WORK_REQUEST_V2.DASHBOARD.CHANGE_FILTER, updateDashbordFilter),\n\n];\n"]},"metadata":{},"sourceType":"module"}