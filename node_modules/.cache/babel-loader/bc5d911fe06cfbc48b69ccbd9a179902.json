{"ast":null,"code":"import { call, takeEvery, put, select, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { apiCallWithRetry } from \"..\";\nimport actions from \"../../actions\";\nimport actionTypes from \"../../actions/types\";\nimport { selectors } from \"../../reducers\";\nimport { getWorkflowMetadata } from \"../../queries/workRequest/getWorkflowMetadata\";\nimport { convertUtcToTimezone } from \"../../utils/date\";\nimport { AppSettings } from \"../../utils/appSettings\";\nimport { createWorkflowRequest } from '../../queries/workRequest/createWorkflowRequest';\nimport { requestWorkRequest } from \"../workRequestV2\";\nimport moment from \"moment\";\nimport { uploadAttachment } from \"../attachment\";\n/**\n *\n * This loads workflow combo box items\n */\n\nexport function* workflowLoadItems() {\n  const query = getWorkflowMetadata();\n\n  try {\n    var _resp$workRequest_get, _resp$workRequest_get2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_get = resp['workRequest_getWrkReqMetaAndDefs']) === null || _resp$workRequest_get === void 0 ? void 0 : (_resp$workRequest_get2 = _resp$workRequest_get.getListItems) === null || _resp$workRequest_get2 === void 0 ? void 0 : _resp$workRequest_get2.data) {\n      const comboItems = resp['workRequest_getWrkReqMetaAndDefs'].getListItems.data;\n      const defaultValues = resp['workRequest_getWrkReqMetaAndDefs'].screenLaunchdefaultvaluesUPEassistedforallProperties.data;\n      return yield put(actions.workflow.comboItems.received(comboItems, defaultValues));\n    }\n\n    return yield put(actions.workflow.comboItems.failed());\n  } catch (e) {\n    return yield put(actions.workflow.comboItems.failed());\n  }\n}\nexport function* workflowUpdateInit({\n  id,\n  mode\n}) {\n  var _probleminformation$, _probleminformation$2, _reportedbyinformatio, _reportedbyinformatio2;\n\n  const workflowItems = yield select(selectors.workflowItems);\n\n  if (workflowItems.status !== 'success') {\n    //load required workflow combo items\n    yield call(workflowLoadItems);\n  }\n\n  if (mode === 'edit') {\n    var _existingWorkflowObj;\n\n    //editing existing\n    let existingWorkflowObj = yield select(selectors.workOrderResource, id);\n\n    if (!((_existingWorkflowObj = existingWorkflowObj) === null || _existingWorkflowObj === void 0 ? void 0 : _existingWorkflowObj.value)) {\n      yield call(requestWorkRequest, {\n        wrNo: id\n      });\n      existingWorkflowObj = yield select(selectors.workOrderResource, id);\n\n      if (!existingWorkflowObj.value) {\n        //error\n        return;\n      }\n    }\n\n    const {\n      value: existingWorkflow\n    } = existingWorkflowObj;\n    const observationDt = moment(existingWorkflow.observationDate).format('YYYY-MM-DD HH:mm:ss');\n    const targetDt = moment(existingWorkflow.targetDate).format('YYYY-MM-DD HH:mm:ss');\n    const wRDate = moment(existingWorkflow.date).format('YYYY-MM-DD HH:mm:ss');\n    let wrNo = '';\n\n    if (mode !== 'copy') {\n      wrNo = existingWorkflow.workrequestNoout;\n    }\n\n    return yield put(actions.workflow.update.initSuccess({\n      id,\n      observationDate: observationDt.split(' ')[0],\n      observationTime: observationDt.split(' ')[1],\n      targetDate: targetDt.split(' ')[0],\n      targetTime: targetDt.split(' ')[1],\n      observationDetails: existingWorkflow.observationDetails,\n      autoCloseFlag: existingWorkflow.autoclose,\n      date: wRDate.split(' ')[0],\n      fileList: existingWorkflow.GetfileListinfo.map(i => ({ ...i,\n        status: 'UPLOADED'\n      })),\n      wrOn: existingWorkflow.workrequestOnout,\n      eqplocCode: existingWorkflow.equipmentCodeout,\n      Guid: existingWorkflow.Guid,\n      locationCode: existingWorkflow.locationCodeout,\n      problemCode: existingWorkflow.problemCode,\n      problemDesc: existingWorkflow.problemDesc,\n      reportedByCode: existingWorkflow.reportedByCodeout,\n      reportedByName: existingWorkflow.reportedByNameout,\n      status: existingWorkflow.Statusdesc,\n      time: wRDate.split(' ')[1],\n      Timestamp: existingWorkflow.timestamp + 1 || 0,\n      workGroup: existingWorkflow.workGroupout,\n      workPhone: existingWorkflow.workPhone,\n      workrequestNo: wrNo,\n      wrCategory: existingWorkflow.Categoryout,\n      wrDesc: existingWorkflow.wrDesc,\n      wrhdndate1: \"\",\n      wrhdndate2: \"\",\n      wrhdndate3: \"\",\n      wrhdnint1: null,\n      wrhdnint2: null,\n      wrhdnint3: null,\n      wrhdnnumeric1: null,\n      wrhdnnumeric2: null,\n      wrhdnnumeric3: null,\n      wrhdnstring1: \"\",\n      wrhdnstring2: \"\",\n      wrhdnstring3: \"\",\n      wrhdnstring4: \"\",\n      wrhdnstring5: \"\",\n      wrPriority: existingWorkflow.Priorityout,\n      wrType: existingWorkflow.Typeout,\n      Actionflag: \"Create_WR\",\n      autoclosedesc: '',\n      equipmentCondition: existingWorkflow.equipmentCondition\n    }));\n  }\n\n  const defaultValues = yield select(selectors.workflowDefaultValues);\n  const {\n    reportedbyinformation = [],\n    probleminformation = []\n  } = yield select(selectors.workflowItems);\n  const currentDate = convertUtcToTimezone({\n    date: new Date(),\n    dateFormat: 'YYYY-MM-DD HH:mm:ss',\n    isDateOnly: true\n  });\n  return yield put(actions.workflow.update.initSuccess({\n    id,\n    observationDate: currentDate.split(' ')[0],\n    observationTime: currentDate.split(' ')[1],\n    targetDate: currentDate.split(' ')[0],\n    targetTime: currentDate.split(' ')[1],\n    observationDetails: '',\n    autoCloseFlag: defaultValues.autoCloseCode,\n    date: currentDate.split(' ')[0],\n    fileList: [],\n    wrOn: defaultValues.wrOnCode,\n    eqplocCode: defaultValues.eqplocCode,\n    Guid: \"\",\n    locationCode: \"\",\n    problemCode: (probleminformation === null || probleminformation === void 0 ? void 0 : (_probleminformation$ = probleminformation[0]) === null || _probleminformation$ === void 0 ? void 0 : _probleminformation$.problemCode) || '',\n    problemDesc: (probleminformation === null || probleminformation === void 0 ? void 0 : (_probleminformation$2 = probleminformation[0]) === null || _probleminformation$2 === void 0 ? void 0 : _probleminformation$2.problemDesc) || '',\n    reportedByCode: (reportedbyinformation === null || reportedbyinformation === void 0 ? void 0 : (_reportedbyinformatio = reportedbyinformation[0]) === null || _reportedbyinformatio === void 0 ? void 0 : _reportedbyinformatio.reportedbycode) || '',\n    reportedByName: (reportedbyinformation === null || reportedbyinformation === void 0 ? void 0 : (_reportedbyinformatio2 = reportedbyinformation[0]) === null || _reportedbyinformatio2 === void 0 ? void 0 : _reportedbyinformatio2.reportedbyname) || '',\n    status: \"Fresh\",\n    time: currentDate.split(' ')[1],\n    Timestamp: null,\n    workGroup: defaultValues.wgCode,\n    workPhone: \"\",\n    workrequestNo: \"\",\n    wrCategory: defaultValues.categoryCode,\n    wrDesc: defaultValues.wrOnDesc,\n    wrhdndate1: \"\",\n    wrhdndate2: \"\",\n    wrhdndate3: \"\",\n    wrhdnint1: null,\n    wrhdnint2: null,\n    wrhdnint3: null,\n    wrhdnnumeric1: null,\n    wrhdnnumeric2: null,\n    wrhdnnumeric3: null,\n    wrhdnstring1: \"\",\n    wrhdnstring2: \"\",\n    wrhdnstring3: \"\",\n    wrhdnstring4: \"\",\n    wrhdnstring5: \"\",\n    wrPriority: defaultValues.priorityCode,\n    wrType: defaultValues.typeCode,\n    Actionflag: \"Create_WR\",\n    autoclosedesc: defaultValues.autoCloseDesc,\n    equipmentCondition: defaultValues.eqpConditionCode\n  }));\n}\nexport function* workflowSave() {\n  const {\n    value: workflow = {}\n  } = yield select(selectors.workflow);\n  const query = createWorkflowRequest(workflow);\n\n  try {\n    var _resp$workRequest_pos, _resp$workRequest_pos2;\n\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true\n    });\n\n    if (resp === null || resp === void 0 ? void 0 : resp.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n\n    if (resp === null || resp === void 0 ? void 0 : (_resp$workRequest_pos = resp['workRequest_postWrkReqCreation']) === null || _resp$workRequest_pos === void 0 ? void 0 : (_resp$workRequest_pos2 = _resp$workRequest_pos.createWorkRequest) === null || _resp$workRequest_pos2 === void 0 ? void 0 : _resp$workRequest_pos2.data) {\n      const {\n        workrequestNo\n      } = resp['workRequest_postWrkReqCreation'].createWorkRequest.data;\n      return yield put(actions.workflow.update.saveSuccess(workrequestNo));\n    }\n\n    return yield put(actions.workflow.update.saveFailed('Something went wrong!'));\n  } catch (e) {\n    const [error] = e.response.errors;\n    let message = 'Something went wrong!';\n\n    try {\n      var _parsedErorMsg$;\n\n      const parsedErorMsg = JSON.parse(error.message);\n\n      if (parsedErorMsg === null || parsedErorMsg === void 0 ? void 0 : (_parsedErorMsg$ = parsedErorMsg[0]) === null || _parsedErorMsg$ === void 0 ? void 0 : _parsedErorMsg$.description) {\n        message = parsedErorMsg[0].description;\n      }\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n\n    return yield put(actions.workflow.update.saveFailed(message));\n  }\n}\nexport function* workflowAddAttachment({\n  file\n}) {\n  const {\n    data,\n    error\n  } = yield call(uploadAttachment, {\n    file\n  });\n\n  if (data) {\n    yield put(actions.workflow.update.addAttachmentSuccess({\n      filesIndividualRef: data.fileId,\n      name: file.name,\n      filesMainRef: data.name,\n      relativePath: 'APIEamwrkreq'\n    }));\n  } else {\n    yield put(actions.workflow.update.addAttachmentFailed({\n      name: file.name\n    }));\n  }\n}\nexport const workflowSagas = [takeLatest(actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST, workflowLoadItems), takeLatest(actionTypes.WORKFLOW.UPDATE.INIT, workflowUpdateInit), takeEvery(actionTypes.WORKFLOW.UPDATE.SAVE, workflowSave), takeEvery(actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT, workflowAddAttachment)];","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/sagas/workflow/index.js"],"names":["call","takeEvery","put","select","takeLatest","axios","apiCallWithRetry","actions","actionTypes","selectors","getWorkflowMetadata","convertUtcToTimezone","AppSettings","createWorkflowRequest","requestWorkRequest","moment","uploadAttachment","workflowLoadItems","query","resp","opts","hidden","getListItems","data","comboItems","defaultValues","screenLaunchdefaultvaluesUPEassistedforallProperties","workflow","received","failed","e","workflowUpdateInit","id","mode","workflowItems","status","existingWorkflowObj","workOrderResource","value","wrNo","existingWorkflow","observationDt","observationDate","format","targetDt","targetDate","wRDate","date","workrequestNoout","update","initSuccess","split","observationTime","targetTime","observationDetails","autoCloseFlag","autoclose","fileList","GetfileListinfo","map","i","wrOn","workrequestOnout","eqplocCode","equipmentCodeout","Guid","locationCode","locationCodeout","problemCode","problemDesc","reportedByCode","reportedByCodeout","reportedByName","reportedByNameout","Statusdesc","time","Timestamp","timestamp","workGroup","workGroupout","workPhone","workrequestNo","wrCategory","Categoryout","wrDesc","wrhdndate1","wrhdndate2","wrhdndate3","wrhdnint1","wrhdnint2","wrhdnint3","wrhdnnumeric1","wrhdnnumeric2","wrhdnnumeric3","wrhdnstring1","wrhdnstring2","wrhdnstring3","wrhdnstring4","wrhdnstring5","wrPriority","Priorityout","wrType","Typeout","Actionflag","autoclosedesc","equipmentCondition","workflowDefaultValues","reportedbyinformation","probleminformation","currentDate","Date","dateFormat","isDateOnly","autoCloseCode","wrOnCode","reportedbycode","reportedbyname","wgCode","categoryCode","wrOnDesc","priorityCode","typeCode","autoCloseDesc","eqpConditionCode","workflowSave","errors","parsedErrorJson","JSON","parse","message","saveFailed","description","createWorkRequest","saveSuccess","error","response","parsedErorMsg","workflowAddAttachment","file","addAttachmentSuccess","filesIndividualRef","fileId","name","filesMainRef","relativePath","addAttachmentFailed","workflowSagas","WORKFLOW","COMBO_ITEMS","REQUEST","UPDATE","INIT","SAVE","ADD_ATTACHMENT"],"mappings":"AACA,SACEA,IADF,EAEEC,SAFF,EAGEC,GAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,oBANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,IAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,mBAAT,QAAoC,+CAApC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,qBAAT,QAAsC,iDAAtC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA;AACA;AACA;AACA;;AACA,OAAO,UAAUC,iBAAV,GAA8B;AACnC,QAAMC,KAAK,GAAGR,mBAAmB,EAAjC;;AACA,MAAI;AAAA;;AACF,UAAMS,IAAI,GAAG,MAAMnB,IAAI,CAACM,gBAAD,EAAmB;AACxCc,MAAAA,IAAI,EAAE,EADkC;AAExCF,MAAAA,KAAK,EAAEA,KAFiC;AAGxCG,MAAAA,MAAM,EAAE;AAHgC,KAAnB,CAAvB;;AAKA,QAAIF,IAAJ,aAAIA,IAAJ,gDAAIA,IAAI,CAAG,kCAAH,CAAR,oFAAI,sBAA4CG,YAAhD,2DAAI,uBAA0DC,IAA9D,EAAoE;AAClE,YAAMC,UAAU,GAAGL,IAAI,CAAC,kCAAD,CAAJ,CAAyCG,YAAzC,CAAsDC,IAAzE;AACA,YAAME,aAAa,GAAGN,IAAI,CAAC,kCAAD,CAAJ,CAAyCO,oDAAzC,CAA8FH,IAApH;AACA,aAAO,MAAMrB,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBH,UAAjB,CAA4BI,QAA5B,CAAqCJ,UAArC,EAAiDC,aAAjD,CAAD,CAAhB;AACD;;AACD,WAAO,MAAMvB,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBH,UAAjB,CAA4BK,MAA5B,EAAD,CAAhB;AAED,GAbD,CAaE,OAAOC,CAAP,EAAU;AACV,WAAO,MAAM5B,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBH,UAAjB,CAA4BK,MAA5B,EAAD,CAAhB;AACD;AACF;AAGD,OAAO,UAAUE,kBAAV,CAA6B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA7B,EAA2C;AAAA;;AAChD,QAAMC,aAAa,GAAG,MAAM/B,MAAM,CAACM,SAAS,CAACyB,aAAX,CAAlC;;AACA,MAAIA,aAAa,CAACC,MAAd,KAAyB,SAA7B,EAAwC;AACtC;AACA,UAAMnC,IAAI,CAACiB,iBAAD,CAAV;AACD;;AACD,MAAIgB,IAAI,KAAK,MAAb,EAAqB;AAAA;;AACnB;AACA,QAAIG,mBAAmB,GAAG,MAAMjC,MAAM,CAACM,SAAS,CAAC4B,iBAAX,EAA8BL,EAA9B,CAAtC;;AACA,QAAI,0BAACI,mBAAD,yDAAC,qBAAqBE,KAAtB,CAAJ,EAAiC;AAC/B,YAAMtC,IAAI,CAACc,kBAAD,EAAqB;AAAEyB,QAAAA,IAAI,EAAEP;AAAR,OAArB,CAAV;AACAI,MAAAA,mBAAmB,GAAG,MAAMjC,MAAM,CAACM,SAAS,CAAC4B,iBAAX,EAA8BL,EAA9B,CAAlC;;AACA,UAAI,CAACI,mBAAmB,CAACE,KAAzB,EAAgC;AAC9B;AACA;AACD;AACF;;AACD,UAAM;AAAEA,MAAAA,KAAK,EAAEE;AAAT,QAA8BJ,mBAApC;AACA,UAAMK,aAAa,GAAG1B,MAAM,CAACyB,gBAAgB,CAACE,eAAlB,CAAN,CAAyCC,MAAzC,CAAgD,qBAAhD,CAAtB;AACA,UAAMC,QAAQ,GAAG7B,MAAM,CAACyB,gBAAgB,CAACK,UAAlB,CAAN,CAAoCF,MAApC,CAA2C,qBAA3C,CAAjB;AACA,UAAMG,MAAM,GAAG/B,MAAM,CAACyB,gBAAgB,CAACO,IAAlB,CAAN,CAA8BJ,MAA9B,CAAqC,qBAArC,CAAf;AACA,QAAIJ,IAAI,GAAG,EAAX;;AACA,QAAIN,IAAI,KAAK,MAAb,EAAqB;AACnBM,MAAAA,IAAI,GAAGC,gBAAgB,CAACQ,gBAAxB;AACD;;AACD,WAAO,MAAM9C,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBC,WAAxB,CAAoC;AACnDlB,MAAAA,EADmD;AAEnDU,MAAAA,eAAe,EAAED,aAAa,CAACU,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAFkC;AAGnDC,MAAAA,eAAe,EAAEX,aAAa,CAACU,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAHkC;AAInDN,MAAAA,UAAU,EAAED,QAAQ,CAACO,KAAT,CAAe,GAAf,EAAoB,CAApB,CAJuC;AAKnDE,MAAAA,UAAU,EAAET,QAAQ,CAACO,KAAT,CAAe,GAAf,EAAoB,CAApB,CALuC;AAMnDG,MAAAA,kBAAkB,EAAEd,gBAAgB,CAACc,kBANc;AAOnDC,MAAAA,aAAa,EAAEf,gBAAgB,CAACgB,SAPmB;AAQnDT,MAAAA,IAAI,EAAED,MAAM,CAACK,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAR6C;AASnDM,MAAAA,QAAQ,EAAEjB,gBAAgB,CAACkB,eAAjB,CAAiCC,GAAjC,CAAqCC,CAAC,KAAK,EAAE,GAAGA,CAAL;AAAQzB,QAAAA,MAAM,EAAE;AAAhB,OAAL,CAAtC,CATyC;AAUnD0B,MAAAA,IAAI,EAAErB,gBAAgB,CAACsB,gBAV4B;AAWnDC,MAAAA,UAAU,EAAEvB,gBAAgB,CAACwB,gBAXsB;AAYnDC,MAAAA,IAAI,EAAEzB,gBAAgB,CAACyB,IAZ4B;AAanDC,MAAAA,YAAY,EAAE1B,gBAAgB,CAAC2B,eAboB;AAcnDC,MAAAA,WAAW,EAAE5B,gBAAgB,CAAC4B,WAdqB;AAenDC,MAAAA,WAAW,EAAE7B,gBAAgB,CAAC6B,WAfqB;AAgBnDC,MAAAA,cAAc,EAAE9B,gBAAgB,CAAC+B,iBAhBkB;AAiBnDC,MAAAA,cAAc,EAAEhC,gBAAgB,CAACiC,iBAjBkB;AAkBnDtC,MAAAA,MAAM,EAAEK,gBAAgB,CAACkC,UAlB0B;AAmBnDC,MAAAA,IAAI,EAAE7B,MAAM,CAACK,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAnB6C;AAoBnDyB,MAAAA,SAAS,EAAEpC,gBAAgB,CAACqC,SAAjB,GAA6B,CAA7B,IAAkC,CApBM;AAqBnDC,MAAAA,SAAS,EAAEtC,gBAAgB,CAACuC,YArBuB;AAsBnDC,MAAAA,SAAS,EAAExC,gBAAgB,CAACwC,SAtBuB;AAuBnDC,MAAAA,aAAa,EAAE1C,IAvBoC;AAwBnD2C,MAAAA,UAAU,EAAE1C,gBAAgB,CAAC2C,WAxBsB;AAyBnDC,MAAAA,MAAM,EAAE5C,gBAAgB,CAAC4C,MAzB0B;AA0BnDC,MAAAA,UAAU,EAAE,EA1BuC;AA2BnDC,MAAAA,UAAU,EAAE,EA3BuC;AA4BnDC,MAAAA,UAAU,EAAE,EA5BuC;AA6BnDC,MAAAA,SAAS,EAAE,IA7BwC;AA8BnDC,MAAAA,SAAS,EAAE,IA9BwC;AA+BnDC,MAAAA,SAAS,EAAE,IA/BwC;AAgCnDC,MAAAA,aAAa,EAAE,IAhCoC;AAiCnDC,MAAAA,aAAa,EAAE,IAjCoC;AAkCnDC,MAAAA,aAAa,EAAE,IAlCoC;AAmCnDC,MAAAA,YAAY,EAAE,EAnCqC;AAoCnDC,MAAAA,YAAY,EAAE,EApCqC;AAqCnDC,MAAAA,YAAY,EAAE,EArCqC;AAsCnDC,MAAAA,YAAY,EAAE,EAtCqC;AAuCnDC,MAAAA,YAAY,EAAE,EAvCqC;AAwCnDC,MAAAA,UAAU,EAAE3D,gBAAgB,CAAC4D,WAxCsB;AAyCnDC,MAAAA,MAAM,EAAE7D,gBAAgB,CAAC8D,OAzC0B;AA0CnDC,MAAAA,UAAU,EAAE,WA1CuC;AA2CnDC,MAAAA,aAAa,EAAE,EA3CoC;AA4CnDC,MAAAA,kBAAkB,EAAEjE,gBAAgB,CAACiE;AA5Cc,KAApC,CAAD,CAAhB;AA8CD;;AACD,QAAMhF,aAAa,GAAG,MAAMtB,MAAM,CAACM,SAAS,CAACiG,qBAAX,CAAlC;AACA,QAAM;AAAEC,IAAAA,qBAAqB,GAAG,EAA1B;AAA8BC,IAAAA,kBAAkB,GAAG;AAAnD,MAA0D,MAAMzG,MAAM,CAACM,SAAS,CAACyB,aAAX,CAA5E;AACA,QAAM2E,WAAW,GAAGlG,oBAAoB,CAAC;AAAEoC,IAAAA,IAAI,EAAE,IAAI+D,IAAJ,EAAR;AAAoBC,IAAAA,UAAU,EAAE,qBAAhC;AAAuDC,IAAAA,UAAU,EAAE;AAAnE,GAAD,CAAxC;AACA,SAAO,MAAM9G,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBC,WAAxB,CAAoC;AACnDlB,IAAAA,EADmD;AAEnDU,IAAAA,eAAe,EAAEmE,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAFkC;AAGnDC,IAAAA,eAAe,EAAEyD,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAHkC;AAInDN,IAAAA,UAAU,EAAEgE,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAJuC;AAKnDE,IAAAA,UAAU,EAAEwD,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CALuC;AAMnDG,IAAAA,kBAAkB,EAAE,EAN+B;AAOnDC,IAAAA,aAAa,EAAE9B,aAAa,CAACwF,aAPsB;AAQnDlE,IAAAA,IAAI,EAAE8D,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAR6C;AASnDM,IAAAA,QAAQ,EAAE,EATyC;AAUnDI,IAAAA,IAAI,EAAEpC,aAAa,CAACyF,QAV+B;AAWnDnD,IAAAA,UAAU,EAAEtC,aAAa,CAACsC,UAXyB;AAYnDE,IAAAA,IAAI,EAAE,EAZ6C;AAanDC,IAAAA,YAAY,EAAE,EAbqC;AAcnDE,IAAAA,WAAW,EAAE,CAAAwC,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,oCAAAA,kBAAkB,CAAG,CAAH,CAAlB,8EAAyBxC,WAAzB,KAAwC,EAdF;AAenDC,IAAAA,WAAW,EAAE,CAAAuC,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,qCAAAA,kBAAkB,CAAG,CAAH,CAAlB,gFAAyBvC,WAAzB,KAAwC,EAfF;AAgBnDC,IAAAA,cAAc,EAAE,CAAAqC,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,qCAAAA,qBAAqB,CAAG,CAAH,CAArB,gFAA4BQ,cAA5B,KAA8C,EAhBX;AAiBnD3C,IAAAA,cAAc,EAAE,CAAAmC,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,sCAAAA,qBAAqB,CAAG,CAAH,CAArB,kFAA4BS,cAA5B,KAA8C,EAjBX;AAkBnDjF,IAAAA,MAAM,EAAE,OAlB2C;AAmBnDwC,IAAAA,IAAI,EAAEkC,WAAW,CAAC1D,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAnB6C;AAoBnDyB,IAAAA,SAAS,EAAE,IApBwC;AAqBnDE,IAAAA,SAAS,EAAErD,aAAa,CAAC4F,MArB0B;AAsBnDrC,IAAAA,SAAS,EAAE,EAtBwC;AAuBnDC,IAAAA,aAAa,EAAE,EAvBoC;AAwBnDC,IAAAA,UAAU,EAAEzD,aAAa,CAAC6F,YAxByB;AAyBnDlC,IAAAA,MAAM,EAAE3D,aAAa,CAAC8F,QAzB6B;AA0BnDlC,IAAAA,UAAU,EAAE,EA1BuC;AA2BnDC,IAAAA,UAAU,EAAE,EA3BuC;AA4BnDC,IAAAA,UAAU,EAAE,EA5BuC;AA6BnDC,IAAAA,SAAS,EAAE,IA7BwC;AA8BnDC,IAAAA,SAAS,EAAE,IA9BwC;AA+BnDC,IAAAA,SAAS,EAAE,IA/BwC;AAgCnDC,IAAAA,aAAa,EAAE,IAhCoC;AAiCnDC,IAAAA,aAAa,EAAE,IAjCoC;AAkCnDC,IAAAA,aAAa,EAAE,IAlCoC;AAmCnDC,IAAAA,YAAY,EAAE,EAnCqC;AAoCnDC,IAAAA,YAAY,EAAE,EApCqC;AAqCnDC,IAAAA,YAAY,EAAE,EArCqC;AAsCnDC,IAAAA,YAAY,EAAE,EAtCqC;AAuCnDC,IAAAA,YAAY,EAAE,EAvCqC;AAwCnDC,IAAAA,UAAU,EAAE1E,aAAa,CAAC+F,YAxCyB;AAyCnDnB,IAAAA,MAAM,EAAE5E,aAAa,CAACgG,QAzC6B;AA0CnDlB,IAAAA,UAAU,EAAE,WA1CuC;AA2CnDC,IAAAA,aAAa,EAAE/E,aAAa,CAACiG,aA3CsB;AA4CnDjB,IAAAA,kBAAkB,EAAEhF,aAAa,CAACkG;AA5CiB,GAApC,CAAD,CAAhB;AA8CD;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAM;AAAEtF,IAAAA,KAAK,EAAEX,QAAQ,GAAG;AAApB,MAA2B,MAAMxB,MAAM,CAACM,SAAS,CAACkB,QAAX,CAA7C;AACA,QAAMT,KAAK,GAAGL,qBAAqB,CAACc,QAAD,CAAnC;;AACA,MAAI;AAAA;;AACF,UAAMR,IAAI,GAAG,MAAMnB,IAAI,CAACM,gBAAD,EAAmB;AACxCc,MAAAA,IAAI,EAAE,EADkC;AAExCF,MAAAA,KAAK,EAAEA,KAFiC;AAGxCG,MAAAA,MAAM,EAAE;AAHgC,KAAnB,CAAvB;;AAKA,QAAIF,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAE0G,MAAV,EAAkB;AAChB,YAAMC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAW7G,IAAI,CAAC0G,MAAL,CAAY,CAAZ,EAAeI,OAAf,IAA0B,IAArC,CAAxB;AACA,aAAO,MAAM/H,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBiF,UAAxB,CAAmCJ,eAAe,CAACK,WAAhB,IAA+B,uBAAlE,CAAD,CAAhB;AACD;;AACD,QAAIhH,IAAJ,aAAIA,IAAJ,gDAAIA,IAAI,CAAG,gCAAH,CAAR,oFAAI,sBAA0CiH,iBAA9C,2DAAI,uBAA6D7G,IAAjE,EAAuE;AACrE,YAAM;AAAE0D,QAAAA;AAAF,UAAoB9D,IAAI,CAAC,gCAAD,CAAJ,CAAuCiH,iBAAvC,CAAyD7G,IAAnF;AACA,aAAO,MAAMrB,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBoF,WAAxB,CAAoCpD,aAApC,CAAD,CAAhB;AACD;;AACD,WAAO,MAAM/E,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBiF,UAAxB,CAAmC,uBAAnC,CAAD,CAAhB;AAED,GAhBD,CAgBE,OAAOpG,CAAP,EAAU;AACV,UAAM,CAACwG,KAAD,IAAUxG,CAAC,CAACyG,QAAF,CAAWV,MAA3B;AACA,QAAII,OAAO,GAAG,uBAAd;;AACA,QAAI;AAAA;;AACF,YAAMO,aAAa,GAAGT,IAAI,CAACC,KAAL,CAAWM,KAAK,CAACL,OAAjB,CAAtB;;AACA,UAAIO,aAAJ,aAAIA,aAAJ,0CAAIA,aAAa,CAAG,CAAH,CAAjB,oDAAI,gBAAoBL,WAAxB,EAAqC;AACnCF,QAAAA,OAAO,GAAGO,aAAa,CAAC,CAAD,CAAb,CAAiBL,WAA3B;AACD;AAEF,KAND,CAME,OAAOrG,CAAP,EAAU;AACV,UAAIwG,KAAK,CAACL,OAAV,EAAmB;AACjBA,QAAAA,OAAO,GAAGK,KAAK,CAACL,OAAhB;AACD;AACF;;AACD,WAAO,MAAM/H,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBiF,UAAxB,CAAmCD,OAAnC,CAAD,CAAhB;AACD;AACF;AAED,OAAO,UAAUQ,qBAAV,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAA0C;AAC/C,QAAM;AAAEnH,IAAAA,IAAF;AAAQ+G,IAAAA;AAAR,MAAkB,MAAMtI,IAAI,CAACgB,gBAAD,EAAmB;AAAE0H,IAAAA;AAAF,GAAnB,CAAlC;;AACA,MAAGnH,IAAH,EAAQ;AACN,UAAMrB,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwB0F,oBAAxB,CAA6C;AAAEC,MAAAA,kBAAkB,EAAErH,IAAI,CAACsH,MAA3B;AAAmCC,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IAA9C;AAAoDC,MAAAA,YAAY,EAAExH,IAAI,CAACuH,IAAvE;AAA6EE,MAAAA,YAAY,EAAE;AAA3F,KAA7C,CAAD,CAAT;AACD,GAFD,MAGK;AACH,UAAM9I,GAAG,CAACK,OAAO,CAACoB,QAAR,CAAiBsB,MAAjB,CAAwBgG,mBAAxB,CAA4C;AAAEH,MAAAA,IAAI,EAAEJ,IAAI,CAACI;AAAb,KAA5C,CAAD,CAAT;AACD;AACF;AAID,OAAO,MAAMI,aAAa,GAAG,CAC3B9I,UAAU,CAACI,WAAW,CAAC2I,QAAZ,CAAqBC,WAArB,CAAiCC,OAAlC,EAA2CpI,iBAA3C,CADiB,EAE3Bb,UAAU,CAACI,WAAW,CAAC2I,QAAZ,CAAqBG,MAArB,CAA4BC,IAA7B,EAAmCxH,kBAAnC,CAFiB,EAG3B9B,SAAS,CAACO,WAAW,CAAC2I,QAAZ,CAAqBG,MAArB,CAA4BE,IAA7B,EAAmC5B,YAAnC,CAHkB,EAI3B3H,SAAS,CAACO,WAAW,CAAC2I,QAAZ,CAAqBG,MAArB,CAA4BG,cAA7B,EAA6ChB,qBAA7C,CAJkB,CAAtB","sourcesContent":["\nimport {\n  call,\n  takeEvery,\n  put,\n  select,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { apiCallWithRetry } from \"..\";\nimport actions from \"../../actions\";\nimport actionTypes from \"../../actions/types\";\nimport { selectors } from \"../../reducers\";\nimport { getWorkflowMetadata } from \"../../queries/workRequest/getWorkflowMetadata\";\nimport { convertUtcToTimezone } from \"../../utils/date\";\nimport { AppSettings } from \"../../utils/appSettings\";\nimport { createWorkflowRequest } from '../../queries/workRequest/createWorkflowRequest';\nimport { requestWorkRequest } from \"../workRequestV2\";\nimport moment from \"moment\";\nimport { uploadAttachment } from \"../attachment\";\n\n/**\n *\n * This loads workflow combo box items\n */\nexport function* workflowLoadItems() {\n  const query = getWorkflowMetadata();\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.['workRequest_getWrkReqMetaAndDefs']?.getListItems?.data) {\n      const comboItems = resp['workRequest_getWrkReqMetaAndDefs'].getListItems.data;\n      const defaultValues = resp['workRequest_getWrkReqMetaAndDefs'].screenLaunchdefaultvaluesUPEassistedforallProperties.data;\n      return yield put(actions.workflow.comboItems.received(comboItems, defaultValues));\n    }\n    return yield put(actions.workflow.comboItems.failed());\n\n  } catch (e) {\n    return yield put(actions.workflow.comboItems.failed());\n  }\n}\n\n\nexport function* workflowUpdateInit({ id, mode }) {\n  const workflowItems = yield select(selectors.workflowItems);\n  if (workflowItems.status !== 'success') {\n    //load required workflow combo items\n    yield call(workflowLoadItems);\n  }\n  if (mode === 'edit') {\n    //editing existing\n    let existingWorkflowObj = yield select(selectors.workOrderResource, id);\n    if (!existingWorkflowObj?.value) {\n      yield call(requestWorkRequest, { wrNo: id });\n      existingWorkflowObj = yield select(selectors.workOrderResource, id);\n      if (!existingWorkflowObj.value) {\n        //error\n        return;\n      }\n    }\n    const { value: existingWorkflow } = existingWorkflowObj;\n    const observationDt = moment(existingWorkflow.observationDate).format('YYYY-MM-DD HH:mm:ss');\n    const targetDt = moment(existingWorkflow.targetDate).format('YYYY-MM-DD HH:mm:ss');\n    const wRDate = moment(existingWorkflow.date).format('YYYY-MM-DD HH:mm:ss');\n    let wrNo = '';\n    if (mode !== 'copy') {\n      wrNo = existingWorkflow.workrequestNoout\n    }\n    return yield put(actions.workflow.update.initSuccess({\n      id,\n      observationDate: observationDt.split(' ')[0],\n      observationTime: observationDt.split(' ')[1],\n      targetDate: targetDt.split(' ')[0],\n      targetTime: targetDt.split(' ')[1],\n      observationDetails: existingWorkflow.observationDetails,\n      autoCloseFlag: existingWorkflow.autoclose,\n      date: wRDate.split(' ')[0],\n      fileList: existingWorkflow.GetfileListinfo.map(i => ({ ...i, status: 'UPLOADED' })),\n      wrOn: existingWorkflow.workrequestOnout,\n      eqplocCode: existingWorkflow.equipmentCodeout,\n      Guid: existingWorkflow.Guid,\n      locationCode: existingWorkflow.locationCodeout,\n      problemCode: existingWorkflow.problemCode,\n      problemDesc: existingWorkflow.problemDesc,\n      reportedByCode: existingWorkflow.reportedByCodeout,\n      reportedByName: existingWorkflow.reportedByNameout,\n      status: existingWorkflow.Statusdesc,\n      time: wRDate.split(' ')[1],\n      Timestamp: existingWorkflow.timestamp + 1 || 0,\n      workGroup: existingWorkflow.workGroupout,\n      workPhone: existingWorkflow.workPhone,\n      workrequestNo: wrNo,\n      wrCategory: existingWorkflow.Categoryout,\n      wrDesc: existingWorkflow.wrDesc,\n      wrhdndate1: \"\",\n      wrhdndate2: \"\",\n      wrhdndate3: \"\",\n      wrhdnint1: null,\n      wrhdnint2: null,\n      wrhdnint3: null,\n      wrhdnnumeric1: null,\n      wrhdnnumeric2: null,\n      wrhdnnumeric3: null,\n      wrhdnstring1: \"\",\n      wrhdnstring2: \"\",\n      wrhdnstring3: \"\",\n      wrhdnstring4: \"\",\n      wrhdnstring5: \"\",\n      wrPriority: existingWorkflow.Priorityout,\n      wrType: existingWorkflow.Typeout,\n      Actionflag: \"Create_WR\",\n      autoclosedesc: '',\n      equipmentCondition: existingWorkflow.equipmentCondition,\n    }));\n  }\n  const defaultValues = yield select(selectors.workflowDefaultValues);\n  const { reportedbyinformation = [], probleminformation = [] } = yield select(selectors.workflowItems);\n  const currentDate = convertUtcToTimezone({ date: new Date(), dateFormat: 'YYYY-MM-DD HH:mm:ss', isDateOnly: true })\n  return yield put(actions.workflow.update.initSuccess({\n    id,\n    observationDate: currentDate.split(' ')[0],\n    observationTime: currentDate.split(' ')[1],\n    targetDate: currentDate.split(' ')[0],\n    targetTime: currentDate.split(' ')[1],\n    observationDetails: '',\n    autoCloseFlag: defaultValues.autoCloseCode,\n    date: currentDate.split(' ')[0],\n    fileList: [],\n    wrOn: defaultValues.wrOnCode,\n    eqplocCode: defaultValues.eqplocCode,\n    Guid: \"\",\n    locationCode: \"\",\n    problemCode: probleminformation?.[0]?.problemCode || '',\n    problemDesc: probleminformation?.[0]?.problemDesc || '',\n    reportedByCode: reportedbyinformation?.[0]?.reportedbycode || '',\n    reportedByName: reportedbyinformation?.[0]?.reportedbyname || '',\n    status: \"Fresh\",\n    time: currentDate.split(' ')[1],\n    Timestamp: null,\n    workGroup: defaultValues.wgCode,\n    workPhone: \"\",\n    workrequestNo: \"\",\n    wrCategory: defaultValues.categoryCode,\n    wrDesc: defaultValues.wrOnDesc,\n    wrhdndate1: \"\",\n    wrhdndate2: \"\",\n    wrhdndate3: \"\",\n    wrhdnint1: null,\n    wrhdnint2: null,\n    wrhdnint3: null,\n    wrhdnnumeric1: null,\n    wrhdnnumeric2: null,\n    wrhdnnumeric3: null,\n    wrhdnstring1: \"\",\n    wrhdnstring2: \"\",\n    wrhdnstring3: \"\",\n    wrhdnstring4: \"\",\n    wrhdnstring5: \"\",\n    wrPriority: defaultValues.priorityCode,\n    wrType: defaultValues.typeCode,\n    Actionflag: \"Create_WR\",\n    autoclosedesc: defaultValues.autoCloseDesc,\n    equipmentCondition: defaultValues.eqpConditionCode,\n  }));\n}\n\nexport function* workflowSave() {\n  const { value: workflow = {} } = yield select(selectors.workflow);\n  const query = createWorkflowRequest(workflow);\n  try {\n    const resp = yield call(apiCallWithRetry, {\n      opts: {},\n      query: query,\n      hidden: true,\n    })\n    if (resp?.errors) {\n      const parsedErrorJson = JSON.parse(resp.errors[0].message || \"{}\");\n      return yield put(actions.workflow.update.saveFailed(parsedErrorJson.description || 'Something went wrong!'));\n    }\n    if (resp?.['workRequest_postWrkReqCreation']?.createWorkRequest?.data) {\n      const { workrequestNo } = resp['workRequest_postWrkReqCreation'].createWorkRequest.data\n      return yield put(actions.workflow.update.saveSuccess(workrequestNo));\n    }\n    return yield put(actions.workflow.update.saveFailed('Something went wrong!'));\n\n  } catch (e) {\n    const [error] = e.response.errors;\n    let message = 'Something went wrong!';\n    try {\n      const parsedErorMsg = JSON.parse(error.message);\n      if (parsedErorMsg?.[0]?.description) {\n        message = parsedErorMsg[0].description;\n      }\n\n    } catch (e) {\n      if (error.message) {\n        message = error.message;\n      }\n    }\n    return yield put(actions.workflow.update.saveFailed(message));\n  }\n}\n\nexport function* workflowAddAttachment({ file }) {\n  const { data, error } = yield call(uploadAttachment, { file });\n  if(data){\n    yield put(actions.workflow.update.addAttachmentSuccess({ filesIndividualRef: data.fileId, name: file.name, filesMainRef: data.name, relativePath: 'APIEamwrkreq' }));\n  }\n  else {\n    yield put(actions.workflow.update.addAttachmentFailed({ name: file.name }));\n  }\n}\n\n\n\nexport const workflowSagas = [\n  takeLatest(actionTypes.WORKFLOW.COMBO_ITEMS.REQUEST, workflowLoadItems),\n  takeLatest(actionTypes.WORKFLOW.UPDATE.INIT, workflowUpdateInit),\n  takeEvery(actionTypes.WORKFLOW.UPDATE.SAVE, workflowSave),\n  takeEvery(actionTypes.WORKFLOW.UPDATE.ADD_ATTACHMENT, workflowAddAttachment),\n];\n"]},"metadata":{},"sourceType":"module"}