{"ast":null,"code":"export { get };\n\nfunction get() {\n  return {\n    debug: false,\n    initImmediate: true,\n    ns: ['translation'],\n    defaultNS: ['translation'],\n    fallbackLng: ['dev'],\n    fallbackNS: false,\n    // string or array of namespaces\n    whitelist: false,\n    // array with whitelisted languages\n    nonExplicitWhitelist: false,\n    load: 'all',\n    // | currentOnly | languageOnly\n    preload: false,\n    // array with preload languages\n    simplifyPluralSuffix: true,\n    keySeparator: '.',\n    nsSeparator: ':',\n    pluralSeparator: '_',\n    contextSeparator: '_',\n    saveMissing: false,\n    // enable to send missing values\n    updateMissing: false,\n    // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)\n    saveMissingTo: 'fallback',\n    // 'current' || 'all'\n    saveMissingPlurals: true,\n    // will save all forms not only singular key\n    missingKeyHandler: false,\n    // function(lng, ns, key, fallbackValue) -> override if prefer on handling\n    postProcess: false,\n    // string or array of postProcessor names\n    returnNull: true,\n    // allows null value as valid translation\n    returnEmptyString: true,\n    // allows empty string value as valid translation\n    returnObjects: false,\n    joinArrays: false,\n    // or string to join array\n    returnedObjectHandler: function returnedObjectHandler() {},\n    // function(key, value, options) triggered if key returns object but returnObjects is set to false\n    parseMissingKeyHandler: false,\n    // function(key) parsed a key that was not found in t() before returning\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      var ret = {};\n      if (args[1]) ret.defaultValue = args[1];\n      if (args[2]) ret.tDescription = args[2];\n      return ret;\n    },\n    interpolation: {\n      escapeValue: true,\n      format: function format(value, _format, lng) {\n        return value;\n      },\n      prefix: '{{',\n      suffix: '}}',\n      formatSeparator: ',',\n      // prefixEscaped: '{{',\n      // suffixEscaped: '}}',\n      // unescapeSuffix: '',\n      unescapePrefix: '-',\n      nestingPrefix: '$t(',\n      nestingSuffix: ')',\n      // nestingPrefixEscaped: '$t(',\n      // nestingSuffixEscaped: ')',\n      // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data\n      maxReplaces: 1000 // max replaces to prevent endless loop\n\n    }\n  };\n}\n/* eslint no-param-reassign: 0 */\n\n\nexport function transformOptions(options) {\n  // create namespace object if namespace is passed in as string\n  if (typeof options.ns === 'string') options.ns = [options.ns];\n  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS]; // extend whitelist with cimode\n\n  if (options.whitelist && options.whitelist.indexOf('cimode') < 0) options.whitelist.push('cimode');\n  return options;\n}","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/node_modules/i18next/dist/es/defaults.js"],"names":["get","debug","initImmediate","ns","defaultNS","fallbackLng","fallbackNS","whitelist","nonExplicitWhitelist","load","preload","simplifyPluralSuffix","keySeparator","nsSeparator","pluralSeparator","contextSeparator","saveMissing","updateMissing","saveMissingTo","saveMissingPlurals","missingKeyHandler","postProcess","returnNull","returnEmptyString","returnObjects","joinArrays","returnedObjectHandler","parseMissingKeyHandler","appendNamespaceToMissingKey","appendNamespaceToCIMode","overloadTranslationOptionHandler","handle","args","ret","defaultValue","tDescription","interpolation","escapeValue","format","value","_format","lng","prefix","suffix","formatSeparator","unescapePrefix","nestingPrefix","nestingSuffix","maxReplaces","transformOptions","options","indexOf","push"],"mappings":"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","sourcesContent":["export { get };\nfunction get() {\n  return {\n    debug: false,\n    initImmediate: true,\n\n    ns: ['translation'],\n    defaultNS: ['translation'],\n    fallbackLng: ['dev'],\n    fallbackNS: false, // string or array of namespaces\n\n    whitelist: false, // array with whitelisted languages\n    nonExplicitWhitelist: false,\n    load: 'all', // | currentOnly | languageOnly\n    preload: false, // array with preload languages\n\n    simplifyPluralSuffix: true,\n    keySeparator: '.',\n    nsSeparator: ':',\n    pluralSeparator: '_',\n    contextSeparator: '_',\n\n    saveMissing: false, // enable to send missing values\n    updateMissing: false, // enable to update default values if different from translated value (only useful on initial development, or when keeping code as source of truth)\n    saveMissingTo: 'fallback', // 'current' || 'all'\n    saveMissingPlurals: true, // will save all forms not only singular key\n    missingKeyHandler: false, // function(lng, ns, key, fallbackValue) -> override if prefer on handling\n\n    postProcess: false, // string or array of postProcessor names\n    returnNull: true, // allows null value as valid translation\n    returnEmptyString: true, // allows empty string value as valid translation\n    returnObjects: false,\n    joinArrays: false, // or string to join array\n    returnedObjectHandler: function returnedObjectHandler() {}, // function(key, value, options) triggered if key returns object but returnObjects is set to false\n    parseMissingKeyHandler: false, // function(key) parsed a key that was not found in t() before returning\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      var ret = {};\n      if (args[1]) ret.defaultValue = args[1];\n      if (args[2]) ret.tDescription = args[2];\n      return ret;\n    },\n\n    interpolation: {\n      escapeValue: true,\n      format: function format(value, _format, lng) {\n        return value;\n      },\n      prefix: '{{',\n      suffix: '}}',\n      formatSeparator: ',',\n      // prefixEscaped: '{{',\n      // suffixEscaped: '}}',\n      // unescapeSuffix: '',\n      unescapePrefix: '-',\n\n      nestingPrefix: '$t(',\n      nestingSuffix: ')',\n      // nestingPrefixEscaped: '$t(',\n      // nestingSuffixEscaped: ')',\n      // defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data\n      maxReplaces: 1000 // max replaces to prevent endless loop\n    }\n  };\n}\n\n/* eslint no-param-reassign: 0 */\nexport function transformOptions(options) {\n  // create namespace object if namespace is passed in as string\n  if (typeof options.ns === 'string') options.ns = [options.ns];\n  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];\n\n  // extend whitelist with cimode\n  if (options.whitelist && options.whitelist.indexOf('cimode') < 0) options.whitelist.push('cimode');\n\n  return options;\n}"]},"metadata":{},"sourceType":"module"}