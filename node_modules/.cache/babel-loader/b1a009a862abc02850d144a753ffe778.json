{"ast":null,"code":"import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { AppSettings } from \"./appSettings\";\nimport { ApolloLink } from \"apollo-link\";\nexport const createClient = token => {\n  const cache = new InMemoryCache();\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) graphQLErrors.map(({\n      message\n    }) => {\n      window.showAlert && window.showAlert({\n        type: \"Error\",\n        msg: message\n      });\n      return message;\n    });\n\n    if (networkError) {}\n  });\n  const httpLink = errorLink.concat(createHttpLink({\n    uri: AppSettings.API_URL,\n    headers: {\n      Authorization: token ? `Bearer ${token}` : \"\"\n    }\n  }));\n  const authLink = new ApolloLink((operation, forward) => {\n    operation.setContext(({\n      headers\n    }) => ({\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n        g_ctxt_cmp: headers && headers.g_ctxt_cmp || \"workRequest\",\n        g_ctxt_lang: 1,\n        g_ctxt_ou: 2,\n        g_ctxt_role: \"testrole\",\n        ...headers\n      }\n    }));\n    return forward(operation);\n  }).concat(httpLink);\n  return new ApolloClient({\n    link: authLink,\n    cache: cache\n  });\n};","map":{"version":3,"sources":["/Users/plsingh/Downloads/archive-19Sep-Sunday/src/utils/gql-client.js"],"names":["InMemoryCache","ApolloClient","createHttpLink","onError","AppSettings","ApolloLink","createClient","token","cache","errorLink","graphQLErrors","networkError","map","message","window","showAlert","type","msg","httpLink","concat","uri","API_URL","headers","Authorization","authLink","operation","forward","setContext","g_ctxt_cmp","g_ctxt_lang","g_ctxt_ou","g_ctxt_role","link"],"mappings":"AAAA,SAASA,aAAT,QAA8B,uBAA9B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAErC,QAAMC,KAAK,GAAG,IAAIR,aAAJ,EAAd;AAEA,QAAMS,SAAS,GAAGN,OAAO,CAAC,CAAC;AAAEO,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC7D,QAAID,aAAJ,EACEA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiB;AACjCC,MAAAA,MAAM,CAACC,SAAP,IAAoBD,MAAM,CAACC,SAAP,CAAiB;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,GAAG,EAAEJ;AAAtB,OAAjB,CAApB;AACA,aAAOA,OAAP;AACD,KAHD;;AAIF,QAAIF,YAAJ,EAAkB,CACjB;AACF,GARwB,CAAzB;AAUA,QAAMO,QAAQ,GAAGT,SAAS,CAACU,MAAV,CACfjB,cAAc,CAAC;AACbkB,IAAAA,GAAG,EAAEhB,WAAW,CAACiB,OADJ;AAEbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEhB,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AAFI,GAAD,CADC,CAAjB;AASA,QAAMiB,QAAQ,GAAG,IAAInB,UAAJ,CAAe,CAACoB,SAAD,EAAYC,OAAZ,KAAwB;AACtDD,IAAAA,SAAS,CAACE,UAAV,CAAqB,CAAC;AAACL,MAAAA;AAAD,KAAD,MAAgB;AAAEA,MAAAA,OAAO,EAAE;AAC9CC,QAAAA,aAAa,EAAEhB,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADG;AAE9CqB,QAAAA,UAAU,EAAGN,OAAO,IAAIA,OAAO,CAACM,UAApB,IAAmC,aAFD;AAG9CC,QAAAA,WAAW,EAAE,CAHiC;AAI9CC,QAAAA,SAAS,EAAE,CAJmC;AAK9CC,QAAAA,WAAW,EAAE,UALiC;AAM9C,WAAGT;AAN2C;AAAX,KAAhB,CAArB;AAQA,WAAOI,OAAO,CAACD,SAAD,CAAd;AACA,GAVe,EAUbN,MAVa,CAUND,QAVM,CAAjB;AAYA,SAAO,IAAIjB,YAAJ,CAAiB;AACtB+B,IAAAA,IAAI,EAACR,QADiB;AAEtBhB,IAAAA,KAAK,EAACA;AAFgB,GAAjB,CAAP;AAID,CAvCM","sourcesContent":["import { InMemoryCache } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { AppSettings } from \"./appSettings\";\nimport { ApolloLink } from \"apollo-link\";\n\nexport const createClient = (token) => {\n\n  const cache = new InMemoryCache();\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message }) => {\n        window.showAlert && window.showAlert({ type: \"Error\", msg: message });\n        return message;\n      });\n    if (networkError) {\n    }\n  });\n  \n  const httpLink = errorLink.concat(\n    createHttpLink({\n      uri: AppSettings.API_URL,\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n      }\n    })\n  );\n\n  const authLink = new ApolloLink((operation, forward) => {\n    operation.setContext(({headers}) => ({ headers: {\n      Authorization: token ? `Bearer ${token}` : \"\",\n      g_ctxt_cmp: (headers && headers.g_ctxt_cmp) || \"workRequest\",\n      g_ctxt_lang: 1,\n      g_ctxt_ou: 2,\n      g_ctxt_role: \"testrole\",\n      ...headers\n    }}));\n    return forward(operation);\n   }).concat(httpLink);\n\n  return new ApolloClient({\n    link:authLink,\n    cache:cache\n  });\n};\n"]},"metadata":{},"sourceType":"module"}